metadata:
  title: Stalking No Contact Order
  short title: Stalking No Contact Order
  comment: This program helps you ask the court to order someone making you fearful for your safety or causing you emotional distress to stop stalking you.
  authors:
    - Vivian McNaughton
    - Matt Newsted
---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALToolbox:escape_button.yml  
  - docassemble.ILAO:ilao-interview-framework.yml
  - docassemble.ILAO:shared-basic-questions.yml
---
#This text was removed from the under. Check whether the hotline can be used for stalkers or if a comparable resource exists. "**Worried about doing this on your own?** Call the [**Illinois Domestic Violence Hotline**](https://the-network.org/get-help/) at 877-863-6338 (877-TO END DV) to talk with an advocate."
---
objects:
  - users: ALPeopleList.using(there_are_any=True)
  - other_parties: ALPeopleList.using(there_are_any=True)
  - other_parties[i].other_names: ALPeopleList.using(complete_attribute='complete')
  - others_protected: ALPeopleList.using(complete_attribute='complete')
  - minors_protected: ALPeopleList.using(there_are_any=False)
  - adults_protected: ALPeopleList.using(there_are_any=False)
  - other_parties[0].employer_address: ALAddress
  - other_parties[0].service_address: ALAddress
  - other_parties[0].bonus_service_address: ALAddress
  #- employers_schools: ALPeopleList.using(complete_attribute='complete')
  - stalking_events: DAList.using(object_type=Thing, there_are_any=True, complete_attribute='complete')
  - home: ALAddress
  - report_numbers: DAList.using(object_type=Thing, there_are_any=False)
  - others_with_minor_initials: ALPeopleList.using(there_are_any=False)
  - away_address_list: DAList.using(object_type=Thing, there_are_any=False)
  - no_remain_address_list: DAList.using(object_type=Thing, there_are_any=False)
  - school_list: DAList.using(object_type=Thing, there_are_any=False)
  - work_list: DAList.using(object_type=Thing, there_are_any=False)
  - away_work_address_list: DAList.using(object_type=Thing, there_are_any=False)
  - away_school_daycare_list: DAList.using(object_type=Thing, there_are_any=False)
  - protected_workplace: ALIndividual
  - protected_school: ALIndividual
  - protected_day_care: ALIndividual
  - other_ops: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
---
code: |
  ilao_easy_form_title = "Stalking No Contact Order"
  ilao_easy_form_url = "https://www.illinoislegalaid.org/legal-information/stalking-no-contact-order-request"
  form_name = "Stalking No Contact Order"
  al_form_type = 'new_case'
  user_ask_role = 'plaintiff'
  github_user = 'IllinoisLegalAidOnline'
  github_repo_name = 'docassemble-StalkingNoContactOrderRequest'
  allowed_courts = ['Circuit']
---
# Road map
sections:
  - section_intro: Start
  - section_petitioner: People you want to protect
  - section_incidents: What happened
  - section_protections: Protections
  - section_respondent: Person you want protection from
  - section_filing_info: Filing and service details
  - section_download: Download
---
# interview order block
mandatory: True
code: |
  nav.set_section('section_intro')
  sees_nav_bar
  snapshot_start
  instructions
  snco_explainer
  whats_next
  accept_terms
  if in_illinois == False:
    not_in_illinois
  protect_whom
  need_to_gather_others
  if two_times_check == False:
    two_times_kickout
  nav.set_section('section_petitioner')
  trial_court_index
  if jurisdiction_type.all_false():
    other_jurisdiction_location
  
    
  
  users[0].name.first
  other_parties[0].name.first
  hide_address
  users[0].address.address
  if not user_relationship['unrelated']:
    related_note
  if users[0].age_in_years() < 18:
    too_young_kickout
  if need_to_gather_others:
    others_protected.gather()
    pop_protected_code
  
  nav.set_section('section_incidents')
  
  stalking_event_intro
  stalking_events.gather()
  if stalking_events.number_gathered() < 2:
    two_times_kickout
    
  nav.set_section('section_protections')
  if order_type['emergency'] and trial_court_index == -1:
    emergency_reason
  if protection_requested['away']:
    distance_away
    if protected_place_types['Home']:
      run_home_address_block
    #if protected_place_types['School'] or protected_place_types['Workplace']: 
    #  employers_schools.gather()  
    if protected_place_types['Workplace']: 
      protected_workplace.name.first
    if protected_place_types['School']:
      protected_school.name.first
    if protected_place_types['day_care']:
      protected_day_care.name.first
    if protected_place_types['Other']:
      other_places
    if trial_court_index == -1:
      if live_with_stalker:
        home.address
      if protected_place_types['School']:
        school_with_stalker
      if protected_place_types['Workplace']: 
        work_with_stalker
      #if school_with_stalker: 
      #  if school_list.number_gathered() > 1:
      #    which_stalker_school
      #if work_with_stalker:    
      #  if work_list.number_gathered() > 1:
      #    which_stalker_work
  other_parties[0].prohibit_firearms
  if trial_court_index == -1:
    other_parties[0].pay_costs 
  other_parties[0].anything_else
  if protection_requested.all_false() and not other_parties[0].prohibit_firearms and not other_parties[0].anything_else:
    other_parties[0].no_protection_chosen
  
  nav.set_section('section_respondent')
  if trial_court_index == -1:
    other_parties[0].cook_sex
  else:
    other_parties[0].state_gender
  other_parties[0].race
  if trial_court_index == -1:
    #other_parties[0].skin
    if other_parties[0].other_names.there_are_any:
      other_parties[0].other_names.gather()
  other_parties[0].ssn
  knows_respondent_dob
  other_parties[0].weight
  other_parties[0].eyes
  other_parties[0].hair
  other_parties[0].features
  other_parties[0].drivers_license
  if other_parties[0].has_vehicle:
    other_parties[0].license_plate
  if other_parties[0].another_number_check:
    other_parties[0].another_number_description
  if other_parties[0].phone_number != "" or other_parties[0].email_address != "" or (trial_court_index == -1 and other_parties[0].mobile_number != ""):
    if other_parties[0].bonus_contact_info:
      other_parties[0].alt_email
  if other_parties[0].address_known or other_parties[0].last_address_known:
    other_parties[0].address.address
  else:
    unknown_address_note
  if trial_court_index == -1:
    respondent_on_social_media
  if other_parties[0].has_job == True:
    other_parties[0].employer_name
  caution_reasons
  if trial_court_index == -1:
    #The divorce_parentage_logic call replaces the following 4 lines of code commented out.
    divorce_parentage_logic
    #if other_parties[0].divorced_user:
    #  other_parties[0].divorce_date
    #elif other_parties[0].parentage_action:
    #  other_parties[0].parentage_date
    #other_parties[0].mental_illness
    #other_parties[0].alcohol
    #other_parties[0].drugs
    #other_parties[0].carrying_weapon
    #other_parties[0].home_weapon
    #if other_parties[0].carrying_weapon or other_parties[0].home_weapon:
    #  other_parties[0].weapons_info
    #if other_parties[0].order_of_protection == True:
    #  other_ops.gather()
    respondent_on_probation
  else:
    if respondent_jail_check:
      respondent_jail_name
  
  nav.set_section('section_filing_info')
  if service_method == "sheriff" and service_state != "IL":
    service_county
  if service_method != "idk":
    other_parties[0].which_address
    if other_parties[0].bonus_service_check == True:
      other_parties[0].which_bonus_address
  if trial_court_index == -1 and service_method == "sheriff":  
    service_information
    #cook_district
  #case_number
  users[0].phone_number
  if users[0].has_email_address:
    users[0].email
  e_signature
  
  nav.set_section('section_download')
  check_ages
  
  if trial_court.address.county == "Cook":
    make_report_list
    #with_initials
    cook_stay_away_addresses
    cook_no_remain_addresses
  else:
    state_stay_away_addresses
    
  addendum_check
  #debug_page
  forms_assembling
  pop_protected_code
  adult_minor_sorting
  snapshot_forms
  get_docs_screen
---
code: |
  stuff_to_snapshot = {
  	'start_time': str(current_datetime().format_datetime()),
  	'started_interview': True, 
  	}
  
  try:
    stuff_to_snapshot['ip_address'] = device(ip=True)
  except:
    pass
  
  stuff_to_snapshot['user_zip'] = showifdef('users[0].address.zip')

  stuff_to_snapshot['downloaded_forms'] = showifdef('forms_assembling')
  
  stuff_to_snapshot['filing_county'] = showifdef('trial_court.address.county')  
  
  store_variables_snapshot(
  	data=stuff_to_snapshot, persistent=True
  	)
  snapshot_interview_state = True
---
code: |
  snapshot_interview_state
  snapshot_start = True  
---
code: |
  reconsider('snapshot_interview_state')
  snapshot_forms = True
---
#others protected gather code block
code: |
  others_protected[i].name.first
  others_protected[i].birthdate
  #if others_protected[i].is_survivor or others_protected[i].age_in_years() < 18:
  if others_protected[i].is_survivor:
    #if trial_court_index == -1:
      #others_protected[i].relation_to_user
      #others_protected[i].protection_reason
    if trial_court_index != -1:
      if hide_address:
        others_protected[i].use_safe_address
      if hide_address == False or others_protected[i].use_safe_address == False:
        others_protected[i].address.address
  else:
    others_protected[i].cannot_include
  others_protected[i].complete = True
---
reconsider: True
code: |
  popping_index = 0
  while (popping_index < others_protected.number_gathered()) and (others_protected.number_gathered() > 0):
    #if others_protected[popping_index].age_in_years() > 17 and not others_protected[popping_index].is_survivor:
    if not others_protected[popping_index].is_survivor:
      others_protected.pop(popping_index)
    else:
      #originally this was just incrementing the index, but I added these variable checks because some variables were not being defined when switching counties
      #others_protected[popping_index].birthdate
      #if trial_court_index != -1:
      #  if hide_address == False or others_protected[popping_index].use_safe_address == False:
      #    others_protected[popping_index].address.address
      popping_index += 1
  pop_protected_code = True
---
#stalkiing events gather code block
code: |
  stalking_events[i].name.text
  stalking_events[i].place
  stalking_events[i].description
  if trial_court_index == -1:
    stalking_events[i].police_check
  if i > 7:
    stalking_events.there_is_another = False
  stalking_events[i].complete = True
---
#creates list of police report numbers and sets any police reports flag
reconsider: True
code: |
  report_numbers.clear()
  any_police_reports = False
  report_numbers_on_addendum = False
  #for event in stalking_events:
  #  if event.police_check:
  #    any_police_reports = True
  #    if event.police_number != "":
  #      report_numbers.append(event.police_number)
  for index, event in enumerate(stalking_events):
    if index < 3:
      if event.police_check:
        any_police_reports = True
        if event.police_number != "":
          report_numbers.append(event.police_number)
    else:
      if event.police_check:
        any_police_reports = True
        report_numbers_on_addendum = True
  report_numbers.there_is_another = False
  make_report_list = True
---
#creates others protected list wherein minors are referred to by their initials. Used in Cook County's petition. Deprecated as of Nov 6 2024
reconsider: True
code: |
  if others_protected.there_are_any:
    others_with_minor_initials.clear()
    for index, other in enumerate(others_protected):
      
  
      if others_protected[index].age_in_years() < 18:
        #I append append an object here and set its name to the "other"'s name because if I just appended the "other" editing the "others_with_minor_initial[index]"'s name would also edit the "other"'s name.
        others_with_minor_initials.appendObject(ALIndividual)
        others_with_minor_initials[index].name.first = other.name.first[:1]
        others_with_minor_initials[index].name.last = other.name.last[:1]
      else:
        others_with_minor_initials.append(other)
    others_with_minor_initials.there_is_another = False
  with_initials = True
---
#logic for divorce and parentage
depends on:
  - user_relationship['unrelated']
  - user_relationship['marriage']
  - user_relationship['children']
code: |
  if user_relationship['marriage']:
    if other_parties[0].divorced_user:
      other_parties[0].divorce_date
  else:
    other_parties[0].divorced_user = False
  if user_relationship['children']:
    if other_parties[0].parentage_action:
      other_parties[0].parentage_date  
  else:
    other_parties.parentage_action = False
  divorce_parentage_logic = True
---
# employers schools gather code block
#code: |  
#  employers_schools[i].name.first
#  employers_schools[i].address.address
#  employers_schools[i].complete = True
---
#list of "stay away" addresses for use in the Cook petition
reconsider: True
code: |
  if protection_requested['away']:
    away_address_list.clear()
    if protected_place_types['Home']:
      away_address_list.append(home.on_one_line(bare=True))
    if protected_place_types['Workplace']:
      workplace_text = protected_workplace.name.first + ", " + protected_workplace.address.on_one_line(bare=True)
      away_address_list.append(workplace_text)
    if protected_place_types['School']:
      school_text = protected_school.name.first + ", " + protected_school.address.on_one_line(bare=True)
      away_address_list.append(school_text)
    if protected_place_types['day_care']:
      day_care_text = protected_day_care.name.first + ", " + protected_day_care.address.on_one_line(bare=True)
      away_address_list.append(day_care_text)
    #if protected_place_types['School'] or protected_place_types['Workplace']: 
    #  for place in employers_schools:
    #    away_address_list.append(place.address.on_one_line(bare=True))
    away_address_list.there_is_another = False
  cook_stay_away_addresses = True
---
#This code block sets a flag for each item in others_protected and stalking_events. This flag tracks whether the item needs to be included in an addendum form rather than the main petition.
reconsider: True
code: |
  if others_protected.there_are_any and others_protected.number_gathered() > 0:
    for index, other in enumerate(others_protected):
      if trial_court_index == -1:
        other.include_in_addendum = True
      else:
        if index > 1:
          other.include_in_addendum = True
        else:
          other.include_in_addendum = False
  for index, event in enumerate(stalking_events):
    if trial_court_index == -1:
      if index > 2:
        event.include_in_addendum = True
      else:
        event.include_in_addendum = False
    else:
      if index > 1:
        event.include_in_addendum = True
      else:
        event.include_in_addendum = False
  addendum_check = True
---
#list of "stay away" addresses for non-cook petition
reconsider: True
code: |
  if protection_requested['away']:
    #away_work_address_list.clear()
    away_school_daycare_list.clear()
    #if protected_place_types['School'] or protected_place_types['Workplace']: 
    #  for place in employers_schools:
    #    if place.type == "work":
    #      away_work_address_list.append(place.address.on_one_line(bare=True))
    #    else:
    #      away_school_daycare_list.append(place.address.on_one_line(bare=True))
    if protected_place_types['School']:
      school_text = protected_school.name.first + ", " + protected_school.address.on_one_line()
      away_school_daycare_list.append(school_text)
    if protected_place_types['day_care']:
      day_care_text = protected_day_care.name.first + ", " + protected_day_care.address.on_one_line()
      away_school_daycare_list.append(day_care_text)
    #away_work_address_list.there_is_another = False
    away_school_daycare_list.there_is_another = False
  state_stay_away_addresses = True
---
#list of "do not remain at" addresses for use in the cook petition
reconsider: True
code: |
  if protection_requested['away']:
    no_remain_address_list.clear()
    #The user's home address is no longer included in this list as it is added to a distinct field from the other locations in the cook petition template
    #if live_with_stalker:
    #  no_remain_address_list.append(home.on_one_line(bare=True))
    if protected_place_types['School'] and school_with_stalker:
      #make_lists
      school_text = protected_school.name.first + ", " + protected_school.address.on_one_line()
      no_remain_address_list.append(school_text)
      #if school_list.number_gathered() == 1:
      #  no_remain_address_list.append(school_list[0])
      #else:
      #  no_remain_address_list.append(which_stalker_school)
    if protected_place_types['Workplace'] and work_with_stalker:
      workplace_text = protected_workplace.name.first + ", " + protected_workplace.address.on_one_line()
      no_remain_address_list.append(workplace_text)
      #make_lists
      #if work_list.number_gathered() == 1:
      #  no_remain_address_list.append(work_list[0])
      #else:
      #  no_remain_address_list.append(which_stalker_work)
    no_remain_address_list.there_is_another = False
  cook_no_remain_addresses = True
---
#gather block for stalker's other names
code: |
  other_parties[0].other_names[i].name.first
  if i > 2:
    other_parties[0].other_names.there_is_another = False
  other_parties[0].other_names[i].complete = True
---
#flag tracking whether there are protected minors or protected adults
reconsider: True
code: |
  any_minors = False
  any_adults = False
  if others_protected.number_gathered() > 0:
    for other in others_protected:
      if other.age_in_years() < 18:
        any_minors = True
      else:
        any_adults = True
  check_ages = True
---
id: welcome
question: |
  Stalking No Contact Order
subquestion: |
  Welcome to Illinois Legal Aid Online's **Stalking No Contact Order** Easy Form.

  This program will help you make forms to ask for a Stalking No Contact Order (SNCO) against someone who has done things that made you fearful for your safety or caused you emotional distress. The forms you make with this program can only be used in Illinois.

  If the victim of stalking is not you, but a child or an adult who is not capable of filing a petition, you may file a petition on behalf of the victim.

  To learn more, read ILAO's article about [**Getting a Stalking No Contact Order**](https://www.illinoislegalaid.org/legal-information/getting-no-contact-order-stalking).
  
  #### Your safety is important
  
  * If you are in immediate danger, call 911.
  * If you need to exit this program, click the red **Escape** button at the top of the screen.
  * Learn about [**safety while using the Internet**](https://www.thehotline.org/help/tech-social-media-safety/).
field: sees_nav_bar
---
id: instructions
continue button field: instructions
question: |
  Instructions
subquestion: |
  To use this program:

  * The stalker cannot be a family member, current or ex-spouse, or current or ex-boyfriend or girlfriend (use the [**Order of Protection Easy Form**](https://www.illinoislegalaid.org/legal-information/order-protection) instead),
  * The stalker must have done something that made you fearful or caused emotional distress **at least two separate times**, and
  * You must file your forms in the county were the stalking took place or in the county where you live or where the stalker lives.
  
  To complete this program you will need to know:
  
  * An alternative address where you can receive court documents if you do not want the stalker to know the address where you are staying,
  * The stalker's name, gender, and race, and
  * Details about the stalking and when it took place.
  
  Set aside 10 to 20 minutes to finish this program. You can login and save your work to return to later. 
 
  ${ collapse_template(help_example) }  

  Click on **{green words}** to learn what they mean. Some questions have a question mark in a circle ${ fa_icon("question-circle", color_css="#0dcaf0" ) } that also gives help.
---
template: help_example
subject: |
  **You can expand sections like this to show more information.**
content: |  
  This is an example of help. Click again to hide.
---
id: snco explainer
continue button field: snco_explainer
question: |
  What is stalking?
subquestion: |
  Stalking is when one person (the "stalker" or "respondent") repeatedly contacts, communicates with, or follows another person (the "victim" or "petitioner"). It must be done in such a way that the victim could reasonably be expected to suffer emotional distress, fear for their safety, or fear for the safety of someone else.
  
  Someone may be stalking you when they:

  * Follow you,
  * Conduct surveillance on you,
  * Appear uninvited at your home, work, or school,
  * Make unwanted phone calls or send unwanted emails or texts,
  * Leave objects for you,
  * Vandalize your property,
  * Hurt your pet, or
  * Threaten you.
---
id: whats next
continue button field: whats_next
question: |
  After you finish this program
subquestion: |
  After you download your ${ form_name } forms, you must file them with the court clerk's office. This program does not file your ${ form_name } forms for you.
  
  The Stalking No Contact Order does not take effect until the judge signs the order after a court hearing. If you are currently in danger, call 911.

  You can also download instructions at the end of this program. The instructions can guide you through filing your forms and going to court.
---
id: two times check
question: |
  % if protect_whom['me'] and (protect_whom['adult'] or protect_whom['minor']):
  Have you and the people you want to protect been stalked by the stalker at least two times?
  % elif protect_whom['me']:
  Have you been stalked by the stalker at least two times?
  % else:
  Have the people you want to protect been stalked by the stalker at least two times?
  % endif
subquestion: |
  **Stalking** is when someone acts in a way they know, or should know, would make a normal person scared for their safety or feel emotional distress. Someone being rude or mean may not count as stalking. The judge will decide what counts as stalking. 

  % if protect_whom['me'] and (protect_whom['adult'] or protect_whom['minor']):
  If the stalker has caused **{emotional distress}** to you and the people you want to protect or made you and them afraid **at least two times**, click **Yes**.
  % elif protect_whom['me']:
   If the stalker has caused **{emotional distress}** to you or made you afraid **at least two times**, click **Yes**.
  % else:
  If the stalker has caused **{emotional distress}** to the people you want to protect or made them afraid **at least two times**, click **Yes**.
  % endif
fields:
  - no label: two_times_check
    datatype: yesnoradio
terms:
  - "emotional distress": |
      **Emotional distress** means feeling a lot of mental pain, worry, or fear.
---
template: distress_explainer
subject: |
  **What counts as emotional distress or stalking?**
content: |  
  **Emotional distress** means feeling a lot of mental pain, worry, or fear.

  **Stalking** is when someone acts in a way they know, or should know, would make a normal person scared for their safety or feel very upset. Stalking does not include an exercise of the right to free speech or assembly. It does not include lawful picketing at the workplace. 
---
id: two times kickout
event: two_times_kickout
question: |
  Sorry
subquestion: |
  To qualify for a ${form_name}, a stalker must have done things which made you fearful or caused you emotional distress **at least two separate times**.
  
  A different protective order may work for your situation. Use ILAO's [**Which protective order is right for me?**](https://www.illinoislegalaid.org/legal-information/which-protective-order-right-me) tool to learn more.
buttons:
  - Exit: exit
  - Restart: restart
---
id: in illinois
question: |
  Do you want to file for a Stalking No Contact Order in Illinois?
subquestion: |
  You can file in Illinois if:

  * You live in Illinois,
  * The person you are filing against lives in Illinois, or
  * One or more acts of the stalking took place in Illinois.
fields:
  - no label: in_illinois
    datatype: yesnoradio
---
id: not in illinois
event: not_in_illinois
question: |
  Sorry
subquestion: |
  This program is only for people who want a Stalking No Contact Order in Illinois.
  
  You can use the [**Legal Services Corporation website**](https://www.lsc.gov/about-lsc/what-legal-aid/get-legal-help) to find a legal aid organization near you.
buttons:
  - Exit: exit
  - Restart: restart
---
id: county
continue button field: case_county
question: |
  In which county will you file your ${ form_name } request?
subquestion: |
  You can file your case in the county:
  
  * Where you or who you want to protect lives,
  * Where the person you are filing against lives, or
  * Where the stalking occurred.
fields:
  - no label: trial_court_index
    datatype: integer
    code: |
      court_county_lookup()
  - note: |
      ${ collapse_template(county_lookup_help) }  
---
template: county_lookup_help
subject: |
  **What if I need help finding the county?**
content: |  
    You can use this [**City-to-County Finder**](https://www.statsamerica.org/CityCountyFinder/) to find the county.
---
depends on:
  - trial_court_index
code: |
  trial_court = court_list.as_court('trial_court', trial_court_index)
---
code: |
  def court_county_lookup(lowercase=False):
    all_court_counties = court_list._load_courts()['address_county'].items()
    filtered_courts = [(-1, "cook")] if lowercase else [(-1, "Cook")]
    for court in all_court_counties:
      if court[1] != "Cook":
        court_name = court[1].lower() if lowercase else court[1]
        filtered_courts.append((court[0],court_name))
    return sorted( filtered_courts, key=lambda y: y[1])
---
#depends on:
#  - trial_court_index
#code: |
#  if trial_court_index == -1:
#    trial_court = court_list.as_court('trial_court', 15)
#    trial_court.address.county = "Cook"
#  else:
#    trial_court = court_list.as_court('trial_court', trial_court_index)
---
depends on:
  - trial_court_index
code: |
  if trial_court_index == -1:
    trial_court = court_list.as_court('trial_court', 21)
  else:
    trial_court = court_list.as_court('trial_court', trial_court_index)
    
  court_name = str(trial_court.name)
  court_circuit = str(trial_court.circuit)
  court_street_address = str(trial_court.address.address)
  court_city = str(trial_court.address.city)
  court_state = str(trial_court.address.state)
  court_zip = str(trial_court.address.zip)
  filing_county = str(trial_court.address.county)
  courthouse_info = court_name + ", " + court_street_address + ", " + court_city + ", " + court_state + " " + court_zip
---
#If this question gets reimplemented, add court 21 to the options.
id: Cook County district
question: |
  Which Cook County courthouse will you file in?
subquestion: |
  ${ collapse_template(cook_district_help) }  
field: cook_district
choices:
  - First Municipal District, Daley Center, 50 W. Washington Street, Chicago: 15
  - Second Municipal District, 5600 Old Orchard Road, Skokie: 16
  - Third Municipal District, 2121 Euclid Avenue, Rolling Meadows: 17
  - Fourth Municipal District, 1500 Maybrook Drive, Maywood: 18
  - Fifth Municipal District, 10220 S. 76th Avenue, Bridgeview: 19
  - Sixth Municipal District, 16501 South Kedzie Parkway, Markham: 20
---
template: cook_district_help
subject: |
  **What if I am not sure?**
content: |  
  Visit **[Illinois Court Help](https://www.ilcourthelp.gov/)**, or you can call or text (833) 411-1121 for assistance.
---
id: jurisdiction
#continue button field: jurisdiction
question: |
  Why do you want to file in ${ end_in_county(trial_court.address.county)}?
subquestion: |
  Check all that apply.
fields:
  - no label: jurisdiction_type
    datatype: checkboxes
    choices:
      - I or the person I want to protect lives in ${ trial_court.address.county } County.: I live here
      - The person I am filing against lives in ${ trial_court.address.county } County.: Respondent lives here
      - The stalking took place in ${ trial_court.address.county } County.: Abuse was here
---
id: not proper location
event: other_jurisdiction_location
question: |
  Sorry
subquestion: |
  You can file your case in the Illinois county:
  
  * Where you or who you want to protect lives,
  * Where the person you are filing against lives, or
  * Where the stalking occurred.

  If Illinois is not the right place to ask for a Stalking No Contact Order, you can use the [**Legal Services Corporation website**](https://www.lsc.gov/about-lsc/what-legal-aid/get-legal-help) to find a legal aid organization near you.
buttons:
  - Exit: exit
  - Restart: restart
---
id: protect whom
question: |
  Who do you want this Stalking No Contact Order to protect?
subquestion: |
  You can file for minor children or high-risk adults who can't file for themselves. You do not need to be related to them.
  
  Check all that apply.
fields:
  - no label: protect_whom
    datatype: checkboxes
    none of the above: False
    choices:
      - Myself: me
      - A minor child: minor
      - An adult who cannot file due to age, disablility or health : adult
validation code: |
  if protect_whom.all_false():
    validation_error("You need to pick someone to protect.")
---
depends on:
  - protect_whom['minor']
  - protect_whom['adult']
  - protect_whom['me']
code: |
  if protect_whom['minor'] or protect_whom['adult']:
    others_protected.there_are_any = True
    need_to_gather_others = True    
  else:
    others_protected.there_are_any = False
    need_to_gather_others = False  
---
id: petitioner name
sets:
    - users[0].name.first
    - users[0].name.last
    - users[0].name.middle
    - users[0].name.suffix
question:  |
  What is your name?
subquestion: |
  Enter your name, even if you are filing the Stalking No Contact Order on behalf of a minor child or a high-risk adult. In court and on the forms, you will be listed as the **Petitioner**.
fields:
  - code: |
      users[0].name_fields()
---
id: hide address
question: |
  Do you want to keep your home address hidden?
subquestion: |
  You do not need to list where you are staying on your court papers. You can give the court a mailing address where you can receive court notices instead.
field: hide_address
choices:
  - Yes: True
  - No: False
---
id: get address
question: |
  % if hide_address:
  What is your mailing address?
  % else:
  What is your home address?
  % endif
subquestion: |
  % if hide_address:
  **This address will appear on your court papers.** You may receive court notices and documents about your case at this address.
  % else:
  **This address will appear on your court papers.** If you do not want this, click **Back** to keep your address hidden.
  % endif
fields:
  - Street address: users[0].address.address
    address autocomplete: True
  - Address line 2: users[0].address.unit
    required: False
  - City: users[0].address.city
  - State: users[0].address.state
    code: |
      states_list()
    default: IL      
  - ZIP code: users[0].address.zip
---
id: others protected address
question: |
  What is ${others_protected[i].name.full(middle='full')}'s mailing address?
subquestion: |
  **This address will appear on your court papers.** If you do not want to list ${others_protected[0].name.full(middle='full')}'s address, you can leave this blank.
fields:
  - Street address: others_protected[i].address.address
    address autocomplete: True
    required: False
  - Address line 2: others_protected[i].address.unit
    required: False
  - City: others_protected[i].address.city
    required: False
  - State: others_protected[i].address.state
    required: False
    code: |
      states_list()
    default: IL      
  - ZIP code: others_protected[i].address.zip
    required: False
---
depends on:
  - hide_address
  - users[0].address.address
  - users[0].address.unit
  - users[0].address.city
  - users[0].address.state
  - users[0].address.zip
code: |
  if hide_address:
    home.address
  else:
    home = users[0].address
  run_home_address_block = True
---
id: stay away home address
question: |
  What is your home address?
subquestion: |
  % if hide_address:
  You said earlier you wanted to hide your address. **The address you enter here will be on your court papers.** If you want to keep your address secret, click **Back** and change your previous answer.
  % endif
fields:
  - Street address: home.address
    address autocomplete: True
  - Address line 2: home.unit
    required: False
  - City: home.city
  - State: home.state
    code: |
      states_list()
    default: IL      
  - ZIP code: home.zip
---
#SME question: can an SNCO be issued against someone regardless of relationship, or only against someone the filer is not related to?
id: relationship
question: |
  How are you related to the person you are filing the Stalking No Contact Order against?
fields:
  - Relationship: user_relationship
    datatype: checkboxes
    none of the above: False
    choices:
      - We are not related.: unrelated
      - We dated.: dated
      - We are related through current or past marriage. For example, I am their spouse, ex-spouse, in-law, step-child, or other relative.: marriage
      - We have children together.: children
      - We are related through blood. For example, I am their parent, child, sibling, grandchild, grantparent, or other blood relative.: blood   
      - We have a blood relationship through a child. For example, I am their niece's parent.: blood_child
      - We share or have shared a home.: home
      - We have a family or household relationship through a child I am the adoptive parent, legal guardian, or custodian of.: adopt_child
      - They are my personal caregiver.: caregiver
validation code: |
    if user_relationship['unrelated']:
      if user_relationship['dated'] or user_relationship['marriage'] or user_relationship['children'] or user_relationship['blood'] or user_relationship['blood_child'] or user_relationship['adopt_child'] or user_relationship['caregiver']:
        validation_error("You cannot be both related and unrelated to the person you are filing the Stalking No Contact Order against.")
#field: user_relationship
#choices:
#  - We are not related.: unrelated
#  - We are related through blood: blood
#  - We are related through marriage
#  - I am their spouse.: se
#  - I am their ex-spouse.: xs
#  - I am their boyfriend, girlfriend, or romantic partner (including ex-).: bg
#  - We have a child in common (never married).: cc
#  - We share or shared a living space.: cs
#    help: |
#      Example: We share a common area like a kitchen. This would not apply if you just had apartments in the same building.
#  - I am their child.: ch
#  - I am their parent.: pa
#  - I am their brother, sister, or sibling.: sb
#  - They are another family member.: of
#    help: |
#      Examples: Uncle, aunt, or cousin.
#  - I am their step child.: sc
#  - I am their step brother, step sister, or step sibling.: ss
#  - I am their step parent.: sp
#  - I am their grandchild.: gc
#  - I am their grandparent.: gp
#  - I am their in-law.: il
#  - I have a disability and receive care from the abuser.: pd
#  - I am a high-risk adult with disabilities and the abuser is my personal caregiver.: pc
#    help: |
#      A **high risk adult with disabilities** is a person aged 18 or over whose physical or mental disability keeps them from protecting themself from abuse, neglect, or exploitation.
#  - I have a disability and the abuser is my personal assistant or caregiver.: pr
#  - The abuser is a family or household member of my foster child.: f
#  - The abuser is a family or household member of my adopted child, or of my prospective adopted child.: a
#  - The abuser is a family or household member of a child that I am the legally-appointed custodian of.: l
---
id: related note
event: related_note
question: |
  Other protective orders
subquestion: |
  If the person stalking you is family member, household member, boyfriend, girlfriend, or ex, you may need to file for an Order of Protection or a Civil No Contact Order instead.
  
  ILAO's article on [**Which protective order is right for me?**](https://www.illinoislegalaid.org/legal-information/which-protective-order-right-me) can help you find the protective order for your situation.
  
  If you would like to file an Order of Protection, you can use ILAO's [**Order of protection Easy Form**](https://www.illinoislegalaid.org/legal-information/order-protection). If you would like to file a Civil No Contact Order, you can use ILAO's [**Civil no contact order request Easy Form**](https://www.illinoislegalaid.org/legal-information/civil-no-contact-order-request).

  Click **Back** if you made a mistake. Or you can talk with a lawyer to discuss your options. Use **[Get Legal Help](https://www.illinoislegalaid.org/get-legal-help)** to find free or low-cost legal services in your area.
buttons:
  - Exit: exit
  - Restart: restart
---
id: user birthdate
question: |
  When were you born?
fields:
  - Your date of birth: users[0].birthdate
    datatype: BirthDate
    alMax: today()
---
id: too young kickout
event: too_young_kickout
question: |
  Sorry
subquestion: |
  You must be 18 years old or older to use this program.
  
  Your parent or guardian can file for a Stalking No Contact Order for you. If you need protection from your parent or guardian, you may want to ask a court for emancipation. To learn more about emancipation, read ILAO's article on [**becoming emancipated**](https://www.illinoislegalaid.org/legal-information/becoming-emancipated).
  
   Click **Back** if you made a mistake. Or you can talk with a lawyer to discuss your options. Use **[Get Legal Help](https://www.illinoislegalaid.org/get-legal-help)** to find free or low-cost legal services in your area.
buttons:
  - Exit: exit
  - Restart: restart
---
id: case number
question: |
  What is the case number?
subquestion: |
  If this is a new case, leave this blank. The clerk will give you a case number when you file.
fields:
  - Case number: case_number
    maxlength: 30
    required: False
---
id: phone number
question: |
  What safe phone number do you want to list on your court forms?
subquestion: |
  The court might need to contact you about this case.

  **This phone number will appear on your court forms.** If you do not want to list a phone number on your forms, leave this blank.
fields:
  - Safe phone number: users[0].phone_number
    datatype: al_international_phone
    required: False
---    
id: notice by email
question: |
  Do you have a safe email address?
subquestion: |
  If you have a safe email address, you must list it so the court and other parties can contact you about this case.
fields:
  - Have a safe email?: users[0].has_email_address
    datatype: yesnoradio
---
id: email address
question: |
  What email address do you want to list on your court forms?
subquestion: |
  **This email will appear on your court forms.** If you do not want to enter your personal email address, you can create a new email account to get email about your case.
  
  To make a new email account try one of these email services:
  
  * [**Gmail**](https://accounts.google.com/SignUp)
  * [**Outlook**](https://outlook.live.com/owa/?nlp=1&signup=1)
  * [**Yahoo**](https://login.yahoo.com/account/create?.lang=en-US&.intl=us)
  
  Be sure to check your email daily, otherwise you may miss important information about your case.
fields:
  - Safe email address: users[0].email    
    datatype: email
---
#id: your contact information
#question: |
#  What is your contact information?
#subquestion: |
#  ${ collapse_template(contact_info_help) }  
#fields:  
#  - Phone number: users[0].phone_number
#    datatype: al_international_phone
#    required: False
#  - label: |
#      I have an email address
#    field: users[0].has_email_address      
#    datatype: yesnoradio
#  - note: |
#      This email address will appear on your court forms. Be sure to check 
#      this email daily, otherwise you may miss important information about 
#      your case.
#    show if: x.has_email_address      
#  - Email address: users[0].email    
#    datatype: email
#    show if: 
#      variable: users[0].has_email_address
#      is: True
#---
#template: contact_info_help
#subject: |
#  **Why do I need to include this?**
#content: |  
#  The court must be able to reach you, so you need to include some contact information.
---
id: any others protected
question: |
  Do you want the Stalking No Contact Order to protect anyone else?
subquestion: |
  This is who you can protect with this order:
  
  * Children who were victims of the stalking, and
  * Adults who were victims of the stalking and who cannot file for themselves due to age, disability, or poor health.
fields:
  - no label: others_protected.there_are_any
    datatype: yesnoradio
---
sets:
    - others_protected[i].name.first
    - others_protected[i].name.last
    - others_protected[i].name.middle
    - others_protected[i].name.suffix
id: others protected name
question: |
  What is the name of the ${ordinal(i)} other person you want to protect?
fields:
  - code: |
      others_protected[i].name_fields()
---
id: others protected birthday
question: |
  When was ${others_protected[i].name.full(middle='full')} born? 
fields:
  - Their date of birth: others_protected[i].birthdate
    datatype: BirthDate
    alMax: today()
---
#id: others protected sexual assualt cook county
#question: |
#  Is ${others_protected[i].name.full(middle='full')} a survivor of rape, sexual assault, or sexual abuse?
#fields:
#  - no label: others_protected[i].is_survivor
#    datatype: yesnoradio
---
id: others protected stalked
question: |
  Has ${others_protected[i].name.full(middle='full')} been stalked by ${other_parties[0].name.full(middle='full')}?
fields:
  - no label: others_protected[i].is_survivor
    datatype: yesnoradio
---
id: cannot include other
continue button field: others_protected[i].cannot_include
question: |
  Sorry
subquestion: |
  ${others_protected[i].name.full(middle='full')} cannot be included in the SNCO unless they have been stalked.

  Click **Next** to continue making your forms without including ${others_protected[i].name.full(middle='full')}.
---
#id: others protected relation to user cook county
#question: |
#  What is ${others_protected[i].name.full(middle='full')}'s relationship to you?
#fields:
#  - They are my: others_protected[i].relation_to_user
#    input type: combobox
#    choices:
#    - Child
#    - Stepchild
#    - Grandchild
#    - Parent
#    - Grandparent
#    - Aunt or uncle
#    - Niece or nephew
#    - Sibling
#    - Cousin 
---
#review amount of space available and figure out max length
id: protection reason cook county
question: |
  Why are you including ${others_protected[i].name.full(middle='full')} in the Stalking No Contact Order?
subquestion: |
  Here are some example answers:
  
  * They were included in a threat of violence
  * They witnessed harassment.
fields:
  - no label: others_protected[i].protection_reason
    input type: area
    rows: 3
    maxlength: 200
---
id:  others protected safe address check
question: |
  Do you want to use the safe mailing address for ${others_protected[i].name.full(middle='full')}?
subquestion: |
  The safe mailing address you entered is:
  
  ${users[0].address.line_one(bare=True)}
  ${users[0].address.line_two()}
fields:
  - no label: others_protected[i].use_safe_address
    datatype: yesnoradio
---
#id: others protected address
#question: |
#  What is ${others_protected[i].name.full(middle='full')}'s address?
#subquestion: |
#  This address will appear on court papers.
#fields:
#  - Street address: others_protected[0].address.address
#    address autocomplete: True
#  - Address line 2: others_protected[0].address.unit
#    required: False
#  - City: others_protected[0].address.city
#  - State: others_protected[0].address.state
#    code: |
#      states_list()
#    default: IL      
#  - ZIP code: others_protected[0].address.zip
---
id: any others protected
question: |
  Do you want the Stalking No Contact Order to protect anyone else?
subquestion: |
  So far you have told us about ${comma_and_list(others_protected)}.

  This is who you can protect with this order:
  
  * Children who were victims of the stalking, and
  * Adults who were victims of the stalking and who cannot file for themselves due to age, disability, or poor health.
fields:
  - no label: others_protected.there_is_another
    datatype: yesnoradio
---
sets:
  - other_parties[0].name.first
id: other parties name stalker name
question: |
  What is the stalker's name?
subquestion: |
  This is the person you will file the Stalking No Contact Order against.

  You will need to enter their full name. If you do not know their full name, you may want to talk with a lawyer to discuss your options. Use **[Get Legal Help](https://www.illinoislegalaid.org/get-legal-help)** to find free or low-cost legal services in your area.
fields:
  - code: |
      other_parties[0].name_fields()
---
id: stalker gender cook
question: |
  What is ${other_parties[0].name.full(middle="full")}'s sex and gender identity?
subquestion: |
  This information is used to help law enforcement identify ${other_parties[0].name.full(middle="full")} and enforce the Stalking No Contact Order. If you do not know this information, you can leave it blank.
fields:
  - Sex (will be public, used by any law enforement): other_parties[0].cook_sex
    datatype: radio
    required: False
    choices:
      - Male: Male
      - Female: Female
      - Other: other
  - ${other_parties[0].name.full(middle="full")}'s sex (will be public, used by any law enforement): other_parties[0].cook_sex_other
    maxlength: 20
    required: False
    show if:
      variable: other_parties[0].cook_sex
      is: "other"
  - Sex assigned at birth (confidential, used by sheriff only): respondent_sex_at_birth
    datatype: radio
    required: False
    choices:
      - Male: male
      - Female: female
    help: |
      Sex assigned at birth refers to the sex or gender marker on ${other_parties[0].name.full(middle="full")}'s original birth certificate. If they were born intersex, you may want to mention that in gender/other.
  - Gender identity (confidential, used by sheriff only): other_parties[0].cook_gender
    datatype: checkboxes
    none of the above: False
    required: False
    choices:
      - Male: male
      - Female: female
      - Transgender woman / Transfeminine: transfem
      - Transgender man / Transmasculine: transmasc
      - Nonbinary / Gender non-conforming: nonbinary
      - Other: other
  - ${other_parties[0].name.full(middle="full")}'s gender identity (confidential, used by sheriff only): respondent_cook_gender_other
    maxlength: 20
    required: False
    show if:
      variable: other_parties[0].cook_gender['other']
      is: True
---
id: stalker gender statewide
question: |
  What gender is ${other_parties[0].name.full(middle='full')}?
subquestion: |
  This information is used to help enforce the Stalking No Contact Order.
  
  If you do not know, you can leave this blank.
fields:
  - Gender: other_parties[0].state_gender
    input type: radio
    choices:
      - Male
      - Female
      - Other
    required: False
  - Other: other_parties[0].state_other_gender
    maxlength: 20
    required: False
    show if: 
      variable: other_parties[0].state_gender
      is: "Other"  
---
id: stalker race stalker skin tone
question: |
  What race is ${other_parties[0].name.full(middle='full')}?
subquestion: |
  This information is used to help enforce the Stalking No Contact Order.
  
  If you do not know, you can leave this blank.
fields:
  - Race: other_parties[0].race
    input type: radio
    required: False
    choices:
      - Asian: Asian
      - Black: Black
      - Hispanic: Hispanic
      - Latino: Latino
      - Middle Eastern: Middle Eastern 
      - Native American: Native American
      - Native Hawaiian: Native Hawaiian
      - North African: North African
      - Pacific Islander: Pacific Islander
      - White: White
      - 2 or more races: Multiracial
      - Other: Other
  - Other: respondent_race_other
    maxlength: 20
    show if: 
      variable: other_parties[0].race
      is: "Other"  
  #- Skin tone: other_parties[0].skin
  #  input type: radio
  #  required: False
  #  show if:
  #    variable: trial_court.address.county
  #    is: "Cook"
  #  choices:
  #    - Very light: Very light
  #    - Light: Light
  #    - Light brown: Light brown
  #    - Olive: Olive
  #    - Brown: Brown
  #    - Dark brown: Dark brown
  #    - Other: Other
  #- Other: respondent_skin_other
  #  maxlength: 20
  #  show if: 
  #    variable: other_parties[0].skin
  #    is: "Other"  
---
id: stalker any other names
question: |
  Has ${other_parties[0].name.full(middle='full')} gone by any other names?
subquestion: |
  If you know of any old legal name, nickname, or alias that ${other_parties[0].name.full(middle='full')} has used, click **Yes**.
fields:
  - no label: other_parties[0].other_names.there_are_any
    datatype: yesnomaybe
---
id: stalker other names
question: |
  % if i == 0:
  What other name has ${other_parties[0].name.full(middle='full')} gone by?
  % else:
  What is the ${ordinal(i)} other name ${other_parties[0].name.full(middle='full')} has gone by?
  % endif
subquestion: |
  This can be an old legal name, nickname, or alias.
  
  You can list up to 4 names.
  
  % if i != 0:
  So far you have told us about ${comma_and_list(other_parties[0].other_names.complete_elements().full_names())}.
  % endif
fields:
  - First: other_parties[0].other_names[i].name.first
  - Middle: other_parties[0].other_names[i].name.middle
    required: False
  - Last: other_parties[0].other_names[i].name.last
    required: False
  - Suffix: other_parties[0].other_names[i].name.suffix
    required: False
    code: |
      name_suffix()
---
id: stalker other names there is another
question: |
  Has ${other_parties[0].name.full(middle='full')} gone by any other names?
subquestion: |
  This can be an old legal name, nickname, or alias.
  
  You can list up to 4 names. So far you have told us about ${comma_and_list(other_parties[0].other_names.complete_elements().full_names())}.
fields:
  - no label: other_parties[0].other_names.there_is_another
    datatype: yesnoradio
---
id: stalker ssn
question: |
  What are the last four digits of ${other_parties[0].name.full(middle='full')}'s Social Security Number?
subquestion: |
  This information is used to help identify ${other_parties[0].name.full(middle='full')}.

  If you do not know, you can leave this blank.
fields:
  - Last 4 digits of SSN: other_parties[0].ssn
    maxlength: 4
    required: False
---
id: know respondent birthdate
question: |
  Do you know ${other_parties[0].name.full(middle="full")}'s birthdate?
fields:   
  - no label: knows_respondent_dob
    datatype: radio
    choices:
      - Yes, I will enter the date.: exact
      - I know some of it.: some
        help: |
          For example, "June 3rd" or "Summer of 1990."
      - I don't know it.: idk
        help: |
          % if trial_court_index == -1:
          You can update the Cook County Sheriff's office when you have this information. Email them anytime at ccso.protectiveorders@ccsheriff.org or call them at 312-603-2134 or 312-603-3340 (Monday through Friday, 8AM to 5PM).
          % else:
          You may want to update the sheriff's office when you have this information.
          % endif
  - ${other_parties[0].name.full(middle="full")}'s date of birth: other_parties[0].birthdate
    datatype: birthdate
    max: ${ today().format("yyyy-MM-dd") }
    show if: 
      variable: knows_respondent_dob
      is: exact
  - What you know about ${other_parties[0].name.full(middle="full")}'s date of birth: other_parties[0].birthdate_info
    maxlength: 25
    show if:
      variable: knows_respondent_dob
      is: some
---
id: cook county physical characteristics
question: |
  Tell us about ${other_parties[0].name.full(middle="full")}'s appearance
subquestion: |
  This information is used to help enforce the Stalking No Contact Order.
  
  Enter what information you know.
fields:
  - Height (feet): other_parties[0].height_feet
    datatype: integer
    required: False
    maxlength: 1
    min: 2
    max: 8
    grid: 6
    help: |
      Example: 5
  - Height (inches): other_parties[0].height_inches
    datatype: integer
    required: False
    maxlength: 2
    min: 0
    max: 11
    grid: 6
    help: |
      Example: 8
  - Weight (pounds): other_parties[0].weight
    datatype: integer
    required: False
    min: 1
    max: 1500
    maxlength: 4
    help: |
      Example: 170
  - Skin color: other_parties[0].skin
    required: False
    datatype: radio
    choices: 
      - Very light: Very light
      - Light: Light
      - Light brown: Light brown
      - Olive: Olive
      - Brown: Brown
      - Dark brown: Dark brown
      - Other: other
  - ${other_parties[0].name.full(middle="full")}'s skin color: respondent_skin_other
    maxlength: 20
    show if:
      variable: other_parties[0].skin
      is: 'other'
  - Hair color: other_parties[0].hair
    maxlength: 20
    required: False
    help: |
      Examples: brown, black, blond, gray, bald or shaved
  - Eye color: other_parties[0].eyes
    maxlength: 20
    required: False
    help: |
      Examples: brown, blue, hazel, green
  - Does ${other_parties[0].name.full(middle="full")} wear glasses?: other_parties[0].glasses
    datatype: radio
    required: False
    choices: 
      - Yes: Yes
      - Sometimes: Sometimes
      - No: No
---
#id: stalker height stalker weight
#question: |
#  What is ${other_parties[0].name.full(middle='full')}'s height and weight?
#subquestion: |
#  If you do not know, you can leave this blank. 
#fields:
#  - Feet: other_parties[0].height_feet
#    datatype: integer
#    required: False
#    grid: 6
#    min: 1
#    max: 9
#    help: |
#      Example: 5
#  - Inches: other_parties[0].height_inches
#    datatype: integer
#    required: False
#    min: 0
#    max: 11
#    grid: 6
#    help: |
#      Example: 8
#  - Weight (in pounds): other_parties[0].weight
#    datatype: integer
#    required: False
#    min: 1
#    max: 1500
#    help: |
#      Example: 170
#---
#id: stalker eyes
#question: |
#  What color are ${other_parties[0].name.full(middle='full')}'s hair and eyes?
#subquestion: |
#  If you do not know, you can leave this blank. 
#fields:
#  - Hair color: other_parties[0].hair
#    maxlength: 30
#    required: False
#    help: |
#      Examples: brown, black, blond, gray, bald or shaved
#  - Eye color: other_parties[0].eyes
#    maxlength: 30
#    required: False
#    help: |
#      Examples: brown, blue, hazel, green
#  - Does ${other_parties[0].name.full(middle='full')} wear glasses?: other_parties[0].glasses
#    datatype: radio
#    required: False
#    choices:
#      - Yes: True
#      - No: False
#      - Sometimes: sometimes
#      - I do not know: dont_know
---
#check how much space is available
id: stalker notable features
question: |
  What are ${other_parties[0].name.full(middle='full')}'s notable features?
subquestion: |
  Scars, tattoos, or birthmarks are all notable features.
  
  If you do not know any, you can leave this blank.
fields:
  - Features: other_parties[0].features
    input type: area
    maxlength: 100
    required: False
---
id: stalker in jail
question: |
    Is ${other_parties[0].name.full(middle='full')} incarcerated?
subquestion: |
    **Incarcerated** means "in prison" or "in jail."
fields:
  - no label: respondent_jail_check
    datatype: yesnomaybe
---
id: stalker jail name
question: |
  Where is ${other_parties[0].name.full(middle='full')} incarcerated?
subquestion: |
    If you do not know, you may leave this blank.
fields:
  - Name of prison or jail: respondent_jail_name
    maxlength: 50
    required: False
---
id: stalker probation
question: |
  Is ${other_parties[0].name.full(middle="full")} on court-ordered probation?
fields:
  - no label: respondent_on_probation
    datatype: radio
    choices:
      - Yes: Yes
      - No: No
      - I don't know.: idk
  - Probation in which county?: respondent_probation_county
    required: False
    maxlength: 40
    help: |
      Enter the state if outside Illinois.
    show if: 
      variable: respondent_on_probation
      is: "Yes"
---
id: stalker drivers license
question: |
  What is ${other_parties[0].name.full(middle='full')}'s driver's license number?
subquestion: |
  If you do not know or they do not have a driver's license, you can leave this blank.
fields:
  - Driver's license number: other_parties[0].drivers_license
    required: False
    maxlength: 20
---
id: stalker access to vehicle
question: |
  Does ${other_parties[0].name.full(middle='full')} have access to a vehicle?
fields:
  - no label: other_parties[0].has_vehicle
    datatype: yesnomaybe
---
id: stalker vehicle details
question: |
  Enter as much information as you can about ${other_parties[0].name.full(middle='full')}'s vehicle.
subquestion: |
  If ${other_parties[0].name.full(middle='full')} has more than one car, describe the car they use most often.

  If you do not know the answer to something, you can leave it blank.
fields:
  - Year: other_parties[0].vehicle_year
    required: False
    maxlength: 4
  - Make: other_parties[0].vehicle_make
    required: False
    maxlength: 30
    help: |
      This is the brand that made the vehicle. For example, Ford, Chevy, and Toyota are all makes.
  - Model: other_parties[0].vehicle_model
    required: False
    maxlength: 30
    help: |
      This is the vehicle's type. For example, Explorer, Suburban, and Camry are all models.
  - Color: other_parties[0].vehicle_color
    maxlength: 30
    required: False
  - License plate number: other_parties[0].license_plate
    maxlength: 10
    required: False
  - State: other_parties[0].vehicle_state
    required: False
    code: |
      states_list()
---
id: stalker another number check
question: |
  Do you know another number that can identify ${other_parties[0].name.full(middle='full')}?
subquestion: |
  This could be a passport number, a military ID number, or something similar.
fields:
  - no label: other_parties[0].another_number_check
    datatype: yesnoradio
  - Number: other_parties[0].another_number
    show if: other_parties[0].another_number_check
    maxlength: 30
  - Describe the ID number: other_parties[0].another_number_description
    show if: other_parties[0].another_number_check
    maxlength: 50
    help: |
      For example, this could be "military ID number" or "passport number."
---
#id: stalker another number
#question: |
#  What is ${other_parties[0].name.full(middle='full')} other identifying number?
#fields:
#  - Number: other_parties[0].another_number
#  - Describe the ID number: other_parties[0].another_number_description
#    help: |
#      For example, this could be "military ID number" or "passport number."
---
id: respondent social media
question: |
  Is ${other_parties[0].name.full(middle="full")} active on social media?
subquestion: |
  If you know about ${other_parties[0].name.full(middle="full")}'s accounts, this could help the sheriff find them.
  
  This information **will not** appear on public court documents.
fields:
  - Active on social media?: respondent_on_social_media
    datatype: radio
    choices:
      - Yes: Yes
      - No: No
      - I don't know.: I don't know.
  - List their accounts: respondent_social_media_accounts
    input type: area
    rows: 5
    maxlength: 180
    help: |
      Enter as much information as you can including app, website, and username if you know it.
    show if:
      variable: respondent_on_social_media
      is: 'Yes'
---
id: stalker phone number stalker email address
question: |
  What is ${other_parties[0].name.full(middle='full')}'s contact information?
subquestion: |
  If you do not know, you can leave this blank.
fields:
  - Phone number: other_parties[0].phone_number
    datatype: al_international_phone
    required: False
  - Cell phone: other_parties[0].mobile_number
    datatype: al_international_phone
    required: False
    show if:
      code: |
        trial_court_index == -1
  - Email address: other_parties[0].email_address
    datatype: email
    required: False
---
id: stalker any additional contact info
question: |
  Does ${other_parties[0].name.full(middle='full')} have another phone number or email address?
fields:
  - no label: other_parties[0].bonus_contact_info
    datatype: yesnoradio
---
id: stalker alt email phone
question: |
  What is ${other_parties[0].name.full(middle='full')}'s additional contact information?
fields:
  - Phone number: other_parties[0].alt_phone
    datatype: al_international_phone
    required: False
  - Email address: other_parties[0].alt_email
    datatype: email
    required: False
---
id: stalker address known
question: |
  Do you know ${other_parties[0].name.full(middle='full')}'s current home address?
fields:
  - no label: other_parties[0].address_known
    datatype: yesnoradio
---
id: stalker last known address
question: |
  Do you know ${other_parties[0].name.full(middle="full")}'s last known address?
fields:
  - no label: other_parties[0].last_address_known
    datatype: yesnoradio
---
id: unknown address note
continue button field: unknown_address_note
question: |
  Note about the unknown address
subquestion: |
  If you do not know ${other_parties[0].name.full(middle='full')}'s address, you may still file. However, you may need to show the court that you tried to find their address. 
  
  You can do this by filing a written statement called an “affidavit” telling how you tried to find ${other_parties[0].name.full(middle='full')}'s address. If you need to file one of these, the judge or court clerk should provide it.
---
id: stalker current address
question: |
  % if other_parties[0].address_known:
  What is ${other_parties[0].name.full(middle='full')}'s current home address?
  % else:
  What is ${other_parties[0].name.full(middle='full')}'s last known address?
  % endif
fields:
  - Street address: other_parties[0].address.address
    address autocomplete: True
  - Address line 2: other_parties[0].address.unit
    required: False
  - City: other_parties[0].address.city
  - State: other_parties[0].address.state
    code: |
      states_list()
    default: IL      
  - ZIP code: other_parties[0].address.zip
---
id: stalker currently employed
question: |
  Do you know if ${other_parties[0].name.full(middle='full')} is employed?
fields:
  - no label: other_parties[0].has_job
    datatype: yesnoradio
---
#what if they have more than one employer?
id: stalker employer
question: |
  Enter as much information as you can about ${other_parties[0].name.full(middle='full')}'s employer.
subquestion: |
  If you do not know who ${other_parties[0].name.full(middle='full')}'s employer is, you can leave this blank.
fields:
  - Employer name: other_parties[0].employer_name
    required: False
    maxlength: 30
  - Occupation or type of work: respondent_work_type
    required: false
    help: |
      Describe their position, job title, or role where they work. Examples: Manager, cook, cashier
    maxlength: 30
  - Work days and hours: other_parties[0].work_hours
    required: False
    maxlength: 30
    help: |
      If you don't know the exact days and hours, you can say something like "weekdays" or "nights."
  - Street address: other_parties[0].employer_address.address
    address autocomplete: True
    required: False
  - Address line 2: other_parties[0].employer_address.unit
    required: False
  - City: other_parties[0].employer_address.city
    required: False
  - State: other_parties[0].employer_address.state
    required: False
    code: |
      states_list()  
  - ZIP code: other_parties[0].employer_address.zip
    required: False
---
id: respondent caution
question: |
  Are there reasons to use caution when approaching ${other_parties[0].name.full(middle="full")}?
subquestion: |
  Check all that apply.
fields:
  - ${other_parties[0].name.full(middle="full")}: caution_reasons
    datatype: checkboxes
    none of the above: True
    required: False
    choices:
      - Has a history of mental illness.: illness
        show if: trial_court_index == -1
      - Is now or has been suicidal.: suicide
      - Is likely to be under the influence of alcohol.: alcohol
        show if: trial_court_index == -1
      - Is likely to be under the influence of drugs.: drugs
        show if: trial_court_index == -1
      - Is likely to carry a weapon.: armed
        show if: trial_court_index == -1
      - Is likely armed or dangerous.: armed
        show if: trial_court_index != -1
      - Has weapons in the home.: home
        show if: trial_court_index == -1
  - Type and location of weapons: other_parties[0].weapons_info
    required: False
    input type: area
    rows: 5
    maxlength: 180
    js show if: |
      val("caution_reasons['armed']") == true || val("caution_reasons['home']") == true
---
#id: stalker suicide risk
#question: |
#  Do you think ${other_parties[0].name.full(middle='full')} is a suicide risk?
#fields:
#  - no label: other_parties[0].suicide_risk
#    datatype: yesnomaybe
#---
#id: stalker armed
#question: |
#  Do you think ${other_parties[0].name.full(middle='full')} is armed or dangerous to you or others?
#fields:
#  - no label: other_parties[0].armed
#    datatype: yesnomaybe
#---
#id: stalker mental illness
#question: |
#  Does ${other_parties[0].name.full(middle='full')} have a history of mental illness?
#fields:
#  - no label: other_parties[0].mental_illness
#    datatype: yesnomaybe
#---
#id: stalker alcohol
#question: |
#  Is ${other_parties[0].name.full(middle='full')} likely to be drunk or under the influence of alcohol?
#fields:
#  - no label: other_parties[0].alcohol
#    datatype: yesnomaybe
#---
#id: stalker drugs
#question: |
#  Is ${other_parties[0].name.full(middle='full')} likely to be high or under the influence of drugs?
#fields:
#  - no label: other_parties[0].drugs
#    datatype: yesnomaybe
#---
#id: stalker carrying weapon
#question: |
#  Is ${other_parties[0].name.full(middle='full')} likely to be carrying a weapon?
#fields:
#  - no label: other_parties[0].carrying_weapon
#    datatype: yesnomaybe
#---
#id: stalker home weapon
#question: |
#  Does ${other_parties[0].name.full(middle='full')} have weapons at home?
#fields:
#  - no label: other_parties[0].home_weapon
#    datatype: yesnomaybe
#---
#id: stalker weapon info
#question: |
#  What kind of weapons does ${other_parties[0].name.full(middle='full')} have and where do they keep them?
#subquestion: |
#  If you do not know, you can leave this blank
#fields:
#  - Weapons: other_parties[0].weapons_info
#    input type: area
#    required: False
---
#The divorce and parentage action questions are for the general DV cover sheet, not SNCO. These can be removed.
id: stalker user divorce
question: |
  Have you and ${other_parties[0].name.full(middle='full')} previously filed a divorce in Cook County?
fields:
  - no label: other_parties[0].divorced_user
    datatype: yesnoradio
---
id: divorce case info
question: |
  Enter information about the divorce case.
fields:
  - Date filed: other_parties[0].divorce_date
    datatype: date
    max: ${today()}
  - Case number: other_parties[0].divorce_number
    maxlength: 20
  - Name of judge: other_parties[0].divorce_judge
    maxlength: 20
    help: |
      Do not include the word "judge."
---
id:   action
question: |
  Have you and ${other_parties[0].name.full(middle='full')} previously filed a parentage action in Cook County?
fields:
  - no label: other_parties[0].parentage_action
    datatype: yesnoradio
---
id: parentage action info
question: |
  Enter information about the parentage action.
fields:
  - Date filed: other_parties[0].parentage_date
    datatype: date
    max: ${today()}
  - Case number: other_parties[0].parentage_number
    maxlength: 20
  - Name of judge: other_parties[0].parentage_judge
    maxlength: 20
    help: |
      Do not include the word "judge."
---
id: stalker any order of protection
question: |
  Other Orders of Protection
subquestion: |
  Is there now, or has there ever been, an Order of Protection in any state against ${other_parties[0].name.full(middle="full")} involving you or other people you want to protect in this Order?
fields:
  - no label: other_parties[0].order_of_protection
    datatype: yesnomaybe
---
#id: stalker about order of protection
#question: |
#  Where was the Order of Protection issued against ${other_parties[0].name.full(middle='full')}?
#subquestion: |
#  If you do not know, you can leave this blank.
#fields:
#  - State: other_parties[0].op_state
#    code: |
#      states_list()
#  - County: other_parties[0].op_in_state_county
#    datatype: integer
#    required: False
#    show if: 
#      variable: other_parties[0].op_state 
#      is: "IL"
#    code: |
#      court_county_lookup()
#  - County: other_parties[0].op_out_state_county
#    hide if: 
#      variable: other_parties[0].op_state 
#      is: "IL"
#    required: False
---
id: other ops detail
question: |
  Tell us about the ${ ordinal(i) } Order of Protection
fields:
  - Names of people involved (separate by commas): other_ops[i].name.text
  - State: other_ops[i].state
    code: |
      states_list()
  - County: other_ops[i].county
  - Year: other_ops[i].year
    input type: combobox
    datatype: integer
    maxlength: 4
    min: ${ today().year-120 }
    max: ${ today().year }
    code: |
      reversed(range(today().year-120, today().year+1))
---
id: more ops
question: |
  Are there any more Orders of Protection you would like to list?
subquestion: |
  You can enter up to 9 orders of protection in total.
  % if len(other_ops.elements) == 1:  
  So far you told us about 1 other order of protection. 
  % else:
  So far you told us about ${ str(len(other_ops.elements)) } other orders of protection. 
  % endif
field: other_ops.there_is_another
choices:
  - Yes: True
  - No: False

---
code: |
  other_ops[i].name.text
  other_ops[i].state
  other_ops[i].county
  other_ops[i].year
  other_ops[i].complete = True
---
code: |
  if other_ops.number_gathered() >= 9:
    other_ops.there_is_another = False
---
id: service method
question: |
  Who do you want to deliver court papers to ${other_parties[0].name.full(middle="full")}?
subquestion: |
  This is called service. In Illinois, **Sheriffs usually serve SNCOs.**
  
  Note: There may be a charge for a special process server or a licensed private detective. Read ILAO's article about [**serving a summons**](https://www.illinoislegalaid.org/legal-information/serving-summons) to learn more about your service options.
fields:
  - no label: service_method
    datatype: radio
    choices:
      - Sheriff (most common): sheriff
      - Special process server: sps
      - Licensed private detective: detective
      - I don't know. I will decide and complete the Summons later.: idk
---
id: out of state county
question: |
  In which county can the sheriff find ${other_parties[0].name.full(middle="full")}?
subquestion: |
  % if other_parties[0].which_address != "add_service_address" or other_parties[0].service_address.address != "":
  You said the sheriff can serve court papers on ${other_parties[0].name.full(middle="full")} at:
  
  % if other_parties[0].which_address == "add_service_address":
  * ${ other_parties[0].service_address.on_one_line(bare=True) }
  % elif other_parties[0].which_address == "home_address":
  * ${other_parties[0].address.on_one_line(bare=True)}
  % elif other_parties[0].which_address == "employer_address":
  * ${other_parties[0].employer_address.on_one_line(bare=True)}
  % endif
  % endif
  
  Enter the county below so the sheriff can find ${other_parties[0].name.full(middle="full")}.
  
  ${ collapse_template(county_lookup_help) }
fields:
  - County where ${other_parties[0].name.full(middle="full")} can be served: service_county
    maxlength: 40
    required: False
---
template: county_lookup_help
subject: |
  **How do I look up the county?**
content: |  
  You can use this **[City-to-County Finder](https://www.statsamerica.org/CityCountyFinder/)** to find the county.
---
#This code block generates options for the dropdown menu in the question asking which address the sheriff should serve the stalker at.
#reconsider: True
#code: |
#  if other_parties[0].address_known:
#    list_home_address = True
#    home_address_text = other_parties[0].address.on_one_line(bare=True)
#  else:
#    list_home_address = False
#    home_address_text = ""
#  if other_parties[0].has_job and other_parties[0].employer_address.address != "":
#    list_employer_address = True
#    employer_address_text = other_parties[0].employer_address.on_one_line(bare=True)
#  else:
#    list_employer_address = False
#    employer_address_text = ""
---
reconsider: True
code: |
  service_list = []
  if other_parties[0].address_known:
    service_list.append( { "home_address": other_parties[0].name.full(middle="full") + "'s home address (" + other_parties[0].address.on_one_line(bare=True) + ")" })
  else:
    if other_parties[0].last_address_known == True:
      service_list.append( { "home_address": other_parties[0].name.full(middle="full") + "'s last known address (" + other_parties[0].address.on_one_line(bare=True) + ")" })
  if other_parties[0].has_job and other_parties[0].employer_address.address != "":
    service_list.append({ "employer_address": other_parties[0].name.full(middle="full")+ "'s work address (" + other_parties[0].employer_address.on_one_line(bare=True) + ")" })
  service_list.append({ "add_service_address": "An address I will enter" })
---
id: stalker which address
question: |
  Where should court papers be delivered to ${other_parties[0].name.full(middle='full')}?
subquestion: |
  The court will need an address where they can deliver the court forms to ${other_parties[0].name.full(middle='full')}. If necessary, you could try an Internet search to find one. You can ask for an SNCO without knowing their address, but that may make it harder to get the SNCO.
fields: 
  - no label: other_parties[0].which_address
    input type: radio
    code: service_list
    #choices:
    #  - ${home_address_text}: home_address
    #    show if: list_home_address
    #  - ${employer_address_text}: employer_address
    #    show if: list_employer_address
    #  - An address I will enter: add_service_address
  - Street address: other_parties[0].service_address.address
    address autocomplete: True
    required: False
    show if:
      variable: other_parties[0].which_address
      is: "add_service_address" 
  - Address line 2: other_parties[0].service_address.unit
    required: False
    show if:
      variable: other_parties[0].which_address
      is: "add_service_address" 
  - City: other_parties[0].service_address.city
    required: False
    show if:
      variable: other_parties[0].which_address
      is: "add_service_address" 
  - State: other_parties[0].service_address.state
    required: False
    show if:
      variable: other_parties[0].which_address
      is: "add_service_address" 
    code: |
      states_list()  
  - ZIP code: other_parties[0].service_address.zip
    required: False
    show if:
      variable: other_parties[0].which_address
      is: "add_service_address" 
  #- Phone number: other_parties[0].service_phone
  #  required: False
  #- Email address: other_parties[0].service_email
  #  required: False
validation code: |
  if other_parties[0].which_address == "add_service_address":
    service_state = other_parties[0].service_address.state
  elif other_parties[0].which_address == "home_address":
    service_state = other_parties[0].address.state
  elif other_parties[0].which_address == "employer_address":
    service_state = other_parties[0].employer_address.state
---
id: list bonus service check
question: |
  Do you want to list another place where court papers could be delivered to ${other_parties[0].name.full(middle='full')}?
fields:
  - no label: other_parties[0].bonus_service_check
    datatype: yesnoradio
---
reconsider: True
code: |
  alt_service_list = []
  if other_parties[0].which_address != "home_address":
    if other_parties[0].address_known:
      alt_service_list.append( { "home_address": other_parties[0].name.full(middle="full") + "'s home address (" + other_parties[0].address.on_one_line(bare=True) + ")" })
    else:
      if other_parties[0].last_address_known == True:
        alt_service_list.append( { "home_address": other_parties[0].name.full(middle="full") + "'s last known address (" + other_parties[0].address.on_one_line(bare=True) + ")" })
  if other_parties[0].has_job and other_parties[0].employer_address.address != "" and other_parties[0].which_address != "employer_address":
    alt_service_list.append({ "employer_address": other_parties[0].name.full(middle="full")+ "'s work address (" + other_parties[0].employer_address.on_one_line(bare=True) + ")" })
  alt_service_list.append({ "service_address": "An address I will enter" })
---
id: bonus service address
question: |
  Where else can the sheriff go to deliver court papers to ${other_parties[0].name.full(middle='full')}?
fields: 
  - no label: other_parties[0].which_bonus_address
    input type: radio
    code: alt_service_list
    #choices:
    #- ${home_address_text}: home_address
    #  show if: list_home_address and other_parties[0].which_address != "home_address"
    #- ${employer_address_text}: employer_address
    #  show if: list_employer_address and other_parties[0].which_address != "employer_address"
    #- An address I will enter: service_address
  - Street address: other_parties[0].bonus_service_address.address
    address autocomplete: True
    show if:
      variable: other_parties[0].which_bonus_address
      is: "service_address" 
  - Address line 2: other_parties[0].bonus_service_address.unit
    required: False
    show if:
      variable: other_parties[0].which_bonus_address
      is: "service_address" 
  - City: other_parties[0].bonus_service_address.city
    show if:
      variable: other_parties[0].which_bonus_address
      is: "service_address" 
  - State: other_parties[0].bonus_service_address.state
    show if:
      variable: other_parties[0].which_bonus_address
      is: "service_address" 
    code: |
      states_list()  
  - ZIP code: other_parties[0].bonus_service_address.zip
    show if:
      variable: other_parties[0].which_bonus_address
      is: "service_address" 
  #- Phone number: other_parties[0].bonus_service_phone
  #  required: False
  #- Email address: other_parties[0].bonus_service_email
  #  required: False
#validation code: |
#  if other_parties[0].which_bonus_address == "home_address":
#    other_parties[0].bonus_service_address = other_parties[0].address
#  elif other_parties[0].which_bonus_address == "employer_address":
#    other_parties[0].bonus_service_address = other_parties[0].employer_address
---
id: stalking event intro
continue button field: stalking_event_intro
question: |
  Reasons for the Stalking No Contact Order
subquestion: |
  The following questions will ask about what ${other_parties[0].name.full(middle='full')} did to make you afraid or distressed.
  
  You should be specific. Tell when and where each event happened, and how it affected you.
  
  You should enter the most recent event first.
  
  The judge will expect more details about recent events than past events. Enter exact dates if you can. For repeated events, you may tell how often the behavior took place.
---
id: stalking event info
question: |
  % if i == 0:
  Tell us about the most recent incident of stalking
  % else:
  Tell us about the ${ordinal(i)} most recent incident of stalking
  % endif
subquestion: |
  Try to be specific about:

  * What ${other_parties[0].name.full(middle='full')} did,
  * What ${other_parties[0].name.full(middle='full')} said,
  * Where the stalking happened,
  * How the stalking happened, such as in person, by phone or text, etc.,
  * Who was there when the stalking happened, and
  * The effects the stalking had on you and anyone else who was there. It is important to mention any children that were present or were affected by the stalking.
  
  Include any threats or use of a weapon.

  If the stalking was repeated, you can note that in your description.
fields:
  - Date: stalking_events[i].name.text
    maxlength: 20
    help: |
      If you don't remember the exact date, enter the month and year. Use abbreviations if needed.
  - Time: stalking_events[i].time
    required: False
    maxlength: 15
    help: |
      If you don't remember the exact time, you can enter an estimate or leave this blank.
  - Location: stalking_events[i].place
    maxlength: 50
    help: |
      If you don't remember the exact address, you can describe the location. For example, you could enter "the parking lot at my workplace."
  - What happened: stalking_events[i].description
    input type: area
    rows: 14
    maxlength: |
      % if trial_court_index == -1:
      500
      % else:
      800
      % endif
    help: |
      % if trial_court_index == -1:
      The petition has space for about 500 characters including spaces for each incident.
      % else:
      The petition has space for about 800 characters including spaces for each incident.
      % endif
---
#id: stalking event date time
#question: |
#  When did the ${ordinal(i)} stalking event take place?
#subquestion: |
#  If you not remember the exact date, enter the month and year.
#fields:
#  - Date: stalking_events[i].name.text
#  - Time: stalking_events[i].time
#    datatype: time
#    required: False
#    help: |
#      If you do not remember this and do not have a good estimate, you can leave this blank.
#---
#id: stalking event place
#question: |
#  Where did the ${ordinal(i)} stalking event take place?
#fields:
#  - Place: stalking_events[i].place
#---
#id: stalking event description
#question: |
#  Describe the ${ordinal(i)} stalking event.
#subquestion: |
#  Be as specific as possible
#fields:
#  - Description: stalking_events[i].description
#    input type: area
---
id: stalking event police report
question: |
  Was a police report filed for the ${ordinal(i)} stalking event?
subquestion: |
  A police report isn't required, but it is something that the Judge will want to know.
fields:
  - no label: stalking_events[i].police_check
    datatype: yesnoradio
  - Police report number: stalking_events[i].police_number
    required: False
    show if: stalking_events[i].police_check
    maxlength: 30
    help: |
      If you do not know, you can leave this blank.
---
id: stalking event is there another
question: |
  Do you want to add another stalking event?
subquestion: |
  % if len(stalking_events.elements) == 1:  
  So far you told us about 1 incident. 
  % else:
  So far you told us about ${ str(len(stalking_events.elements)) } incidents. 
  % endif
fields:
  - no label: stalking_events.there_is_another
    datatype: yesnoradio
---
#Is it a concern that the ILAO article talks about 3 types of protective order when only 2 are available here?
id: order type
question: |
  What kind of Stalking No Contact Order do you want?
subquestion: |
  There are two kinds of Stalking No Contact Order: Emergency and Plenary. You can ask the court for both if you want.
  
  An Emergency Order is an order which takes effect immediately. The order can be issued even before your stalker knows that you have filed a petition. However, the order only lasts 21 days, or until a formal court hearing where the stalker can present a case to the court also. 
  
  A Plenary Order, is an order issued after a hearing at which the stalker can also present a case. This order can last a long time, usually two years.
fields:
  - no label: order_type
    datatype: checkboxes
    none of the above: False
    choices:
      - Emergency Stalking No Contact Order: emergency
      - Plenary Stalking No Contact Order: plenary
---
#Can we dig up any examples or more information about what this should look like?
#Check space limits on template
id: emergency reason
question: |
  Why should the court grant an Emergency Order right away?
subquestion: |
  Use complete sentences and proper punctuation. Your response will appear in your forms exactly as you type it. 
fields:
  - no label: emergency_reason
    maxlength: 200
    input type: area
---
id: protection requested
question: |
  What do you want the court to make ${other_parties[0].name.full(middle='full')} stop doing?
subquestion: |
  ${collapse_template(stay_away_contact)}
fields:
  - I want the court to order ${other_parties[0].name.full(middle='full')} to...: protection_requested
    datatype: checkboxes
    none of the above: True
    choices:
      - "Stop stalking and threatening the victim, victim's family and household members, and stop enlisting other people to stalk or threaten.": stalking
      - "Stop contacting the victim, victim's family, and household members whether in person, by phone, by e-mail, by note or by sending messages through other people.": contacting
      - "Stay away from the locations of the victim, victim's family, and household members' home, work, school, or daycare.": away
---
template: stay_away_contact
subject: |
  **What do "stay away" and "contact" mean here?**
content: |
  **Stay Away**: to refrain from both physical presence and nonphysical contact with the Petitioner directly, indirectly, or through third parties who may or may not know of the order. "Nonphysical contact" includes, but is not limited to, telephone calls, mail, e-mail, fax, and written notes.

  **Contact**: includes any contact with the victim, that is initiated or continued without the victim’s consent, or that is in disregard of the victim’s expressed desire that the contact be avoided or discontinued, including but not limited to being in the physical presence of the victim; appearing within the sight of the victim; approaching or confronting the victim in a public place or on private property; appearing at the workplace or residence of the victim; entering onto or remaining on property owned, leased, or occupied by the victim; or placing an object on, or delivering an object to, property owned, leased, or occupied by the victim.
---
id: distance away
question: |
  How far should ${other_parties[0].name.full(middle='full')} stay away?
subquestion: |
  You should enter a distance in feet.

  For reference, a football field is 300 feet long. A car is about 15 feet long.

  The court might not grant a stay away distance of more than 300 feet.
fields:
  - Distance (in feet): distance_away
    datatype: integer
    min: 1
---
id: protected place types
question: |
  What kinds of places do you want ${other_parties[0].name.full(middle='full')} to stay away from?
subquestion: |
  **Caution:** You must tell ${other_parties[0].name.full(middle='full')} the address of any place you want them to stay away from. If you do not want ${other_parties[0].name.full(middle='full')} to know an address, you should not pick that location.
fields:
  - no label: protected_place_types
    datatype: checkboxes
    none of the above: False
    choices:
      - Home
      - Workplace
      - School
      - Daycare: day_care
      - Other
---
#depends on:
#  - protected_place_types
#code: |
#  if protected_place_types['Workplace'] or protected_place_types['School'] or protected_place_types['day_care']:
#    employers_schools.there_are_any = True
#  else:
#    employers_schools.there_are_any = False
---
id: safe home address
question: |
  What is your home address?
subquestion: |
  You answered earlier that you want to hide your real address.
  
  If you do not want ${other_parties[0].name.full(middle='full')} to know your home address, do not list it here. You may want to click **Back** and not include your home as a protected place.
  
  The address entered here will be printed on a form telling ${other_parties[0].name.full(middle='full')} where they cannot go.
fields:
  - Street address: home_address.address
    address autocomplete: True
  - Address line 2: home_address.unit
    required: False
  - City: home_address.city
  - State: home_address.state
    code: |
      states_list()
    default: IL      
  - ZIP code: home_address.zip
---
id: other places
question: |
  What other places do you want the court to order ${other_parties[0].name.full(middle='full')} to stay away from?
subquestion: |
  For example, you could name a store you go to regularly.
  
  Include any addresses if you know them. If you do not want ${other_parties[0].name.full(middle='full')} to know the addresses, do not list them here.
  
  The address entered here will be printed on a form telling ${other_parties[0].name.full(middle='full')} where they cannot go.
  
  % if trial_court_index == -1:
  If you list multiple places, they should be separated by commas. 
  % else:
  If you list multiple places, they should be separated by hitting the Enter key.
  % endif
fields:
  - Name or type of place, and address (if known): other_places
    maxlength: |
      % if trial_court_index == -1:
      150
      % else:
      300
      % endif
    rows: 10
    input type: area
---
#id: employers schools name
#question: |
#  What is the name and type of the ${ordinal(i)} workplace, school, or daycare you want ${other_parties[0].name.full(middle='full')} to stay away from?
#fields:
#  - Type: employers_schools[i].type
#    input type: radio
#    choices:
#      - Work or job site: work
#        show if: protected_place_types['Workplace']
#      - School: school
#        show if: protected_place_types['School']
#      - Daycare: day_care
#        show if: protected_place_types['day_care']
#  - Name: employers_schools[i].name.first
---
id: workplace name workplace address
question: |
  What is the name and address of the workplace you want ${other_parties[0].name.full(middle='full')} to stay away from?
subquestion: |
  If you do not want ${other_parties[0].name.full(middle='full')} to know this work address, do not list it here. You may want to click **Back** and not include a workplace as a protected place.
  
  The address entered here will be printed on a form telling ${other_parties[0].name.full(middle='full')} where they cannot go.
fields:
  - Workplace name: protected_workplace.name.first
    maxlength: 25
  - Street address: protected_workplace.address.address
    address autocomplete: True
  - Address line 2: protected_workplace.address.unit
    required: False
  - City: protected_workplace.address.city
  - State: protected_workplace.address.state
    code: |
      states_list()
    default: IL      
  - ZIP code: protected_workplace.address.zip
---
id: school name school address
question: |
  What is the name and address of the school you want ${other_parties[0].name.full(middle='full')} to stay away from?
subquestion: |
  If you do not want ${other_parties[0].name.full(middle='full')} to know this school address, do not list it here. You may want to click **Back** and not include a school as a protected place.
  
  The address entered here will be printed on a form telling ${other_parties[0].name.full(middle='full')} where they cannot go.
fields:
  - School name: protected_school.name.first
    maxlength: 30
  - Street address: protected_school.address.address
    address autocomplete: True
  - Address line 2: protected_school.address.unit
    required: False
  - City: protected_school.address.city
  - State: protected_school.address.state
    code: |
      states_list()
    default: IL      
  - ZIP code: protected_school.address.zip
---
id: day care name day care address
question: |
  What is the name and address of the daycare you want ${other_parties[0].name.full(middle='full')} to stay away from?
subquestion: |
  If you do not want ${other_parties[0].name.full(middle='full')} to know this daycare address, do not list it here. You may want to click **Back** and not include a daycare as a protected place.
  
  The address entered here will be printed on a form telling ${other_parties[0].name.full(middle='full')} where they cannot go.
fields:
  - Daycare name: protected_day_care.name.first
    maxlength: 30
  - Street address: protected_day_care.address.address
    address autocomplete: True
  - Address line 2: protected_day_care.address.unit
    required: False
  - City: protected_day_care.address.city
  - State: protected_day_care.address.state
    code: |
      states_list()
    default: IL      
  - ZIP code: protected_day_care.address.zip
---
#id: employers schools address
#question: |
#  What is ${employers_schools[i].name.first}'s address?
#fields:
#  - Street address: employers_schools[i].address.address
#    address autocomplete: True
#  - Address line 2: employers_schools[i].address.unit
#    required: False
#  - City: employers_schools[i].address.city
#  - State: employers_schools[i].address.state
#    code: |
#      states_list()
#    default: IL      
#  - ZIP code: employers_schools[i].address.zip
#---
#id: employers schools there is another
#question: |
#  Do you want to add another place that ${other_parties[0].name.full(middle='full')} should stay away from?
#subquestion: |
#  You can list workplaces, schools, or daycares. If you only want to add a different type of place, click **No**.
#
#  So far you have told us about ${comma_and_list(employers_schools.complete_elements().full_names())}.
#fields:
#  - no label: employers_schools.there_is_another
#    datatype: yesnoradio
---
id: live with stalker
question: |
  Does ${other_parties[0].name.full(middle='full')} live at the same address as you?
subquestion: |
  If you click **Yes**, your forms will ask to give you exclusive access to your home. This means the court **might** order ${other_parties[0].name.full(middle='full')} to stay away, even temporarily.
fields:
  - no label: live_with_stalker
    datatype: yesnoradio
---
id: school with stalker
question: |
  Do you and ${other_parties[0].name.full(middle='full')} go to the same school?
fields:
  - no label: school_with_stalker
    datatype: yesnoradio
---
id: which stalker school
question: |
  Which school do you and ${other_parties[0].name.full(middle='full')} go to?
field: which_stalker_school
datatype: checkboxes
choices:
  - code: |
      school_list
---
#reconsider: True
#code: |
#  school_list.clear()
#  work_list.clear()
#  for place in employers_schools:
#    if place.type == "school":
#      school_list.append(place)
#    elif place.type == "work":
#      work_list.append(place)
#  school_list.there_is_another = False
#  work_list.there_is_another = False
#  make_lists = True
---
id: work with stalker
question: |
  Do you and ${other_parties[0].name.full(middle='full')} have the same workplace?
fields:
  - no label: work_with_stalker
    datatype: yesnoradio
---
id: which stalker work
question: |
  Which work place do you and ${other_parties[0].name.full(middle='full')} work at?
field: which_stalker_work
datatype: checkboxes
choices:
  - code: |
      work_list
---
id: stalker prohibit firearms
question: |
  Do you want the court to stop ${other_parties[0].name.full(middle='full')} from having firearms or a Firearms Owner Identification Card?
fields:
  - no label: other_parties[0].prohibit_firearms
    datatype: yesnoradio
---
id: stalker pay costs describe costs
question: |
  Do you want the court to make ${other_parties[0].name.full(middle='full')} pay any costs that were a result of their stalking?
subquestion: |
  This could include things like court costs, missing work, property damage, or having to pay to stay somewhere else to avoid stalking.
  
  You will need to prove that the costs were a direct result of stalking.
fields: 
  - no label: other_parties[0].pay_costs
    datatype: yesnoradio
  #- What costs do you want ${other_parties[0].name.full(middle='full')} to pay?: other_parties[0].describe_costs
  #  input type: area
  #  maxlength: 200
  #  show if: other_parties[0].pay_costs
---
id: stalker anything else
question: |
  Do you want the court to make ${other_parties[0].name.full(middle='full')} to do or stop doing anything else?
fields: 
  - no label: other_parties[0].anything_else
    datatype: yesnoradio
  - What do you want ${other_parties[0].name.full(middle='full')} to do or stop doing?: other_parties[0].what_else
    input type: area
    #maxlength: 500
    #maxlength: 140
    maxlength: |
      % if trial_court_index == -1:
      140
      % else:
      280
      % endif
    rows: 7
    show if: other_parties[0].anything_else
---
id: no protection chosen
event: other_parties[0].no_protection_chosen
question: |
  Sorry
subquestion: |
  You have not chosen to ask for any of the protections a Stalking No Contact Order can give you.
  
  If you have made a mistake, click **Back.**
buttons:
  - Exit: exit
  - Restart: restart
---
id: additional service information cook
question: |
  What other information will help the sheriff deliver court papers to ${other_parties[0].name.full(middle="full")}?
subquestion: |
  You can add things like:
  
  * Best days and times to serve court papers,
  * Details about the places where ${other_parties[0].name.full(middle="full")} can be found, and
  * Information about other people at those locations that can help find ${other_parties[0].name.full(middle="full")}.

  This will not appear on the forms that will be filed with the court. It goes on the Confidential Protective Order Information Sheet for the Sheriff.
fields:
  - no label: service_information
    input type: area
    rows: 7
    maxlength: 400
    required: False
---
id: signature
question: |
  Do you want to add your e-signature to your forms?
subquestion: |
  This program can put "**/s/ ${users[0].name.full(middle='full')}**" where you would sign your name. The court will accept this as your signature.
  
  If you do not add your **{e-signature}** now, you must sign your forms before you file them.
  
  <div class="alert alert-info ilao-info" role="alert">
    <h6 class="alert-heading">What it means to sign your forms</h6>
    <p>By signing your <i>Petition for Stalking No Contact Order</i>, you are certifying that:
  <p>
  <p><ul>
  <li>You read the document,</li>
  <li>You believe it to be true and correct, and</li>
  <li>You are not filing it for an improper purpose.</li>
  </ul><p>
  <p>See the <a href="https://www.ilga.gov/legislation/ilcs/documents/073500050k1-109.htm"><b>Code of Civil Procedure, 735 ILCS 5/1-109</b></a> for more information.</p>
  </div>
field: e_signature
choices:
  - Yes: True
  - No, I will sign my forms later.: False
terms:
  - "e-signature": |
      An e-signature is an electronic signature. It is a digital version of a signature that has the same effect as a hand-written signature.
---
id: debug
continue button field: debug_page
question: |
  Debug
subquestion: |
  Others protected number gathered: ${others_protected.number_gathered()}
---
reconsider: true
code: |
  minors_protected.clear()
  adults_protected.clear()
  for other in others_protected:
    if other.age_in_years() < 18:
      minors_protected.append(other)
    else:
      adults_protected.append(other)
  minors_protected.there_is_another = False
  adults_protected.there_is_another = False
  if minors_protected.number_gathered() > 0:
    child_list = comma_and_list(minors_protected)
  if adults_protected.number_gathered() > 0:
    adult_list = comma_and_list(adults_protected)
  adult_minor_sorting = True
---
id: forms assembling
continue button field: forms_assembling
question: |
  Almost done
subquestion: |
  After you click **Next**, it may take a few moments to finish making your forms.
  
  ###### You do not need to refresh your screen. Hang in there!
  
  [NEWLINE]
---
id: get docs screen
question: |
  Download
subquestion: |  
  Your forms are ready. View and download your forms below. Click **Make changes** to fix any mistakes.

  This program does not file your ${ form_name } forms with the court. You will need to do this yourself.

  ${ action_button_html(url_action('review_answers'), label=':edit: Make changes', color='success', size="md") }
  
  ${ al_user_bundle.download_list_html() }

  &nbsp;

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

  **Note:** This program does not file your ${ form_name } forms with the court.
  
  Thank you for using ILAO Easy Forms!
event: get_docs_screen
under: |
  % if not user_logged_in():
  
  [${fa_icon("sign-in-alt", color="#0079d0", size="sm")} Sign-in](${url_of('login', next=interview_url())}) or [create](${url_of('register', next=interview_url())}) an ILAO Easy Form account to save your progress (optional).
  % endif 

  &nbsp;
  ${ action_button_html(interview_url(i="docassemble.ILAO:feedback.yml", easy_form_interview=ilao_easy_form_url, easy_form_title=ilao_easy_form_title, easy_form_page=current_context().question_id, easy_form_variable=current_context().variable, local=False,reset=1), label=':comment: Was this program helpful?', color="#181c36", size="md", new_window=True) }
---
generic object: ALDocumentBundle
template: x.send_email_template
subject: |
  Your forms
content: |
  Your forms are attached.
  
  Thanks for using ILAO Easy Forms!
  
  [Illinois Legal Aid Online](https://www.illinoislegalaid.org)
---
objects:
  - snco_instructions: ALDocument.using(title="Instructions", filename="instructions.pdf", has_addendum=False)
  - snco_petition: ALDocument.using(title="Verified Petition", filename="petition.pdf", has_addendum=False)
  #- op_schools: ALDocument.using(title="Confidential School or Daycare", filename="confidential_schools.pdf", has_addendum=False)
  #- additional_incidents: ALDocument.using(title="Additional Incidents of Abuse", filename="additional_incidents.pdf", has_addendum=False)
  #- additional_cases: ALDocument.using(title="Additional Case Information", filename="additional_cases.pdf", has_addendum=False)
  #- emergency_op: ALDocument.using(title="Emergency Order of Protection (draft)", filename="emergency_op.pdf", has_addendum=False)
  - emergency_order: ALDocument.using(title="Emergency Stalking No Contact Order (draft)", filename="snco_order.pdf", has_addendum=False)
  - plenary_order: ALDocument.using(title="Plenary Stalking No Contact Order (draft)", filename="snco_order.pdf", has_addendum=False)
  - op_summons: ALDocument.using(title="Summons", filename="summons.pdf", has_addendum=False)
  #- affidavit_pt_supervisor: ALDocument.using(title="Affidavit of Parenting Time Supervisor", filename="affidavit_pt_supervisor.pdf", has_addendum=False)
  - efiling_exemption: ALDocument.using(title="E-filing exemption (optional)", filename="e-filing_exemption.pdf", has_addendum=False)
  - cook_dv_cover_sheet: ALDocument.using(title="Domestic Violence Cover Sheet", filename="cook_dv_cover_sheet.pdf", has_addendum=False)
  - cook_sheriff_info_sheet: ALDocument.using(title="Confidential Sheriff Information Sheet", filename="cook_sheriff_info_sheet.pdf", has_addendum=False)
  - cook_petition: ALDocument.using(title="Verified Petition", filename="cook_petition.pdf", has_addendum=False)
  - cook_e_order: ALDocument.using(title="Emergency Stalking No Contact Order (draft)", filename="cook_snco_order.pdf", has_addendum=False)
  - cook_p_order: ALDocument.using(title="Plenary Stalking No Contact Order (draft)", filename="cook_snco_order.pdf", has_addendum=False)
  #- cook_findings: ALDocument.using(title="Findings", filename="cook_findings.pdf", has_addendum=False)
  #- cook_disposition_order: ALDocument.using(title="Disposition order", filename="cook_disposition.pdf", has_addendum=False)
  - others_protected_addendum: ALDocument.using(title="Others protected addendum", filename="others_protected_addendum.pdf", has_addendum=False)
  - snco_events_addendum: ALDocument.using(title="Stalking incidents addendum", filename="snco_events_addendum.pdf", has_addendum=False)
  - sheriff_cover_sheet: ALDocument.using(title="Sheriff Information Cover Sheet", filename="sheriff_info_cover_sheet.pdf", has_addendum=False)
---
objects:
  - petition_bundle: ALDocumentBundle.using(elements=[snco_petition, cook_petition, others_protected_addendum, snco_events_addendum], filename="petition.pdf", title="Verified Petition")
  - sheriff_info_bundle: ALDocumentBundle.using(elements=[sheriff_cover_sheet, cook_sheriff_info_sheet], filename="cook_sheriff_info_sheet.pdf", title="Confidential Sheriff Information Sheet")
---
objects: 
  - al_user_bundle: ALDocumentBundle.using(elements=[snco_instructions, cook_dv_cover_sheet, petition_bundle, emergency_order, plenary_order, cook_e_order, cook_p_order, op_summons, sheriff_info_bundle, efiling_exemption], filename="stalking_no_contact_order.pdf", title="All forms")
  - al_court_bundle: ALDocumentBundle.using(elements=[snco_instructions, cook_dv_cover_sheet, petition_bundle, emergency_order, plenary_order, cook_e_order, cook_p_order, op_summons, cook_sheriff_info_sheet, efiling_exemption], filename="stalking_no_contact_order.pdf", title="Order of protection")
---
code: |
  snco_instructions.enabled = True
  #op_schools.enabled = False
  op_summons.enabled = True
  efiling_exemption.enabled = True
  others_protected_addendum.enabled = False
  petition_bundle.enabled = True
  snco_events_addendum.enabled = False
  others_protected_addendum.enabled = False
  sheriff_cover_sheet.enabled = False
  sheriff_info_bundle.enabled = False

  
  if trial_court_index == -1:
    cook_dv_cover_sheet.enabled = True
    sheriff_cover_sheet.enabled = True
    sheriff_info_bundle.enabled = True
    cook_sheriff_info_sheet.enabled = True
    cook_petition.enabled = True
    if order_type['plenary']:
      cook_p_order.enabled = True
    else:
      cook_p_order.enabled = False
    if order_type['emergency']:
      cook_e_order.enabled = True
    else:
      cook_e_order.enabled = False
    #cook_findings.enabled = True
    #cook_disposition_order.enabled = True
    snco_petition.enabled = False
    emergency_order.enabled = False
    plenary_order.enabled = False
    #if others_protected.number_gathered() > 0:
    #  others_protected_addendum.enabled = True
    if stalking_events.number_gathered() > 3:
      snco_events_addendum.enabled = True
  else:
    cook_dv_cover_sheet.enabled = False
    cook_sheriff_info_sheet.enabled = False
    cook_petition.enabled = False
    cook_e_order.enabled = False
    cook_p_order.enabled = False
    #cook_findings.enabled = False
    #cook_disposition_order.enabled = False
    snco_petition.enabled = True
    if order_type['plenary']:
      plenary_order.enabled = True
    else:
      plenary_order.enabled = False
    if order_type['emergency']:
      emergency_order.enabled = True
    else:
      emergency_order.enabled = False
    if others_protected.number_gathered() > 2:
      others_protected_addendum.enabled = True
    if stalking_events.number_gathered() > 2:
      snco_events_addendum.enabled = True
      
---
attachment:
  variable name: snco_instructions[i]
  name: instructions
  filename: snco_instructions
  docx template file: snco_instructions.docx
---
attachment:
  variable name: snco_events_addendum[i]
  name: snco_events_addendum
  filename: snco_events_addendum
  docx template file: snco_events_addendum.docx
---
attachment:
  variable name: others_protected_addendum[i]
  name: others_protected_addendum
  filename: others_protected_addendum
  docx template file: others_protected_addendum.docx
---
attachment:
  variable name: sheriff_cover_sheet[i]
  name: sheriff_cover_sheet
  filename: sheriff_cover_sheet
  skip undefined: True
  editable: False
  pdf template file: sheriff_cover_sheet.pdf
  fields:
    - "fake": ${ "" }
---
attachment:
  variable name: cook_dv_cover_sheet[i]
  name: cook_dv_cover_sheet
  filename: cook_dv_cover_sheet
  skip undefined: True
  editable: False
  pdf template file: cook_dv_cover_sheet.pdf
  fields:
    - "petitioner__1": ${ users[0].name.full(middle="full") }
    - "respondent": ${other_parties[0].name.full(middle="full")}
    - "case_number__1": ${ case_number }
    - "stalking_petition": ${ True }

    - "involves_minors_yes": ${ True if any_minors else '' }
    - "involves_minors_no": ${ True if not any_minors else '' }
    - "previous_divorce_yes": ${ True if other_parties[0].divorced_user else '' }
    - "previous_divorce_no": ${ True if not other_parties[0].divorced_user else '' }
    - "previous_parentage_yes": ${ True if other_parties[0].parentage_action and not other_parties[0].divorced_user else '' }
    - "previous_parentage_no": ${ True if other_parties[0].divorced_user or not other_parties[0].parentage_action else '' }
    - "previous_cook_case_date": |  
        % if other_parties[0].divorced_user:
        ${ format_date(other_parties[0].divorce_date, format='MMM d, yyyy')}
        % elif other_parties[0].parentage_action:
        ${ format_date(other_parties[0].parentage_date, format='MMM d, yyyy')} 
        % else: 
        ${''} 
        % endif
    - "previous_cook_case_number": |
        % if other_parties[0].divorced_user:
        ${ other_parties[0].divorce_number}
        % elif other_parties[0].parentage_action:
        ${ other_parties[0].parentage_number} 
        % else: 
        ${''} 
        % endif
    - "previous_cook_case_judge": |
        % if other_parties[0].divorced_user:
        ${ other_parties[0].divorce_judge}
        % elif other_parties[0].parentage_action:
        ${ other_parties[0].parentage_judge} 
        % else: 
        ${''} 
        % endif
    - "pro_se_cb": ${ True }
    - "petitioner__2": ${ users[0].name.full(middle="full") }
    - "preparer_address_line_1": ${ users[0].address.line_one(bare=True) }
    - "petitioner_city": ${ users[0].address.city }
    - "petitioner_state": ${ users[0].address.state }
    - "petitioner_zip": ${ users[0].address.zip }
    - "preparer_phone": ${ phone_number_formatted(users[0].phone_number) if users[0].phone_number != "" else "" }
    - "preparer_email": ${ users[0].email if users[0].has_email_address else ""}
---
attachment:
  variable name: cook_sheriff_info_sheet[i]
  name: cook_sheriff_info_sheet
  filename: cook_sheriff_info_sheet
  skip undefined: True
  editable: False
  pdf template file: cook_sheriff_info_sheet.pdf
  fields:
    - "respondent": ${other_parties[0].name.full(middle="full")}
    #- "case_number__1": ${ "" }
    - "alias_names": ${ comma_and_list(other_parties[0].other_names)}
    - "respondent_race": ${ respondent_race_other if other_parties[0].race == 'Other' else other_parties[0].race }
    - "respondent_dob": |
        % if knows_respondent_dob == 'exact' and other_parties[0].birthdate != "":
        ${ other_parties[0].birthdate }
        % elif knows_respondent_dob == 'some':
        ${ other_parties[0].birthdate_info }
        % else:
        ${ "do not know" }
        % endif
    - "respondent_male_at_birth": ${ True if respondent_sex_at_birth == "male" else '' }    
    - "respondent_female_at_birth": ${ True if respondent_sex_at_birth == "female" else '' }    
    - "respondent_gender_m": ${ True if other_parties[0].cook_gender['male'] == True else '' } 
    - "respondent_gender_w": ${ True if other_parties[0].cook_gender['female'] == True else '' }
    - "respondent_gender_tw": ${ True if other_parties[0].cook_gender['transfem'] == True else '' }
    - "respondent_gender_tm": ${ True if other_parties[0].cook_gender['transmasc'] == True else '' }
    - "respondent_gender_nb": ${ True if other_parties[0].cook_gender['nonbinary'] == True else '' }
    - "respondent_gender_other": ${ True if other_parties[0].cook_gender['other'] == True else '' }
    - "respondent_gender_other_text": ${ respondent_cook_gender_other if other_parties[0].cook_gender['other'] == True else '' }
    
    - "respondent_age": |
        % if knows_respondent_dob == 'exact' and other_parties[0].birthdate != "":
        ${ other_parties[0].age_in_years() }
        % endif
    - "respondent_height": |
         % if other_parties[0].height_feet > 1:
         ${ str(other_parties[0].height_feet) + "\'" }
         % if other_parties[0].height_inches > 0:
         ${ str(other_parties[0].height_inches) + "\""}
         % endif
         % else:
         ${""}
         % endif
    - "respondent_weight": ${ str(other_parties[0].weight) + " lbs." if other_parties[0].weight > 0 else '' }
    - "respondent_skin": |
        % if other_parties[0].skin != "":
        ${ respondent_skin_other if other_parties[0].skin == 'other' else other_parties[0].skin }
        % endif
    - "respondent_hair": ${ other_parties[0].hair if other_parties[0].hair != "" else '' }
    - "respondent_eyes": ${ other_parties[0].eyes if other_parties[0].eyes != "" else '' }
    - "respondent_glasses": ${other_parties[0].glasses if other_parties[0].glasses != "" else ''}
    - "respondent_tattoos": ${ other_parties[0].features if other_parties[0].features != "" else '' }
    - "respondent_history_illness": ${ True if caution_reasons['illness'] == True else "" }
    - "respondent_alcohol": ${ True if caution_reasons['alcohol'] == True else "" }
    - "respondent_drugs": ${ True if caution_reasons['drugs'] == True else "" }
    - "respondent_firearms_on_person": ${ True if caution_reasons['armed'] == True else "" }
    - "respondent_weapons_in_home": ${ True if caution_reasons['home'] == True else "" }
    - "respondent_weapons_description": ${ other_parties[0].weapons_info if caution_reasons['armed'] or caution_reasons['home'] else "" }       
    - "respondent_suicidal": ${ True if caution_reasons['suicide'] == True else ''  }    
    - "respondent_probation_yes":  ${ True if respondent_on_probation == "Yes" else ''  } 
    - "respondent_probation_no":  ${ True if respondent_on_probation == "No" else ''  }
    - "respondent_probation_county":  ${ respondent_probation_county if respondent_on_probation == "Yes" else ''  }   
    - "respondent_employer": |
        % if other_parties[0].has_job:
        ${ other_parties[0].employer_name }
        % else:
        ${ "do not know" }
        % endif
    - "respondent_work_type": |
        % if other_parties[0].has_job and respondent_work_type != "":
        ${ respondent_work_type }
        % else:
        ${ "" }
        % endif
        
    - "service_address_line_1": |
        % if other_parties[0].which_address == "add_service_address":
        ${ other_parties[0].service_address.line_one(bare=True) }
        % elif other_parties[0].which_address == "home_address":
        ${ other_parties[0].address.line_one(bare=True) }        
        % else:
        ${ other_parties[0].employer_address.line_one(bare=True) }        
        % endif
    - "service_city": |
        % if other_parties[0].which_address == "add_service_address":
        ${other_parties[0].service_address.city}, ${other_parties[0].service_address.state}
        % elif other_parties[0].which_address == "home_address":
        ${ other_parties[0].address.city }, ${other_parties[0].address.state}        
        % else:
        ${ other_parties[0].employer_address.city }, ${other_parties[0].employer_address.state}       
        % endif
        
    - "last_known_address": |
        % if other_parties[0].address_known or other_parties[0].last_address_known:
        ${other_parties[0].address.line_one(bare=True)}
        % endif      

    - "last_known_city": |
        % if other_parties[0].address_known or other_parties[0].last_address_known:
        ${ other_parties[0].address.city }, ${other_parties[0].address.state}    
        % endif

    - "respondent_work_address": |
        % if other_parties[0].has_job:
        ${ other_parties[0].employer_address.line_one(bare=True) }
        % else:
        ${ "do not know" }
        % endif
    - "respondent_work_city": |
        % if other_parties[0].has_job:
        ${ other_parties[0].employer_address.city }, ${other_parties[0].employer_address.state}    
        % else:
        ${ "do not know" }
        % endif

    - "service_alt_address_line_1": |
        % if other_parties[0].bonus_service_check:
        % if other_parties[0].which_bonus_address == "service_address":
        ${other_parties[0].bonus_service_address.line_one(bare=True)}
        % elif other_parties[0].which_bonus_address == "home_address":
        ${other_parties[0].address.line_one(bare=True)}
        % else:
        ${other_parties[0].employer_address.line_one(bare=True)}
        % endif
        % endif
    - "service_alt_city": |
        % if other_parties[0].bonus_service_check:
        % if other_parties[0].which_bonus_address == "service_address":
        ${other_parties[0].bonus_service_address.city}, ${other_parties[0].bonus_service_address.state}   
        % elif other_parties[0].which_bonus_address == "home_address":
        ${other_parties[0].address.city}, ${other_parties[0].address.state}   
        % else:
        ${other_parties[0].employer_address.city}, ${other_parties[0].employer_address.state}   
        % endif
        % endif
    - "respondent_phone": ${ phone_number_formatted(other_parties[0].phone_number)}
    - "respondent_cell": ${ phone_number_formatted(other_parties[0].mobile_number) }
    - "respondent_email": ${ other_parties[0].email_address }
    - "respondent_social_media_yes": ${ True if respondent_on_social_media == "Yes" else '' }
    - "respondent_social_media_no": ${ True if respondent_on_social_media == "No" else '' }
    - "respondent_social_media_accounts": ${ respondent_social_media_accounts if respondent_on_social_media == "Yes" else '' }
    - "respondent_work_hours": |
        % if other_parties[0].has_job and respondent_work_type != "":
        ${ other_parties[0].work_hours }
        % else:
        ${ "" }
        % endif
    - "additional_service_info": ${ service_information }
    - "cook_vehicle_make": ${ other_parties[0].vehicle_make }
    - "cook_vehicle_model": ${ other_parties[0].vehicle_model }
    - "cook_vehicle_year": ${ other_parties[0].vehicle_year }
    - "cook_vehicle_color": ${ other_parties[0].vehicle_color }
    - "cook_vehicle_plate": ${ other_parties[0].license_plate }
    - "cook_vehicle_state": ${ state_name(other_parties[0].vehicle_state) }

    - "preparer_name": ${ users[0].name.full(middle="full") }
    - "preparer_phone": ${ phone_number_formatted(users[0].phone_number) }
---
#attachment:
#  variable name: cook_sheriff_info_sheet[i]
#  name: cook_sheriff_info_sheet
#  filename: cook_sheriff_info_sheet
#  skip undefined: True
#  editable: False
#  pdf template file: cook_sheriff_info_sheet.pdf
#  fields:
#    - "respondent": ${other_parties[0].name.full(middle="full")}
#    - "case_number__1": ${ case_number }
#    - "alias_names": ${ comma_and_list(other_parties[0].other_names)}
#    #- "respondent_gender": ${ other_parties[0].other_gender if other_parties[0].gender == 'other' else other_parties[0].gender }
#    - "respondent_race": ${ respondent_race_other if other_parties[0].race == 'other' else other_parties[0].race }
#    - "respondent_dob": |
#        % if knows_respondent_dob == 'exact' and other_parties[0].birthdate != "":
#        ${ other_parties[0].birthdate }
#        % elif knows_respondent_dob == 'some':
#        ${ other_parties[0].birthdate_info }
#        % else:
#        ${ "do not know" }
#        % endif
#    - "respondent_age": |
#        % if knows_respondent_dob == 'exact' and other_parties[0].birthdate != "":
#        ${ other_parties[0].age_in_years() }
#        % endif
#    - "respondent_height": |
#        % if other_parties[0].height_feet > 1:
#        ${ str(other_parties[0].height_feet) + "\'" }
#        % if other_parties[0].height_inches > 0:
#        ${ str(other_parties[0].height_inches) + "\""}
#        % endif
#        % else:
#        ${""}
#        % endif
#    - "respondent_weight": ${ str(other_parties[0].weight) + " lbs." if other_parties[0].weight > 0 else '' }
#    - "respondent_skin": |
#        % if other_parties[0].skin != "":
#        ${ respondent_skin_other if other_parties[0].skin == 'other' else other_parties[0].skin }
#        % endif
#    - "respondent_hair": ${ other_parties[0].hair}
#    - "respondent_eyes": ${ other_parties[0].eyes if other_parties[0].eyes != "" else '' }
#    - "respondent_glasses": ${other_parties[0].glasses if other_parties[0].glasses != "" else ''}
#    - "respondent_tattoos": ${ other_parties[0].features if other_parties[0].features != "" else '' }
#    - "respondent_history_illness": ${ caution_reasons['illness'] }
#    - "respondent_alcohol": ${ caution_reasons['alcohol']}
#    - "respondent_drugs": ${ caution_reasons['drugs'] }
#    - "respondent_firearms_on_person": ${ caution_reasons['armed'] }
#    - "respondent_weapons_in_home": ${ caution_reasons['home'] }
#    - "respondent_weapons_description": ${ other_parties[0].weapons_info if other_parties[0].carrying_weapon or other_parties[0].home_weapon == True else "" }        
#    - "respondent_suicidal": ${ caution_reasons['suicide'] }    
#    - "respondent_on_probation":  ${ True if respondent_on_probation == "Yes" else ''  } 
#    - "respondent_probation_county":  ${ respondent_probation_county if respondent_on_probation == "Yes" else ''  } 
#    
#    - "respondent_employer": ${ other_parties[0].employer_name}
#    - "respondent_work_type": ${respondent_work_type}       
#    - "service_address_line_1": ${other_parties[0].servie_address.line_one(bare=True)}
#    - "service_city": ${other_parties[0].service_address.city}
#        
#    - "last_known_address": |
#        % if other_parties[0].address_known or other_parties[0].last_address_known:
#        ${other_parties[0].address.line_one(bare=True)}
#        % endif       
#    - "last_known_city": |
#        % if other_parties[0].address_known or other_parties[0].last_address_known:
#        ${other_parties[0].address.city}
#        % endif  
#    - "respondent_work_address": |
#        % if other_parties[0].has_job:
#        ${ other_parties[0].employer_address.line_one(bare=True) }
#        % else:
#        ${ "do not know" }
#        % endif
#    - "respondent_work_city": |
#        % if other_parties[0].has_job:
#        ${ other_parties[0].employer_address.city }
#        % else:
#        ${ "do not know" }
#        % endif
#    - "respondent_employer": ${other_parties[0].employer_name if other_parties[0].has_job else ""}
#    - "respondent_work_type": ${respondent_work_type if other_parties[0].has_job else ""}
#    - "service_alt_address_line_1": ${other_parties[0].bonus_service_address.line_one(bare=True) if other_parties[0].bonus_service_check else ""}
#    - "service_alt_city": ${other_parties[0].bonus_service_address.city if other_parties[0].bonus_service_check else ""}
#    - "respondent_phone": ${ phone_number_formatted(other_parties[0].phone_number) if other_parties[0].phone_number != "" else ""}
#    - "service_information": ${ service_information }
#    - "cook_vehicle_make": ${ other_parties[0].vehicle_make }
#    - "cook_vehicle_model": ${ other_parties[0].vehicle_model }
#    - "cook_vehicle_year": ${ other_parties[0].vehicle_year }
#    - "cook_vehicle_color": ${ other_parties[0].vehicle_color }
#    - "cook_vehicle_plate": ${ other_parties[0].license_plate }
#    - "cook_vehicle_state": ${ state_name(other_parties[0].vehicle_state) }
#
#    - "preparer_name": ${ users[0].name.full(middle="full") }
#    - "preparer_phone": ${ phone_number_formatted(users[0].phone_number)}
---
#attachment:
#  variable name: cook_disposition_order[i]
#  name: cook_disposition_order
#  filename: cook_disposition_order
#  skip undefined: True
#  editable: False
#  pdf template file: cook_disposition_order.pdf
#  fields:
#    #What are these "on behalf of" fields in the template for?
#    - "on_behalf_1": ${""}
#    - "on_behalf_2": ${""}
#    - "petitioner_name": ${users[0].name.full(middle='full')}
#    - "respondent_name": ${other_parties[0].name.full(middle='full')}
#    #Can the case number be known?
#    - "case_number": ${""}
#    #What is the leads number?
#    - "leads_number": ${""}
#    - "respondent_birth": ${other_parties[0].birthdate}
#    #What does it mean for an SNCO to be an independent proceeding, cirminal proceeding, or deliquency petition? 
#    - "independent": ${False}
#    - "criminal": ${False}
#    - "delinquency": ${False}
#    #Should these checkboxes be left blank for the court to mark?
#    - "emergency_check": ${order_type['emergency']}
#    - "plenary_check": ${order_type['plenary']}
---
#attachment:
#  variable name: cook_findings[i]
#  name: cook_findings
#  filename: cook_findings
#  skip undefined: True
#  editable: False
#  pdf template file: cook_findings.pdf
#  fields:
#    #What are these "on behalf of" fields in the template for?
#    - "people_ex_rel": ${""}
#    - "on_behalf_of": ${""}
#    - "petitioner_name": ${users[0].name.full(middle='full')}
#    - "respondent_name": ${other_parties[0].name.full(middle='full')}
#    #Can the case number be known?
#    - "case_number": ${""}
#    #What is the proceeding type?
#    - "independent": ${False}
#    - "other_proceeding_check": ${False}
#    - "other_proceeding_text": ${""}
#    - "criminal_proceeding": ${False}
#    - "juvenile": ${False}
#    #Should these checkboxes be left blank for the court to mark?
#    - "emergency_check": ${order_type['emergency']}
#    - "plenary_check": ${order_type['plenary']}
---
attachment:
  variable name: efiling_exemption[i]
  name: efiling_exemption
  filename: efiling_exemption
  skip undefined: True
  editable: False
  pdf template file: efiling_exemption.pdf
  fields:
    - "county": ${trial_court.address.county}
    - "petitioner__1": ${ users[0].name.full(middle="full") }
    - "respondent": ${other_parties[0].name.full(middle="full")}
    - "case_number__1": ${ case_number }
    - "reason_dv": ${ True }
    - "e_signature": ${ users[0].name.full(middle="full") if e_signature else '' }
    - "petitioner__2": ${ users[0].name.full(middle="full") }
    - "user_address_one_line": ${ users[0].address.on_one_line(bare=True) }
    - "user_phone_number": ${ phone_number_formatted(users[0].phone_number) }
    - "user_email": ${ users[0].email if users[0].email_notice else ""}
---
attachment:
  variable name: cook_e_order[i]
  name: cook_e_order
  filename: cook_e_order
  skip undefined: True
  editable: False
  pdf template file: cook_snco_order.pdf
  fields:
    - "user_name": ${users[0].name.full(middle='full')}
    - "additional_protected": |
        % if protect_whom["minor"] or protect_whom["adult"]:
        ${comma_and_list(others_protected)}
        % endif
    - "respondent": ${other_parties[0].name.full(middle='full')}
    - "case_number": ${""}
    - "respondent_birth_date": ${year_of(other_parties[0].birthdate)}
    - "independent": ${False}
    - "criminal": ${False}
    - "juvenile": ${False}
    - "emergency": ${True}
    - "plenary": ${False}
    - "petitioner_name": ${users[0].name.full(middle='full')}
    - "safe_address": ${hide_address}
    - "petitioner_address_line_one": ${"" if hide_address else users[0].address.line_one(bare=True)}
    - "petitioner_address_line_two": ${"" if hide_address else users[0].address.line_two()}
    - "respondent_address_line_one": ${other_parties[0].address.line_one(bare=True)}
    - "respondent_address_line_two": ${other_parties[0].address.line_two()}
    - "respondent_sex": ${other_parties[0].cook_sex_other if other_parties[0].cook_sex == "other" else other_parties[0].cook_sex}
    - "respondent_race": ${respondent_race_other if other_parties[0].race == "Other" else other_parties[0].race}
    - "respondent_height": |
        % if other_parties[0].height_feet > 1:
        ${ str(other_parties[0].height_feet) + "\'" }
        % if other_parties[0].height_inches > 0:
        ${ str(other_parties[0].height_inches) + "\""}
        % endif
        % else:
        ${""}
        % endif
    - "respondent_weight": ${other_parties[0].weight if other_parties[0].weight > 0 else ""}
    - "respondent_hair": ${ other_parties[0].hair}
    - "respondent_eye": ${ other_parties[0].eyes if other_parties[0].eyes != "" else '' }
    - "emergency_reason": ${emergency_reason if order_type['emergency'] else ""}
    - "protected_persons": ${comma_and_list(others_protected)}
    - "minor_children": ${child_list}
    - "no_stalking": ${protection_requested['stalking']}
    - "no_contact": ${protection_requested['contacting']}
    - "no_contact_list": |
        % if protection_requested['contacting']:
        % if others_protected.there_are_any and not protect_whom['me']:
        % if len(comma_and_list(others_protected)) < 70:
        ${comma_and_list(others_protected)}
        % else:
        See attached list of protected persons.
        % endif
        % elif protect_whom['me'] and not others_protected.there_are_any:
        ${users[0].name.full(middle='full')}
        % elif others_protected.there_are_any and protect_whom['me']:
        % if len(comma_and_list(others_protected)) > 50:
        See attached list of persons protected in addition to ${users[0].name.full(middle='full')}.
        % elif others_protected.number_gathered() == 1:
        ${users[0].name.full(middle='full')} and ${comma_and_list(others_protected)}
        % else:
        ${users[0].name.full(middle='full')}, ${comma_and_list(others_protected)}
        % endif
        % endif 
        % endif
    - "no_coming": ${protection_requested['away']}
    - "feet_distance": ${distance_away if protection_requested['away'] else ""}
    - "away_residence": ${protected_place_types['Home'] if protection_requested['away'] else False}
    - "away_school": ${protected_place_types['School'] if protection_requested['away'] else False}
    - "away_day_care": ${protected_place_types['day_care'] if protection_requested['away'] else False}
    - "away_workplace": ${protected_place_types['Workplace'] if protection_requested['away'] else False}
    - "away_other_check": ${protected_place_types['Other'] if protection_requested['away'] else False}
    - "away_other_name": ${other_places if protection_requested['away'] else ""}
    - "away_addresses": ${comma_and_list(away_address_list) if protection_requested['away'] else ""}
    - "no_remaining": ${True if live_with_stalker or school_with_stalker or work_with_stalker else False}
    - "no_remain_residence": ${live_with_stalker}
    - "no_remain_school": ${school_with_stalker}
    - "no_remain_workplace": ${work_with_stalker}
    - "no_remain_addresses": |
        % if live_with_stalker:
        ${home.on_one_line(bare=True)}, ${comma_and_list(no_remain_address_list)}
        % else:
        ${comma_and_list(no_remain_address_list)}
        % endif
    - "no_firearms": ${other_parties[0].prohibit_firearms}
    - "other_relief_check": ${other_parties[0].anything_else}
    - "other_relief": ${other_parties[0].what_else if other_parties[0].anything_else else ""}
    - "pay_costs": ${other_parties[0].pay_costs}
    - "petitioner_costs": ${""}
    - "emergency_check": ${order_type['emergency']}
    - "user_street": ${users[0].address.line_one(bare=True)}
    - "user_city": ${users[0].address.city}
    - "user_state": ${users[0].address.state}
    - "user_zip": ${users[0].address.zip}
    - "user_phone": ${ phone_number_formatted(users[0].phone_number)}
    - "user_email": ${ users[0].email if users[0].has_email_address else ""}
    - "pro_se": ${True}
---
attachment:
  variable name: cook_p_order[i]
  name: cook_p_order
  filename: cook_p_order
  skip undefined: True
  editable: False
  pdf template file: cook_snco_order.pdf
  fields:
    - "user_name": ${users[0].name.full(middle='full')}
    - "additional_protected": |
        % if protect_whom["minor"] or protect_whom["adult"]:
        ${comma_and_list(others_protected)}
        % endif
    - "respondent": ${other_parties[0].name.full(middle='full')}
    - "case_number": ${""}
    #- "respondent_birth": ${other_parties[0].birthdate.format_date('YYYY')}
    - "respondent_birth_date": ${year_of(other_parties[0].birthdate)}
    - "independent": ${False}
    - "criminal": ${False}
    - "juvenile": ${False}
    - "emergency": ${False}
    - "plenary": ${True}
    - "petitioner_name": ${users[0].name.full(middle='full')}
    - "safe_address": ${hide_address}
    - "petitioner_address_line_one": ${"" if hide_address else users[0].address.line_one(bare=True)}
    - "petitioner_address_line_two": ${"" if hide_address else users[0].address.line_two()}
    - "respondent_address_line_one": ${other_parties[0].address.line_one(bare=True)}
    - "respondent_address_line_two": ${other_parties[0].address.line_two()}
    - "respondent_sex": ${other_parties[0].cook_sex_other if other_parties[0].cook_sex == "other" else other_parties[0].cook_sex}
    - "respondent_race": ${respondent_race_other if other_parties[0].race == "Other" else other_parties[0].race}
    - "respondent_height": |
        % if other_parties[0].height_feet > 1:
        ${ str(other_parties[0].height_feet) + "\'" }
        % if other_parties[0].height_inches > 0:
        ${ str(other_parties[0].height_inches) + "\""}
        % endif
        % else:
        ${""}
        % endif
    - "respondent_weight": ${other_parties[0].weight if other_parties[0].weight > 0 else ""}
    - "respondent_hair": ${ other_parties[0].hair}
    - "respondent_eye": ${ other_parties[0].eyes if other_parties[0].eyes != "" else '' }
    - "emergency_reason": ${emergency_reason if order_type['emergency'] else ""}
    - "protected_persons": ${comma_and_list(others_protected)}
    - "minor_children": ${child_list}
    - "no_stalking": ${protection_requested['stalking']}
    - "no_contact": ${protection_requested['contacting']}
    - "no_contact_list": |
        % if protection_requested['contacting']:
        % if others_protected.there_are_any and not protect_whom['me']:
        % if len(comma_and_list(others_protected)) < 70:
        ${comma_and_list(others_protected)}
        % else:
        See attached list of protected persons.
        % endif
        % elif protect_whom['me'] and not others_protected.there_are_any:
        ${users[0].name.full(middle='full')}
        % elif others_protected.there_are_any and protect_whom['me']:
        % if len(comma_and_list(others_protected)) > 50:
        See attached list of persons protected in addition to ${users[0].name.full(middle='full')}.
        % elif others_protected.number_gathered() == 1:
        ${users[0].name.full(middle='full')} and ${comma_and_list(others_protected)}
        % else:
        ${users[0].name.full(middle='full')}, ${comma_and_list(others_protected)}
        % endif
        % endif 
        % endif
    - "no_coming": ${protection_requested['away']}
    - "feet_distance": ${distance_away if protection_requested['away'] else ""}
    - "away_residence": ${protected_place_types['Home'] if protection_requested['away'] else False}
    - "away_school": ${protected_place_types['School'] if protection_requested['away'] else False}
    - "away_day_care": ${protected_place_types['day_care'] if protection_requested['away'] else False}
    - "away_workplace": ${protected_place_types['Workplace'] if protection_requested['away'] else False}
    - "away_other_check": ${protected_place_types['Other'] if protection_requested['away'] else False}
    - "away_other_name": ${other_places if protection_requested['away'] else ""}
    - "away_addresses": ${comma_and_list(away_address_list) if protection_requested['away'] else ""}
    - "no_remaining": ${True if live_with_stalker or school_with_stalker or work_with_stalker else False}
    - "no_remain_residence": ${live_with_stalker}
    - "no_remain_school": ${school_with_stalker}
    - "no_remain_workplace": ${work_with_stalker}
    - "no_remain_addresses": |
        % if live_with_stalker:
        ${home.on_one_line(bare=True)}, ${comma_and_list(no_remain_address_list)}
        % else:
        ${comma_and_list(no_remain_address_list)}
        % endif
    - "no_firearms": ${other_parties[0].prohibit_firearms}
    - "other_relief_check": ${other_parties[0].anything_else}
    - "other_relief": ${other_parties[0].what_else if other_parties[0].anything_else else ""}
    - "pay_costs": ${other_parties[0].pay_costs}
    - "petitioner_costs": ${""}
    - "emergency_check": ${order_type['emergency']}
    - "user_street": ${users[0].address.line_one(bare=True)}
    - "user_city": ${users[0].address.city}
    - "user_state": ${users[0].address.state}
    - "user_zip": ${users[0].address.zip}
    - "user_phone": ${ phone_number_formatted(users[0].phone_number)}
    - "user_email": ${ users[0].email if users[0].has_email_address else ""}
    - "pro_se": ${True}
---
attachment:
  variable name: cook_petition[i]
  name: cook_petition
  filename: cook_petition
  skip undefined: True
  editable: False
  pdf template file: cook_petition.pdf
  fields:
    #What are these "on behalf of" fields in the template for?
    - "people_ex_rel": ${""}
    - "on_behalf_of": ${""}
    - "self_name": |
        % if not protect_whom['me']:
        ${users[0].name.full(middle='full')}
        % endif
    - "behalf_petitioner": |
        % if protect_whom['me']:
        ${users[0].name.full(middle='full')}
        % else:
        % if len(comma_and_list(others_protected)) < 70:
        ${comma_and_list(others_protected)}
        % else:
        See attached list of protected persons.
        % endif
        % endif
    - "respondent": ${other_parties[0].name.full(middle='full')}
    #Can the case number be known?
    - "case_number": ${""}
    - "respondent_birth": ${other_parties[0].birthdate}
    #What does it mean for an SNCO to be an independent proceeding, cirminal proceeding, or deliquency petition? 
    - "independent": ${False}
    - "criminal": ${False}
    - "juvenile": ${False}
    - "emergency_check": ${order_type['emergency']}
    - "plenary_check": ${order_type['plenary']}
    - "petitioner_name": ${users[0].name.full(middle='full')}
    #These child name and adult name variables seem to be distinct from the others protected list. How should they be populated?
    - "child_name": ${child_list}
    - "adult_name": ${adult_list}
    - "safe_address": ${hide_address}
    - "petitioner_address_line_one": ${users[0].address.line_one(bare=True)}
    - "petitioner_city": ${users[0].address.city}
    - "petitioner_state": ${ users[0].address.state}
    - "petitioner_zip": ${users[0].address.zip}
    - "respondent_name": ${other_parties[0].name.full(middle='full')}
    - "respondent_address_line_one": ${other_parties[0].address.line_one(bare=True)}
    - "respondent_city": ${other_parties[0].address.city}
    - "respondent_state": ${ other_parties[0].address.state}
    - "respondent_zip": ${other_parties[0].address.zip}
    - "respondent_birth_date": |
        % if knows_respondent_dob == 'exact' and other_parties[0].birthdate != "":
        ${ other_parties[0].birthdate }
        % elif knows_respondent_dob == 'some':
        ${ other_parties[0].birthdate_info }
        % else:
        ${ "do not know" }
        % endif
    - "respondent_is_male": ${True if other_parties[0].cook_sex == "Male" else False}
    - "respondent_is_female": ${True if other_parties[0].cook_sex == "Female" else False}
    - "respondent_race": ${respondent_race_other if other_parties[0].race == "Other" else other_parties[0].race}
    - "respondent_height": ${(str(other_parties[0].height_feet) + "'" + str(other_parties[0].height_inches)  + "''") if str(other_parties[0].height_feet) != "0" else ""}
    - "respondent_weight": ${other_parties[0].weight if other_parties[0].weight > 0 else ""}
    - "respondent_characteristics": ${other_parties[0].features}
    - "employer_name": ${ other_parties[0].employer_name if other_parties[0].has_job else ""}
    - "employer_address_line_one": ${ other_parties[0].employer_address.line_one(bare=True) if other_parties[0].has_job else ""}
    - "employer_city": ${ other_parties[0].employer_address.city if other_parties[0].has_job else ""}
    - "employer_state": ${ other_parties[0].employer_address.state if other_parties[0].has_job else ""}
    - "employer_zip": ${ other_parties[0].employer_address.zip if other_parties[0].has_job else ""}
    - "protect_others_check": ${ True if others_protected.there_are_any else False}
    #- "others_protected_list": ${comma_and_list(others_protected) if others_protected.there_are_any else ""}
    - "incidents_check": ${True}
    - "date_incident_1": ${stalking_events[0].name.text}
    - "time_incident_1": ${stalking_events[0].time}
    #- "am_incident_1": ${ True if format_time(stalking_events[0].time, format='a')=='AM' else False }
    #- "pm_incident_1": ${ True if format_time(stalking_events[0].time, format='a')=='PM' else False }
    - "location_incident_1": ${stalking_events[0].place}
    - "description_incident_1": ${stalking_events[0].description}
    - "date_incident_2": ${stalking_events[1].name.text}
    - "time_incident_2": ${stalking_events[1].time}
    #- "am_incident_2": ${ True if format_time(stalking_events[1].time, format='a')=='AM' else False }
    #- "pm_incident_2": ${ True if format_time(stalking_events[1].time, format='a')=='PM' else False }
    - "location_incident_2": ${stalking_events[1].place}
    - "description_incident_2": ${stalking_events[1].description}
    - "description_incident_2_continued": ${""}
    - "date_incident_3": ${stalking_events[2].name.text}
    - "time_incident_3": ${stalking_events[2].time}
    #- "am_incident_3": ${ True if format_time(stalking_events[2].time, format='a')=='AM' else False }
    #- "pm_incident_3": ${ True if format_time(stalking_events[2].time, format='a')=='PM' else False }
    - "location_incident_3": ${stalking_events[2].place}
    - "description_incident_3": ${stalking_events[2].description}
    - "no_police_report": ${ False if any_police_reports else True}
    - "yes_police_report": ${any_police_reports}
    - "report_number": ${comma_and_list(report_numbers) if any_police_reports else ""}
    - "additional_events_check": ${True if stalking_events.number_gathered() > 3 else False}
    - "additional_events_text": |
        % if stalking_events.number_gathered() > 3:
        Additional incidents are attached.
        % endif
    - "others_protected_list": |     
        % if others_protected.there_are_any and not protect_whom['me']:
        % if len(comma_and_list(others_protected)) < 70:
        ${comma_and_list(others_protected)}
        % else:
        See attached list of protected persons.
        % endif
        % elif protect_whom['me'] and not others_protected.there_are_any:
        ${users[0].name.full(middle='full')}
        % elif others_protected.there_are_any and protect_whom['me']:
        % if len(comma_and_list(others_protected)) > 50:
        See attached list of persons protected in addition to ${users[0].name.full(middle='full')}.
        % elif others_protected.number_gathered() == 1:
        ${users[0].name.full(middle='full')} and ${comma_and_list(others_protected)}
        % else:
        ${users[0].name.full(middle='full')}, ${comma_and_list(others_protected)}
        % endif
        % endif
    - "no_stalking": ${protection_requested['stalking']}
    - "no_contact": ${protection_requested['contacting']}
    - "no_contact_list": |
        % if protection_requested['contacting']:
        % if others_protected.there_are_any and not protect_whom['me']:
        % if len(comma_and_list(others_protected)) < 70:
        ${comma_and_list(others_protected)}
        % else:
        See attached list of protected persons.
        % endif
        % elif protect_whom['me'] and not others_protected.there_are_any:
        ${users[0].name.full(middle='full')}
        % elif others_protected.there_are_any and protect_whom['me']:
        % if len(comma_and_list(others_protected)) > 50:
        See attached list of persons protected in addition to ${users[0].name.full(middle='full')}.
        % elif others_protected.number_gathered() == 1:
        ${users[0].name.full(middle='full')} and ${comma_and_list(others_protected)}
        % else:
        ${users[0].name.full(middle='full')}, ${comma_and_list(others_protected)}
        % endif
        % endif 
        % endif
    - "no_coming": ${protection_requested['away']}
    - "feet_away": ${distance_away}
    - "no_home": ${protected_place_types['Home']}
    - "no_school": ${protected_place_types['School']}
    - "no_day_care": ${protected_place_types['day_care']}
    - "no_workplace": ${protected_place_types['Workplace']}
    - "no_other_place": ${protected_place_types['Other']}
    - "other_place_line_1": ${""}
    - "other_place_line_2": ${other_places}
    - "away_address_list": ${comma_and_list(away_address_list)}
    - "no_remaining": ${True if live_with_stalker or school_with_stalker or work_with_stalker else False}
    - "no_remain_residence": ${live_with_stalker}
    - "no_remain_school": ${school_with_stalker}
    - "no_remain_work": ${work_with_stalker}
    - "no_remain_home_address": ${home.on_one_line(bare=True) if live_with_stalker else ""}
    - "no_remain_address_list": ${comma_and_list(no_remain_address_list)}
    - "no_firearms": ${other_parties[0].prohibit_firearms}
    - "other_relief_check": ${other_parties[0].anything_else}
    - "other_relief_text": ${other_parties[0].what_else if other_parties[0].anything_else else ""}
    - "pay_costs_check": ${other_parties[0].pay_costs}
    - "e_signature": ${ "/s/ " + users[0].name.full(middle='full') if e_signature else ""}
    - "user_name": ${users[0].name.full(middle='full')}
    - "user_address_line_one": ${ users[0].address.line_one(bare=True)}
    - "user_city": ${ users[0].address.city}
    - "user_state": ${ users[0].address.state}
    - "user_zip": ${ users[0].address.zip}
    - "signature_date": ${today() if e_signature else ""}
    - "user_phone": ${ phone_number_formatted(users[0].phone_number)}
    - "user_email": ${ users[0].email if users[0].has_email_address else ""}
    - "pro_se": ${True}
---
attachment:
  variable name: snco_petition[i]
  name: snco_petition
  filename: snco_petition
  skip undefined: True
  editable: False
  pdf template file: Stalking_NCO_Petition.pdf
  fields:
    - "circuit_court": ${court_circuit.upper()}
    - "filing_county": ${trial_court.address.county.upper()}
    - "user_name": ${users[0].name.full(middle='full')}
    - "others_protected": ${comma_and_list(others_protected)}
    - "protect_a_minor": ${any_minors}
    - "protect_an_adult": ${any_adults}
    - "behalf_of_names": |
        % if protect_whom['me'] and others_protected.there_are_any:
        % if others_protected.number_gathered() == 1:
        ${users[0].name.full(middle='full')} and ${ comma_and_list(others_protected)}
        % else:
        ${users[0].name.full(middle='full')}, ${ comma_and_list(others_protected)}
        % endif
        % elif others_protected.there_are_any and not protect_whom['me']:
        ${comma_and_list(others_protected)}
        % elif protect_whom['me'] and not others_protected.there_are_any:
        ${users[0].name.full(middle='full')}
        % endif
    - "stalker_name": ${ other_parties[0].name.full(middle='full')}
    - "case_number": ${""}
    - "user_address": ${users[0].address.on_one_line(bare=True)}
    - "use_safe_address": ${hide_address}
    - "other_protected_name_1": ${others_protected[0].name.full(middle='full')}
    - "other_protected_address_1": |
        % if hide_address and others_protected[0].use_safe_address:
        ${users[0].address.on_one_line(bare=True)}
        % elif others_protected[0].address.address != "":
        ${others_protected[0].address.on_one_line(bare=True)}
        % endif
    - "other_protected_name_2": ${others_protected[1].name.full(middle='full')}
    - "other_protected_address_2": |
        % if hide_address and others_protected[0].use_safe_address:
        ${users[0].address.on_one_line(bare=True)}
        % elif others_protected[1].address.address != "":
        ${others_protected[1].address.on_one_line(bare=True)}
        % endif
    - "respondent_name": ${other_parties[0].name.full(middle='full')}
    - "respondent_home_check": ${other_parties[0].last_address_known if other_parties[0].address_known == False else other_parties[0].address_known}
    - "respondent_home_address": ${other_parties[0].address.on_one_line(bare=True)}
    - "stalker_birth": |
        % if knows_respondent_dob == 'exact' and other_parties[0].birthdate != "":
        ${ other_parties[0].birthdate }
        % elif knows_respondent_dob == 'some':
        ${ other_parties[0].birthdate_info }
        % else:
        ${ "do not know" }
        % endif
    - "respondent_is_male": ${True if other_parties[0].state_gender == "Male" else False}
    - "respondent_is_female": ${True if other_parties[0].state_gender == "Female" else False}
    - "respondent_other_gender": ${other_parties[0].state_other_gender if other_parties[0].state_gender == "Other" else ""}
    - "respondent_race": ${respondent_race_other if other_parties[0].race == "Other" else other_parties[0].race}
    - "respondent_height": ${(str(other_parties[0].height_feet) + "'" + str(other_parties[0].height_inches)  + "''") if str(other_parties[0].height_feet) != "0" else ""}
    - "respondent_weight": ${other_parties[0].weight if other_parties[0].weight > 0 else ""}
    - "respondent_features": ${other_parties[0].features}
    - "respondent_employer_name": ${ other_parties[0].employer_name if other_parties[0].has_job else ""}
    - "respondent_work_check": ${True if other_parties[0].has_job and other_parties[0].employer_address.on_one_line(bare=True) != "" else False}
    - "respondent_work_address": ${ other_parties[0].employer_address.on_one_line(bare=True) if other_parties[0].has_job else ""}
    - "respondent_work_hours": ${other_parties[0].work_hours if other_parties[0].has_job else ""}
    - "respondent_hair": ${ other_parties[0].hair}
    - "respondent_eyes": ${ other_parties[0].eyes if other_parties[0].eyes != "" else '' }
    - "respondent_ssn": ${other_parties[0].ssn}
    - "respondent_dl": ${other_parties[0].drivers_license}
    - "respondent_plate": ${other_parties[0].license_plate if other_parties[0].has_vehicle else ""}
    - "respondent_other_id_number": ${other_parties[0].another_number if other_parties[0].another_number_check else ""}
    - "respondent_other_id_description": ${other_parties[0].another_number_description if other_parties[0].another_number_check else ""}
    - "just_armed": ${True if caution_reasons['armed'] and not caution_reasons['suicide'] else False}
    - "just_suicidal": ${True if caution_reasons['suicide'] and not caution_reasons['armed'] else False}
    - "armed_and_suicidal": ${True if caution_reasons['suicide'] and caution_reasons['armed'] else False}  
    - "date_incident_1": ${stalking_events[0].name.text}
    - "time_incident_1": ${stalking_events[0].time}
    - "location_incident_1": ${stalking_events[0].place}
    - "description_incident_1": ${stalking_events[0].description}
    - "description_incident_2": |
        % if stalking_events[1].time != "":
        On or about ${stalking_events[1].name.text}, ${stalking_events[1].time}, at ${stalking_events[1].place} the following occurred: ${stalking_events[1].description}
        % else:
        On or about ${stalking_events[1].name.text} at ${stalking_events[1].place} the following occurred: ${stalking_events[1].description}
        % endif
    - "additional_events": |
        % if stalking_events.number_gathered() > 2:
        See attached page for additional incidents
        % endif
    - "petitioner_in_county": ${ jurisdiction_type['I live here']}
    - "respondent_in_county": ${ jurisdiction_type['Respondent lives here']}
    - "acts_in_county":  ${ jurisdiction_type['Abuse was here']}
    - "no_stalking": ${protection_requested['stalking']}
    - "no_contact": ${protection_requested['contacting']}
    - "no_coming": ${protection_requested['away']}
    - "feet_away": ${distance_away}
    - "no_home": ${protected_place_types['Home'] if protection_requested['away'] else False}
    - "no_school_or_daycare": ${True if protection_requested['away'] and (protected_place_types['School'] or protected_place_types['day_care']) else False}
    - "no_workplace": ${protected_place_types['Workplace'] if protection_requested['away'] else False}
    - "no_other_place": ${protected_place_types['Other'] if protection_requested['away'] else False}
    - "other_places_list": ${other_places}
    - "no_firearms": ${other_parties[0].prohibit_firearms}
    - "other_relief_check": ${other_parties[0].anything_else}
    - "other_relief_text": ${other_parties[0].what_else if other_parties[0].anything_else else ""}
    - "e_signature": ${ "/s/ " + users[0].name.full(middle='full') if e_signature else ""}
    - "petitioner_name": ${users[0].name.full(middle='full')}
    - "petitioner_address_line_1": ${ users[0].address.line_one(bare=True)}
    - "petitioner_address_line_2": ${ users[0].address.line_two()}
    - "petitioner_phone": ${ phone_number_formatted(users[0].phone_number)}
    - "petitioner_email": ${users[0].email if users[0].has_email_address else ""}
    - "just_email": ${"Email"}
    - "protected_home_address": ${home.on_one_line(bare=True) if protection_requested['away'] and protected_place_types['Home'] else ""}
    - "protected_work_addresses": ${protected_workplace.name.first + ", " + protected_workplace.address.on_one_line()}
    - "school_daycare_addresses": ${comma_and_list(away_school_daycare_list)}
    - "others_addendum": |
        % if others_protected.number_gathered() > 2:
        A list of additional protected persons is attached.
        % endif
---
attachment:
  variable name: emergency_order[i]
  name: emergency_order
  filename: emergency_order
  skip undefined: True
  editable: False
  pdf template file: Stalking_NCO_Order.pdf
  fields:
    - "circuit_court": ${court_circuit}
    - "filing_county": ${trial_court.address.county}
    - "emergency_type": ${order_type['emergency']}
    - "plenary_type": ${False}
    - "user_name": ${users[0].name.full(middle='full')}
    - "others_protected": ${comma_and_list(others_protected)}
    - "protect_a_minor": ${any_minors}
    - "protect_an_adult": ${any_adults}
    - "behalf_of_names": ${ comma_and_list(others_protected)}
    - "stalker_name": ${ other_parties[0].name.full(middle='full')}
    - "case_number": ${""}
    - "user_address": ${users[0].address.on_one_line(bare=True)}
    - "use_safe_address": ${hide_address}
    - "other_protected_name_1": ${others_protected[0].name.full(middle='full')}
      #LEAPHERE
    - "other_protected_address_1": |
        % if hide_address:
        % if others_protected[0].use_safe_address:       
        ${users[0].address.on_one_line(bare=True)} 
        % endif
        % else:
        ${others_protected[0].address.on_one_line(bare=True)}
        % endif
    - "other_protected_name_2": ${others_protected[1].name.full(middle='full')}
    - "other_protected_address_2": |
        % if hide_address:
        % if others_protected[1].use_safe_address:       
        ${users[0].address.on_one_line(bare=True)} 
        % endif
        % else:
        ${others_protected[1].address.on_one_line(bare=True)}
        % endif
    - "respondent_name": ${other_parties[0].name.full(middle='full')}
    - "respondent_home_check": ${other_parties[0].address_known}
    - "respondent_home_address": ${other_parties[0].address.on_one_line(bare=True)}
    - "stalker_birth": ${other_parties[0].birthdate}
    - "respondent_is_male": ${True if other_parties[0].state_gender == "Male" else False}
    - "respondent_is_female": ${True if other_parties[0].state_gender == "Female" else False}
    - "other_gender": ${other_parties[0].state_other_gender if other_parties[0].state_gender == "Other" else ""}
    - "respondent_race": ${respondent_race_other if other_parties[0].race == "Other" else other_parties[0].race}
    - "respondent_height": ${(str(other_parties[0].height_feet) + "'" + str(other_parties[0].height_inches)  + "''") if str(other_parties[0].height_feet) != "0" else ""}
    - "respondent_weight": ${other_parties[0].weight if other_parties[0].weight > 0 else ""}
    - "respondent_features": ${other_parties[0].features}
    - "respondent_employer_name": ${ other_parties[0].employer_name if other_parties[0].has_job else ""}
    - "respondent_work_check": ${True if other_parties[0].has_job and other_parties[0].employer_address.on_one_line(bare=True) != "" else False}
    - "respondent_work_address": ${ other_parties[0].employer_address.on_one_line(bare=True) if other_parties[0].has_job else ""}
    - "respondent_work_hours": ${other_parties[0].work_hours if other_parties[0].has_job else ""}
    - "respondent_hair": ${ other_parties[0].hair}
    - "respondent_eyes": ${ other_parties[0].eyes if other_parties[0].eyes != "" else '' }
    - "respondent_ssn": ${other_parties[0].ssn}
    - "respondent_dl": ${other_parties[0].drivers_license}
    - "respondent_plate": ${other_parties[0].license_plate if other_parties[0].has_vehicle else ""}
    - "respondent_other_id_number": ${other_parties[0].another_number if other_parties[0].another_number_check else ""}
    - "respondent_other_id_description": ${other_parties[0].another_number_description if other_parties[0].another_number_check else ""}
    #Add questions about an incarcerated respondent?
    - "respondent_jail_check": ${respondent_jail_check}
    - "respondent_jail_name": ${respondent_jail_name}
    - "respondent_address_unknown": ${False if other_parties[0].address_known else True}
    - "armed": ${caution_reasons['armed']}
    - "suicidal": ${caution_reasons['suicide']}
    #What does the Y checkbox on the form mean?
    - "y_check": ${False}
    - "no_stalking": ${protection_requested['stalking']}
    - "no_contact": ${protection_requested['contacting']}
    - "no_coming": ${protection_requested['away']}
    - "feet_distance": ${distance_away if protection_requested['away'] else ""}
    - "away_residence": ${protected_place_types['Home'] if protection_requested['away'] else False}
    - "away_school_day_care": |
        % if protection_requested['away']:
        % if protected_place_types['day_care'] or protected_place_types['School']:
        ${True}
        % else:
        ${False}
        % endif
        % else:
        ${False}
        % endif
    - "away_workplace": ${protected_place_types['Workplace'] if protection_requested['away'] else False}
    - "away_other_check": ${protected_place_types['Other'] if protection_requested['away'] else False}
    - "protected_home_address": ${home.on_one_line(bare=True) if protection_requested['away'] and protected_place_types['Home'] else ""}
    - "protected_work_address": ${protected_workplace.name.first + ", " + protected_workplace.address.on_one_line() if protection_requested['away'] and protected_place_types['Workplace'] else ""}
    - "protected_school_day_care_addresses": |
        % if protection_requested['away']:
        % if protected_place_types['day_care'] or protected_place_types['School']:
        ${comma_and_list(away_school_daycare_list)}
        % endif
        % endif
    - "other_places": ${other_places if protection_requested['away'] and protected_place_types['Other'] else ""}
    - "no_firearms": ${other_parties[0].prohibit_firearms}
    - "other_relief_check": ${other_parties[0].anything_else}
    - "other_relief_text": ${other_parties[0].what_else if other_parties[0].anything_else else ""}
---
attachment:
  variable name: plenary_order[i]
  name: plenary_order
  filename: plenary_order
  skip undefined: True
  editable: False
  pdf template file: Stalking_NCO_Order.pdf
  fields:
    - "circuit_court": ${court_circuit}
    - "filing_county": ${trial_court.address.county}
    - "emergency_type": ${False}
    - "plenary_type": ${order_type['emergency']}
    - "user_name": ${users[0].name.full(middle='full')}
    - "others_protected": ${comma_and_list(others_protected)}
    - "protect_a_minor": ${any_minors}
    - "protect_an_adult": ${any_adults}
    - "behalf_of_names": ${ comma_and_list(others_protected)}
    - "stalker_name": ${ other_parties[0].name.full(middle='full')}
    - "case_number": ${""}
    - "user_address": ${users[0].address.on_one_line(bare=True)}
    - "use_safe_address": ${hide_address}
    - "other_protected_name_1": ${others_protected[0].name.full(middle='full')}
    - "other_protected_address_1": |
        % if hide_address:
        % if others_protected[0].use_safe_address:       
        ${users[0].address.on_one_line(bare=True)} 
        % endif
        % else:
        ${others_protected[0].address.on_one_line(bare=True)}
        % endif
    - "other_protected_name_2": ${others_protected[1].name.full(middle='full')}
    - "other_protected_address_2": |
        % if hide_address:
        % if others_protected[1].use_safe_address:       
        ${users[0].address.on_one_line(bare=True)} 
        % endif
        % else:
        ${others_protected[1].address.on_one_line(bare=True)}
        % endif
    - "respondent_name": ${other_parties[0].name.full(middle='full')}
    - "respondent_home_check": ${other_parties[0].address_known}
    - "respondent_home_address": ${other_parties[0].address.on_one_line(bare=True)}
    - "stalker_birth": ${other_parties[0].birthdate}
    - "respondent_is_male": ${True if other_parties[0].state_gender == "Male" else False}
    - "respondent_is_female": ${True if other_parties[0].state_gender == "Female" else False}
    - "other_gender": ${other_parties[0].state_other_gender if other_parties[0].state_gender == "Other" else ""}
    - "respondent_race": ${respondent_race_other if other_parties[0].race == "Other" else other_parties[0].race}
    - "respondent_height": ${(str(other_parties[0].height_feet) + "'" + str(other_parties[0].height_inches)  + "''") if str(other_parties[0].height_feet) != "0" else ""}
    - "respondent_weight": ${other_parties[0].weight if other_parties[0].weight > 0 else ""}
    - "respondent_features": ${other_parties[0].features}
    - "respondent_employer_name": ${ other_parties[0].employer_name if other_parties[0].has_job else ""}
    - "respondent_work_check": ${True if other_parties[0].has_job and other_parties[0].employer_address.on_one_line(bare=True) != "" else False}
    - "respondent_work_address": ${ other_parties[0].employer_address.on_one_line(bare=True) if other_parties[0].has_job else ""}
    - "respondent_work_hours": ${other_parties[0].work_hours if other_parties[0].has_job else ""}
    - "respondent_hair": ${ other_parties[0].hair}
    - "respondent_eyes": ${ other_parties[0].eyes if other_parties[0].eyes != "" else '' }
    - "respondent_ssn": ${other_parties[0].ssn}
    - "respondent_dl": ${other_parties[0].drivers_license}
    - "respondent_plate": ${other_parties[0].license_plate if other_parties[0].has_vehicle else ""}
    - "respondent_other_id_number": ${other_parties[0].another_number if other_parties[0].another_number_check else ""}
    - "respondent_other_id_description": ${other_parties[0].another_number_description if other_parties[0].another_number_check else ""}
    #Add questions about an incarcerated respondent?
    - "respondent_jail_check": ${respondent_jail_check}
    - "respondent_jail_name": ${respondent_jail_name}
    - "respondent_address_unknown": ${False if other_parties[0].address_known else True}
    - "armed": ${caution_reasons['armed']}
    - "suicidal": ${caution_reasons['suicide']}
    #What does the Y checkbox on the form mean?
    - "y_check": ${False}
    - "no_stalking": ${protection_requested['stalking']}
    - "no_contact": ${protection_requested['contacting']}
    - "no_coming": ${protection_requested['away']}
    - "feet_distance": ${distance_away if protection_requested['away'] else ""}
    - "away_residence": ${protected_place_types['Home'] if protection_requested['away'] else False}
    - "away_school_day_care": |
        % if protection_requested['away']:
        % if protected_place_types['day_care'] or protected_place_types['School']:
        ${True}
        % else:
        ${False}
        % endif
        % else:
        ${False}
        % endif
    - "away_workplace": ${protected_place_types['Workplace'] if protection_requested['away'] else False}
    - "away_other_check": ${protected_place_types['Other'] if protection_requested['away'] else False}
    - "protected_home_address": ${home.on_one_line(bare=True) if protection_requested['away'] and protected_place_types['Home'] else ""}
    - "protected_work_address": ${protected_workplace.name.first + ", " + protected_workplace.address.on_one_line() if protection_requested['away'] and protected_place_types['Workplace'] else ""}
    - "protected_school_day_care_addresses": |
        % if protection_requested['away']:
        % if protected_place_types['day_care'] or protected_place_types['School']:
        ${comma_and_list(away_school_daycare_list)}
        % endif
        % endif
    - "other_places": ${other_places if protection_requested['away'] and protected_place_types['Other'] else ""}
    - "no_firearms": ${other_parties[0].prohibit_firearms}
    - "other_relief_check": ${other_parties[0].anything_else}
    - "other_relief_text": ${other_parties[0].what_else if other_parties[0].anything_else else ""}
---
# attachment:
#  variable name: snco_summons[i]
#  name: snco_summons
#  filename: snco_summons
#  skip undefined: True
#  editable: False
#  pdf template file: Stalking_NCO_Summons.pdf
#  fields:
#    - "circuit_court": ${court_circuit}
#    - "filing_county": ${trial_court.address.county}
#    - "user_name": ${users[0].name.full(middle='full')}
#    - "protect_a_minor": ${any_minors}
#    - "protect_an_adult": ${any_adults}
#    - "others_protected": ${ comma_and_list(others_protected)}
#    - "behalf_of_names": ${ comma_and_list(others_protected)}
#    - "stalker_name": ${ other_parties[0].name.full(middle='full')}
#    - "main_service_address": ${other_parties[0].service_address.on_one_line(bare=True)}
#    - "independent": ${False}
#    - "criminal": ${False}
#    - "juvenile": ${False}
#    - "petitioner_name": ${users[0].name.full(middle='full')}
#    - "petitioner_phone": ${ phone_number_formatted(users[0].phone_number) }
#    - "petitioner_address_line_1": ${ users[0].address.line_one(bare=True) }
#    - "petitioner_address_line_2": ${ users[0].address.line_two() }
---
attachment:
  variable name: op_summons[i]
  name: op_summons
  filename: op_summons
  skip undefined: True
  editable: False
  pdf template file: op_summons.pdf
  fields:
    - "county__1": ${ trial_court.address.county.upper() }
    - "county__2": ${ trial_court.address.county.upper() }
    - "petitioner__1": ${ users[0].name.full(middle="full") }
    - "petitioner__2": ${ users[0].name.full(middle="full") }
    - "petitioner__3": ${ users[0].name.full(middle="full") }
    - "respondent__1": ${other_parties[0].name.full(middle="full")}
    - "respondent__4": ${other_parties[0].name.full(middle="full")}
    - "case_number__1": ${ case_number }
    - "case_number__2": ${ case_number }
    - "case_number__3": ${ case_number }
    - "respondent__2": ${other_parties[0].name.full(middle="full")}
    - "service_address_line_1": |
        % if other_parties[0].which_address == "add_service_address":
        ${other_parties[0].service_address.line_one(bare=True)}
        % elif other_parties[0].which_address == "home_address":
        ${other_parties[0].address.line_one(bare=True)}
        % elif other_parties[0].which_address == "employer_address":
        ${other_parties[0].employer_address.line_one(bare=True)}
        % endif
    - "service_address_csz": |
        % if other_parties[0].which_address == "add_service_address":
        ${other_parties[0].service_address.line_two()}
        % elif other_parties[0].which_address == "home_address":
        ${other_parties[0].address.line_two()}
        % elif other_parties[0].which_address == "employer_address":
        ${other_parties[0].employer_address.line_two()}
        % endif
    - "respondent_phone": ${phone_number_formatted(other_parties[0].mobile_number) if trial_court_index == -1 and other_parties[0].phone_number == "" else phone_number_formatted(other_parties[0].phone_number)}
    - "respondent_email": ${ other_parties[0].email_address }
    - "respondent__3": ${other_parties[0].name.full(middle="full") if other_parties[0].bonus_service_check == True else ""}
    - "service_alt_address_line_1": |
        % if other_parties[0].bonus_service_check:
        % if other_parties[0].which_bonus_address == "home_address":
        ${other_parties[0].address.line_one(bare=True)}
        % elif other_parties[0].which_bonus_address == "employer_address":
        ${other_parties[0].employer_address.line_one(bare=True)}
        % elif other_parties[0].which_bonus_address == "service_address":
        ${other_parties[0].bonus_service_address.line_one(bare=True)}
        % endif
        % endif
    - "service_alt_address_csz": |
        % if other_parties[0].bonus_service_check:
        % if other_parties[0].which_bonus_address == "home_address":
        ${other_parties[0].address.line_two()}
        % elif other_parties[0].which_bonus_address == "employer_address":
        ${other_parties[0].employer_address.line_two()}
        % elif other_parties[0].which_bonus_address == "service_address":
        ${other_parties[0].bonus_service_address.line_two()}
        % endif
        % endif
    - "respondent_alt_phone": ${ phone_number_formatted(other_parties[0].alt_phone) if other_parties[0].bonus_contact_info == True else "" }
    - "respondent_alt_email": ${ other_parties[0].alt_email if other_parties[0].bonus_contact_info == True else "" }
    - "service_method_sheriff": ${ True if service_method == "sheriff" and service_state == "IL" else ""}
    - "service_method_sheriff_outside_il": ${ True if service_method == "sheriff" and service_state != "IL" else ""}
    - "service_location_outside_il": |
        % if service_method == "sheriff" and service_state != "IL":
        ${ service_county + ", " + service_state }
        % endif
    - "service_method_sps": ${ True if service_method == "sps" else "" }
    - "service_method_detective": ${ True if service_method == "detective" else "" }
    - "protective_order_type_snco": ${ True }
    - "court_date_on_attached": ${ True }
    - "show_address": ${ not hide_address }
    - "hide_address": ${ hide_address }
    - "user_mail_address_line_one": ${ users[0].address.line_one(bare=True) }
    - "user_mail_address_city_state_zip": ${ users[0].address.line_two() }
    - "user_phone_number": ${ phone_number_formatted(users[0].phone_number) }
    - "user_email": ${ users[0].email if users[0].has_email_address else ""}
---
section: People you want to protect
id: petitioner review screen
event: section_petitioner
question: |
  People you want to protect
subquestion: |
  Edit your answers below.
review:
  - Edit: protect_whom
    button: |
      **Who do you want to protect?**
      
      % if protect_whom['me']:
      * Myself
      % endif
      % if protect_whom['minor']:
      * A minor child
      % endif
      % if protect_whom['adult']:
      * An adult who cannot file due to age, disablility or health
      % endif
  - Edit: users[0].name.first
    button: |
      **Your name:**
      ${users[0].name.full(middle='full')}
  - Edit: users[0].phone_number
    button: |
      **Your safe phone number:**
      ${phone_number_formatted(users[0].phone_number)}
  - Edit: users[0].has_email_address
    button: |
      **Do you have an email address?**
      ${word(yesno(users[0].has_email_address))}
  - Edit: users[0].email    
    button: |
      **Your email address:**
      ${users[0].email}
    show if: users[0].has_email_address
  - Edit: other_parties[0].name.first
    button: |  
      **Stalker's name:**
      ${other_parties[0].name.full(middle='full')}
  - Edit: hide_address
    button: |
      **Do you want to keep your home address hidden?**
      ${word(yesno(hide_address))}
  - Edit: users[0].address.address
    button: |
      % if hide_address:
      **Your mailing address:**
      % else:
      **Your address:**
      % endif
      ${users[0].address.on_one_line(bare=True)}
  - Edit: user_relationship
    button: |
      **How are you related to the person you are filing the Stalking No Contact Order against?**
      
      % if user_relationship['unrelated']:
      * We are not related.
      % endif
      % if user_relationship['dated']:
      * We dated.
      % endif
      % if user_relationship['marriage']:
      * We are related through current or past marriage.
      % endif
      % if user_relationship['children']:
      * We have children together.
      % endif
      % if user_relationship['blood']:
      * We are related through blood.
      % endif
      % if user_relationship['blood_child']:
      * We have a blood relationship through a child.
      % endif
      % if user_relationship['home']:
      We share or have shared a home.
      % endif
      % if user_relationship['adopt_child']:
      * We have a family or household relationship through a child I am the adoptive parent, legal guardian, or custodian of.
      % endif
      % if user_relationship['caregiver']:
      * They are my personal caregiver.
      % endif
  - Edit: users[0].birthdate
    button: |
      **Your birth date:**
      ${users[0].birthdate}
  - Edit: others_protected.there_are_any
    button: |
      **Do you want the Stalking No Contact Order to protect anyone else?**
      ${word(yesno(others_protected.there_are_any))}
  - Edit: others_protected.revisit
    button: |
      **Others to protect: (Edit to change names, addresses, and other information)**

      % for my_var in others_protected:
        * ${ my_var.name.full(middle="full") }
      % endfor
    show if: others_protected.there_are_any
---
id: others protected review screen
continue button field: others_protected.revisit
question: |
    Edit the others you want the SNCO to protect
subquestion: |
  ${ others_protected.table }

  ${ others_protected.add_action() }
---
table: others_protected.table
rows: others_protected
columns:
  - Name: |
      row_item.name.full(middle="full") if defined("row_item.name.first") else ""
  - Address, birth date, additional information: |
      action_button_html(url_action(row_item.attr_name("others_protected_info")), label="Edit", icon="pencil-alt")
delete buttons: True
confirm: True
---
id: other protected info review screen
continue button field: x.others_protected_info
generic object: ALIndividual
question: |
  Edit ${ x.name.full(middle="full") }'s information
review: 
  - Edit: x.name.first
    button: |
      **Name of person to protect:**
      ${x.name.full(middle='full')}
  - Edit: x.birth
    button: |
      **${x.name.full(middle='full')}'s birth date:**
      ${x.birth}
  - Edit: x.is_survivor
    button: |
      **Was ${x.name.full(middle='full')} stalked?**
      ${word(yesno(x.is_survivor))}
  - Edit: x.protection_reason
    button: |
      **Why are you including ${x.name.full(middle='full')} in the Stalking No Contact Order?**
      ${x.protection_reason}
    show if: trial_court.address.county.lower() == "cook" and not x.is_survivor
  - Edit: x.use_safe_address
    button: |
      **Do you want to use the safe mailing address for ${x.name.full(middle='full')}?**
      ${word(yesno(x.use_safe_address))}
    show if: hide_address
  - Edit: x.address.address
    button: |
      **${x.name.full(middle='full')}'s address:**
      ${x.address.on_one_line(bare=True)}
    show if: not hide_address or not x.use_safe_address
---
section: Person you want protection from
id: respondent review screen
event: section_respondent
question: |
  About the person you want protection from
subquestion: |
  Edit your answers below.
review:
  - Edit: other_parties[0].name.first
    button: |  
      **Stalker's name:**
      ${other_parties[0].name.full(middle='full')}
  - Edit: other_parties[0].state_gender
    button: |
      **${other_parties[0].name.full(middle='full')}'s gender:**
      % if other_parties[0].state_gender == "Other":
      ${other_parties[0].state_other_gender}
      % else:
      ${other_parties[0].state_gender}
      % endif
    show if: trial_court_index != -1
  - Edit: other_parties[0].cook_sex
    button: |
      **${other_parties[0].name.full(middle='full')}'s sex:**
      % if other_parties[0].cook_sex == "other":
      ${other_parties[0].cook_sex_other}
      % else:
      ${other_parties[0].cook_sex}
      % endif
    show if: trial_court_index == -1
  - Edit: other_parties[0].respondent_sex_at_birth
    button: |
      **${other_parties[0].name.full(middle='full')}'s sex assigned at birth:**
      *${respondent_sex_at_birth}
    show if: trial_court_index == -1
  - Edit: other_parties[0].cook_gender
    button: |
      **${other_parties[0].name.full(middle='full')}'s gender identity:**
      
      % if other_parties[0].cook_gender == "male":
      * Male
      % endif
      % if other_parties[0].cook_gender == "female":
      * Female
      % endif
      % if other_parties[0].cook_gender == "transfem":
      * Transgender woman / Transfeminine
      % endif
      % if other_parties[0].cook_gender == "transmasc":
      * Transgender man / Transmasculine
      % endif
      % if other_parties[0].cook_gender == "nonbinary":
      * Nonbinary / Gender non-conforming
      % endif
      % if other_parties[0].cook_gender == "other":
      * ${respondent_cook_gender_other}
      % endif
    show if: trial_court_index == -1
  - Edit: other_parties[0].race
    button: |
      **${other_parties[0].name.full(middle='full')}'s race:**
      % if other_parties[0].race == "Other":
      ${respondent_race_other}
      % else:
      ${other_parties[0].race}
      % endif
  - Edit: other_parties[0].skin
    button: |
      **${other_parties[0].name.full(middle='full')}'s skin tone:**
      % if other_parties[0].skin_tone == "Other":
      ${respondent_skin_other}
      % else:
      ${other_parties[0].skin}
      % endif
  - Edit: other_parties[0].other_names.there_are_any
    button: |
      **Has ${other_parties[0].name.full(middle='full')} gone by any other names?**
      ${word(yesno(other_parties[0].other_names.there_are_any))}
  - Edit: other_parties[0].other_names.revisit
    button: |
      **${other_parties[0].name.full(middle='full')}'s other names:**
      
      % for my_var in other_parties[0].other_names:
        * ${ my_var.name.full(middle="full") }
      % endfor
  - Edit: other_parties[0].ssn
    button: |
      **The last 4 digits of ${other_parties[0].name.full(middle='full')}'s Social Security Number:**
      % if other_parties[0].ssn == "":
      I don't know
      % else:
      ${other_parties[0].ssn}
      % endif
  - Edit: knows_respondent_dob
    button: |
      **${other_parties[0].name.full(middle='full')}'s birth date:**
      % if knows_respondent_dob == "exact":
      ${other_parties[0].birthdate}
      % elif knows_respondent_dob == "some":
      ${other_parties[0].birthdate_info}
      % else:
      I don't know
      % endif
  - Edit: other_parties[0].weight
    button: |
      **${other_parties[0].name.full(middle='full')}'s height and weight:**
      % if other_parties[0].height_feet != "" and other_parties[0].height_inches != "":
      % if other_parties[0].weight != "":
      ${other_parties[0].height_feet} feet ${other_parties[0].height_inches} inches, ${other_parties.weight} pounds
      % else:
      ${other_parties[0].height_feet} feet ${other_parties[0].height_inches} inches
      % endif
      % else:
      % if other_parties[0].weight != "":
      ${other_parties.weight} pounds
      % else:
      I don't know
      % endif
      % endif
  - Edit: other_parties[0].eyes
    button: |
      **${other_parties[0].name.full(middle='full')}'s eye color:**
      ${other_parties[0].eyes}
  - Edit: other_parties[0].glasses
    button: |
      **Does ${other_parties[0].name.full(middle='full')} wear glasses?**
      % if other_parties[0].glasses == "sometimes":
      Sometimes
      % elif other_parties[0].glasses == "dont_know":
      I don't know
      % else:
      ${word(yesno(other_parties[0].glasses))}
      % endif
  - Edit: other_parties[0].hair
    button: |
      **${other_parties[0].name.full(middle='full')}'s hair color:**
      ${other_parties[0].hair}
  - Edit: other_parties[0].features
    button: |
      **${other_parties[0].name.full(middle='full')}'s notable features:**
      % if other_parties[0].features == "":
      I don't know
      % else:
      ${other_parties[0].features}
      % endif
  - Edit: other_parties[0].drivers_license
    button: |
      **${other_parties[0].name.full(middle='full')}'s driver's license number:**
      % if other_parties[0].drivers_license == "":
      I don't know
      % else:
      ${other_parties[0].drivers_license}
      % endif
  - Edit: other_parties[0].has_vehicle
    button: |  
      **Does ${other_parties[0].name.full(middle='full')} have a vehicle?**
      ${word(yesno(other_parties[0].has_vehicle))}
  - Edit: other_parties[0].license_plate
    button: |
      **${other_parties[0].name.full(middle='full')}'s vehicle information:**
      
      % if other_parties[0].vehicle_year == "":
      * Year: I don't know
      % else:
      * Year: %{other_parties[0].vehicle_year}
      % endif
      % if other_parties.vehicle_make == "":
      * Make: I don't know
      % else:
      * Make: ${other_parties[0].vehicle_make}
      % endif
      % if other_parties[0].vehicle_model == "":
      * Model: I don't know
      % else:
      * Model: ${other_parties[0].vehicle_model}
      % endif
      % if other_parties.vehicle_cololr == "":
      * Color: I don't know
      % else:
      * Color: ${other_parties[0].vehicle_color}
      % endif
      % if other_parties[0].license_plate == "":
      * License plate number: I don't know
      % else:
      * License plate number: ${other_parties[0].license_plate}
      % endif
      % if other_parties[0].vehicle_state == "":
      * State: I don't know
      % else:
      * State: ${other_parties[0].vehicle_state}
      % endif
    show if: other_parties[0].has_vehicle
  - Edit: other_parties[0].another_number_check
    button: |
      **Do you know another number that can identify ${other_parties[0].name.full(middle='full')}?**
      ${word(yesno(other_parties[0].another_number_check))}
  - Edit: other_parties[0].another_number
    button: |
      **${other_parties[0].name.full(middle='full')} other identifying number:**
      ${other_parties[0].another_number}, ${other_parties[0].another_number_description}
    show if: other_parties[0].another_number_check
  - Edit: other_parties[0].phone_number
    button: |
      **${other_parties[0].name.full(middle="full")}'s home phone number:**
      % if other_parties[0].phone_number != "":
      ${ phone_number_formatted(other_parties[0].phone_number) }      
      % else:
      ${ "do not know" }
      % endif
  - Edit: other_parties[0].mobile_number
    button: |
      **${other_parties[0].name.full(middle="full")}'s cell number:**
      % if other_parties[0].mobile_number != "":
      ${ phone_number_formatted(other_parties[0].mobile_number) }      
      % else:
      ${ "do not know" }
      % endif    
  - Edit: other_parties[0].email_address
    button: |
      **${other_parties[0].name.full(middle='full')}'s email address:**
      % if other_parties[0].email_address == "":
      I don't know
      % else:
      ${other_parties[0].email_address}
      % endif
  - Edit: other_parties[0].bonus_contact_info
    button: |
      **Do you want to include additional contact information  for ${other_parties[0].name.full(middle='full')}?**
      ${word(yesno(other_parties[0].bonus_contact_info))}
    show if: other_parties[0].email_address != "" or other_parties[0].phone_number != "" or other_parties[0].mobile_number != ""
  - Edit: other_parties[0].alt_email
    button: |
      **${other_parties[0].name.full(middle='full')}'s additional contact information:**
      
      % if other_parties[0].alt_email != "":
      * Email: ${other_parties[0].alt_email}
      % endif
      % if other_parties[0].alt_phone != "":
      * Phone: ${phone_number_formatted(other_parties[0].alt_phone)}
      % endif
    show if: (other_parties[0].email_address != "" or other_parties[0].phone_number != "" or other_parties[0].mobile_number != "") and other_parties[0].bonus_contact_info
  - Edit: respondent_on_social_media
    button: |
      **Is ${other_parties[0].name.full(middle="full")} active on social media?**
      ${ respondent_on_social_media }      
  - Edit: respondent_social_media_accounts
    button: |
      **${other_parties[0].name.full(middle="full")}'s social media accounts:**
      ${ respondent_social_media_accounts }
    show if: respondent_on_social_media == 'Yes'

  - Edit: other_parties[0].address_known
    button: | 
      **Do you know ${other_parties[0].name.full(middle='full')}'s current home address?**
      ${word(yesno(other_parties[0].address_known))}
  - Edit: other_parties[0].last_address_known
    button: |
      **Do you know ${other_parties[0].name.full(middle='full')}'s last known address?**
      ${word(yesno(other_parties[0].last_address_known))}
    show if: other_parties[0].address_known == False
  - Edit: other_parties[0].address.address
    button: |
      % if other_parties[0].address_known:
      **${other_parties[0].name.full(middle='full')}'s current home address:**
      % elif other_parties[0].last_address_known:
      **${other_parties[0].name.full(middle='full')}'s last known address:**
      % else:
      **${other_parties[0].name.full(middle='full')}'s address:**
      % endif
      ${other_parties[0].address.on_one_line(bare=True)}
    show if: other_parties[0].address_known or other_parties[0].last_address_known
  - Edit: other_parties[0].has_job
    button: |
      **Does ${other_parties[0].name.full(middle='full')} have a job?**
      ${word(yesno(other_parties[0].has_job))}
  - Edit: other_parties[0].employer_name
    button: |
      **${other_parties[0].name.full(middle='full')}'s job information:**
      
      * Employer name: ${showifdef('other_parties[0].employer_name')}
      * Occupation: ${showifdef('respondent_work_type')}
      * Standard work hours: ${showifdef('other_parties[0].work_hours')}
      * Address: ${other_parties[0].employer_address.on_one_line(bare=True)}
    show if: other_parties[0].has_job
  - Edit: caution_reasons
    button: |
        % if caution_reasons.any_true():
        **${other_parties[0].name.full(middle='full')} should be approached with caution because...**
        
        % if caution_reasons['illness']:
        * They have a history of mental illness.
        % endif
        % if caution_reasons['suicide']:
        * They are a suicide risk.
        % endif
        % if caution_reasons['alcohol']:
        * They are likely to be under the influence of alcohol.
        % endif
        % if caution_reasons['drugs']:
        * They are likely to be under the influence of drugs.
        % endif
        % if caution_reasons['armed']:
        * They are likely to carry a weapon.
        % endif
        % if caution_reasons['home']:
        * They have weapons in their home.
        % endif
        % else:
        **${other_parties[0].name.full(middle='full')} does not need to be approached with caution.**
        % endif
  - Edit: other_parties[0].weapons_info
    button: |
      **What weapons does ${other_parties[0].name.full(middle='full')} have?**
      % if other_parties[0].weapons_info == "":
      I don't know
      % else:
      ${other_parties[0].weapons_info}
      % endif
    show if: caution_reasons['armed'] or caution_reasons['home']
  - Edit: other_parties[0].divorced_user
    button: |
      **Are you and ${other_parties[0].name.full(middle='full')} divorced?**
      ${word(yesno(other_parties[0].divorced_user))}
  - Edit: other_parties[0].divorce_date
    button: |
      **Divorce case information:**
      
      * Date filed: ${other_parties[0].divorce_date}
      * Case number: ${other_parties[0].divorce_number}
      * Judge: ${other_parties[0].divorce_judge}
    show if: other_parties[0].divorced_user
  - Edit: other_parties[0].parentage_action
    button: |
      **Have you and ${other_parties[0].name.full(middle='full')} filed a parentage action?**
      ${word(yesno(other_parties[0].parentage_action))}
  - Edit: other_parties[0].parentage_date
    button: |
      **Parentage case information:**
      
      * Date filed: ${other_parties[0].parentage_date}
      * Case number: ${other_parties[0].parentage_number}
      * Judge: ${other_parties[0].parentage_judge} 
    show if: other_parties[0].parentage_action
  - Edit: other_parties[0].order_of_protection
    button: |
      **Is there an Order of Protection against ${other_parties[0].name.full(middle='full')}?**
      ${word(yesno(other_parties[0].order_of_protection))}
  - Edit: other_parties[0].op_state
    button: |
      **Where was the Order of Protection issued?**
      % if other_parties[0].op_state == "IL":
      % if other_parties[0].op_in_state_county == "":
      ${other_parties[0].op_state}
      % else:
      ${end_in_county(other_parties[0].op_in_state_county)}, ${other_parties[0].op_state}
      % endif
      % if other_parties[0].op_out_state_county == "":
      ${other_parties[0].op_state}
      % else:
      ${end_in_county(other_parties[0].op_out_state_county)}, ${other_parties[0].op_state}
      % endif
      % endif
    show if: other_parties[0].order_of_protection
  - Edit: respondent_on_probation
    button: |
      **Is ${other_parties[0].name.full(middle="full")} on probation?**
      % if respondent_on_probation == "idk":
      I don't know
      % elif respondent_on_probation == "Yes":
      Yes, in ${end_in_county(respondent_probation_county)}
      % else:
      No
      % endif  
---
id: stalker other names review screen
continue button field: other_parties[0].other_names.revisit
question: |
    Edit ${other_parties[0].name.full(middle='full')}'s other names
subquestion: |
  ${ other_parties[0].other_names.table }
  % if other_parties[0].other_names.number_gathered() < 4:
  
  ${ other_parties[0].other_names.add_action() }
  % endif
---
table: other_parties[0].other_names.table
rows: other_parties[0].other_names
columns:
  - Name: |
      row_item.name.full(middle="full") if defined("row_item.name.first") else ""
  - Edit: |
      action_button_html(url_action(row_item.attr_name("review_other_names")), label="Edit", icon="pencil-alt")
delete buttons: True
confirm: True
---
id: stalker other name info review screen
continue button field: x.review_other_names
generic object: ALIndividual
question: |
  Edit the name ${ x.name.full(middle="full") }
review: 
  - Edit: x.name.first
    button: |
      **${other_parties[0].name.full(middle='full')}'s other name:**
      ${x.name.full(middle='full')}
---
section: What happened
id: incidents review screen
event: section_incidents
question: |
  About what happened
subquestion: |
  Edit your answers below.
  
  ${ stalking_events.table }
  % if stalking_events.number_gathered() < 9:
  
  ${ stalking_events.add_action() }
  % endif
review:
  - Edit: users[0].name.first
    button: |
      This should not appear
    show if: users[0].name.middle == "This should not appear. This is just so this section page can function as a section page even though all the editing occurs in a table in the subquestion."
---
continue button field: stalking_events.revisit
question: |
    Edit the stalking events
subquestion: |
  ${ stalking_events.table }

  ${ stalking_events.add_action() }
---
table: stalking_events.table
rows: stalking_events
columns:
  - Date: |
      row_item.name.text if defined("row_item.name.text") else ""
  - Place, time, and additional information: |
      action_button_html(url_action(row_item.attr_name("review_events")), label="Edit", icon="pencil-alt")
delete buttons: True
confirm: True
---
id: incident review screen
continue button field: x.review_events
generic object: Thing
question: |
  Edit the stalking incident
review: 
  - Edit: x.name.text
    button: |
      **When did the stalking event take place?**
      % if x.time != "":
      
      * Date: ${x.name.text}
      * Time: ${x.time}
      % else:
      ${x.name.text}
      % endif
  - Edit: x.place
    button: |
      **Where did the stalking event take place?**
      ${x.place}
  - Edit: x.description
    button: |
      **What happened?**
      ${x.description}
  - Edit: x.police_check
    button: |
      **Was a police report filed?**
      ${word(yesno(x.police_check))}
  - Edit: x.police_number
    button: |
      **Police report number:**
      ${x.police_number}
    show if: x.police_check
---
section: Protections
id: protections review screen
event: section_protections
question: |
  Protections
subquestion: |
  Edit your answers below.
review:
  - Edit: order_type
    button: |
      **What type of SNCO do you want?**
      % if order_type['plenary'] and order_type['emergency']:
      Plenary Stalking No Contact Order and Emergency Stalking No Contact Order
      % elif order_type['plenary']:
      Plenary Stalking No Contact Order
      % elif order_type['emergency']:
      Emergency Stalking No Contact Order
      % else:
      None
      % endif
  - Edit: emergency_reason
    button: |
      **Why should the court grant an Emergency SNCO?**
      ${emergency_reason}
    show if: order_type['emergency'] and trial_court.address.county.lower() == "cook"
  - Edit: protection_requested
    button: |
      **What do you want ${other_parties[0].name.full(middle='full')} to stop doing?**
      
      % if protection_requested['stalking']:
      * Stop stalking and threatening me, my family and household members, and stop enlisting other people to stalk or threaten
      % endif
      % if protection_requested['contacting']:
      * Stop contacting me, my family and household members whether in person, by phone, by e-mail, by note or by sending messages through other people
      % endif
      % if protection_requested['away']:
      * Stay away from the locations of me and my family and household members' home, work, school, or daycare
      % endif
  - Edit: distance_away
    button: |
      **How far should ${other_parties[0].name.full(middle='full')} stay away?**
      ${distance_away} feet
    show if: protection_requested['away']
  - Edit: protected_place_types
    button: |
      **What kinds of places do you want ${other_parties[0].name.full(middle='full')} to stay away from?**
      
      % if protected_place_types['Home']:
      * Home
      % endif
      % if protected_place_types['Workplace']:
      * Workplace
      % endif
      % if protected_place_types['School']:
      * School
      % endif
      % if protected_place_types['day_care']:
      * Daycare
      % endif
      % if protected_place_types['Other']:
      * Other
      % endif
    show if: protection_requested['away']
  - Edit: home.address
    button: |
      **Your home address:**
      ${home.on_one_line(bare=True)}
    show if: protection_requested['away'] and protected_place_types['Home'] and hide_address
  - Edit: users[0].address
    button: |
      **Your home address:**
      ${users[0].address.on_one_line(bare=True)}
    show if: protection_requested['away'] and protected_place_types['Home'] and not hide_address
  #- Edit: employers_schools.revisit
  #  button: |
  #    **Workplaces, schools, and daycares:**
  #    
  #    % for my_var in employers_schools:
  #      * ${ my_var.name.first }
  #    % endfor
  #  show if: protection_requested['away'] and (protected_place_types['Workplace'] or protected_place_types['School'] or protected_place_types['day_care'])
  - Edit: protected_workplace.name.first
    button: |
      **The workplace ${other_parties[0].name.full(middle='full')} should stay away from:**
      ${protected_workplace.name.first}, ${protected_workplace.address.on_one_line()}
    show if: protection_requested['away'] and protected_place_types['Workplace']
  - Edit: protected_school.name.first
    button: |
      **The school ${other_parties[0].name.full(middle='full')} should stay away from:**
      ${protected_school.name.first}, ${protected_school.address.on_one_line()}
    show if: protection_requested['away'] and protected_place_types['School']
  - Edit: protected_day_care.name.first
    button: |
      **The daycare ${other_parties[0].name.full(middle='full')} should stay away from:**
      ${protected_day_care.name.first}, ${protected_day_care.address.on_one_line()}
    show if: protection_requested['away'] and protected_place_types['day_care']
  - Edit: other_places
    button: |
      **What other places do you want ${other_parties[0].name.full(middle='full')} to stay away from?**
      ${other_places}
    show if: protection_requested['away'] and protected_place_types['Other']
  - Edit: live_with_stalker
    button: |
      **Does ${other_parties[0].name.full(middle='full')} live with you?**
      ${word(yesno(live_with_stalker))}
    show if: trial_court.address.county.lower() == "cook"
  - Edit: school_with_stalker
    button: |
      **Does ${other_parties[0].name.full(middle='full')} go to the same school as you?**
      ${word(yesno(school_with_stalker))}
    show if: trial_court.address.county.lower() == "cook"
  #- Edit: which_stalker_school
  #  button: |
  #    **Which school do you and ${other_parties[0].name.full(middle='full')} go to?**
  #    ${which_stalker_school}
  #  show if: trial_court.address.county.lower() == "cook" and school_list.number_gathered() > 1
  - Edit: work_with_stalker
    button: |
      **Does ${other_parties[0].name.full(middle='full')} work at the same place as you?**
      ${word(yesno(work_with_stalker))}
    show if: trial_court.address.county.lower() == "cook"
  #- Edit: which_stalker_work
  #  button: |
  #    **Where do you and ${other_parties[0].name.full(middle='full')} both work?**
  #    ${which_stalker_work}
  #  show if: trial_court.address.county.lower() == "cook" and work_list.number_gathered() > 1
  - Edit: other_parties[0].prohibit_firearms
    button: |
      **Do you want to stop ${other_parties[0].name.full(middle='full')} from having firearms or a Firearms Owner Identification Card?**
      ${word(yesno(other_parties[0].prohibit_firearms))}
  - Edit: other_parties[0].anything_else
    button: |
      **Do you want the court to make ${other_parties[0].name.full(middle='full')} to do or stop doing anything else?**
      ${word(yesno(other_parties[0].anything_else))}
  - Edit: other_parties[0].what_else
    button: |
      **What do you want ${other_parties[0].name.full(middle='full')} to do or stop doing?**
      ${other_parties[0].what_else}
    show if: other_parties[0].anything_else
  - Edit: other_parties[0].pay_costs
    button: |
      **Do you want ${other_parties[0].name.full(middle='full')} to pay any costs?**
      ${word(yesno(other_parties[0].pay_costs))}
    show if: trial_court.address.county.lower() == "cook"
  - Edit: other_parties[0].describe_costs
    button: |
      **What costs do you want ${other_parties[0].name.full(middle='full')} to pay**
      ${other_parties[0].describe_costs}
    show if: trial_court.address.county.lower() == "cook" and other_parties[0].pay_costs
---
#id: employers schools review screen
#continue button field: employers_schools.revisit
#question: |
#    Edit the workplace, school, and day care addresses
#subquestion: |
#  ${ employers_schools.table }
#
#  ${ employers_schools.add_action() }
#---
#table: employers_schools.table
#rows: employers_schools
#columns:
#  - Name: |
#      row_item.name.first if defined("row_item.name.first") else ""
#  - Address and location type: |
#      action_button_html(url_action(row_item.attr_name("employers_schools_info")), label="Edit", icon="pencil-alt")
#delete buttons: True
#confirm: True
---
#id: employer or school review screen
#continue button field: x.employers_schools_info
#generic object: ALIndividual
#question: |
#  Edit the employer, school, or day care's info
#review: 
#  - Edit: x.name.first
#    button: |
#      **Name:**
#      ${x.name.first}
#  - Edit: x.type
#    button: |
#      **Type of place:**
#      % if x.type == "work":
#      Work or job site
#      % elif x.type == "school":
#      School
#      % elif x.type == "day_care":
#      Day care
#      % else:
#      Error
#      % endif
#  - Edit: x.address.address
#    button: |
#      **${x.name.first}'s address:**
#      ${x.address.on_one_line(bare=True)}
---
section: Filing and service details
id: filing service review screen
event: section_filing_info
question: |
  Filing and service details
subquestion: |
  Edit your answers below.
review:
  - Edit: 
      - trial_court_index
      - recompute:
        - filing_county
    button: |
      **You are filing in:**
      ${end_in_county(filing_county)}
  - Edit: cook_district
    button: |
      **Which courthouse will you file in?**
      % if cook_district == '15':
      First Municipal District, Daley Center, 50 W. Washington Street, Chicago
      % elif cook_district == '16':
      Second Municipal District, 5600 Old Orchard Road, Skokie
      % elif cook_district == '17':
      Third Municipal District, 2121 Euclid Avenue, Rolling Meadows
      % elif cook_district == '18':
      Fourth Municipal District, 1500 Maybrook Drive, Maywood
      % elif cook_district == '19':
      Fifth Municipal District, 10220 S. 76th Avenue, Bridgeview
      % elif cook_district == '20':
      Sixth Municipal District, 16501 South Kedzie Parkway, Markham
      % endif
    show if: trial_court.address.county.lower() == "cook"
  - Edit: jurisdiction_type
    button: |
      **You are filing in ${end_in_county(trial_court.address.county)} because:**
      
      % if jurisdiction_type['I live here']:
      * I live in ${end_in_county(trial_court.address.county)}.
      % endif
      % if jurisdiction_type['Respondent lives here']:
      * The person I am filing against lives in ${end_in_county(trial_court.address.county)}.
      % endif
      % if jurisdiction_type['Abuse was here']:
      * The stalking took place in ${end_in_county(trial_court.address.county)}.
      % endif
  - Edit: service_method
    button: |
      **How do you want ${other_parties[0].name.full(middle="full")} to be served?**
      % if service_method == "sheriff":
      By the sheriff
      % elif service_method == "sps":
      By a special process server
      % elif service_method == "detective":
      By a licensed private detective
      % else:
      I don't know. I will decide later.
      % endif
  - Edit: other_parties[0].which_address
    button: |
      **Where can ${other_parties[0].name.full(middle='full')} be found for service?**
      % if other_parties[0].which_address == "home_address":
      ${other_parties[0].address.on_one_line(bare=True)}
      % elif other_parties[0].which_address == "employer_address":
      ${other_parties[0].employer_address.on_one_line(bare=True)}
      % elif other_parties[0].which_address == "add_service_address":
      ${other_parties[0].service_address.on_one_line(bare=True)}
      % endif
  - Edit: service_county
    button: |
      **County where ${other_parties[0].name.full(middle='full')} can be found:**
      ${end_in_county(service_county)}
    show if: service_method == "sheriff" and service_state != "IL"
  - Edit: other_parties[0].bonus_service_check
    button: |
      **Do you want to list another place where ${other_parties[0].name.full(middle='full')} can be found for service?**
      ${word(yesno(other_parties[0].bonus_service_check))}
  - Edit: other_parties[0].which_bonus_address
    button: |
      **Where else can ${other_parties[0].name.full(middle='full')} be found for service?**
      % if other_parties[0].which_bonus_address == "home_address":
      ${other_parties[0].address.on_one_line(bare=True)}
      % elif other_parties[0].which_bonus_address == "employer_address":
      ${other_parties[0].employer_address.on_one_line(bare=True)}
      % elif other_parties[0].which_bonus_address == "service_address":
      ${other_parties[0].bonus_service_address.on_one_line(bare=True)}
      % endif
    show if: other_parties[0].bonus_service_check
  - Edit: service_information
    button: |
      **What other information will help serve ${other_parties[0].name.full(middle="full")}?**
      ${service_information}
  - Edit: case_number
    button: |
      **Case number:**
      ${case_number}
  - Edit: e_signature
    button: |
      **Do you want to add your electronic signature to your forms?**
      ${word(yesno(e_signature))}
---
id: review screen
event: review_answers
question: |
  Review screen
subquestion: |
  Edit your answers below.
review: 
  - Edit: protect_whom
    button: |
      **Who do you want to protect?**
      
      % if protect_whom['me']:
      * Myself
      % endif
      % if protect_whom['minor']:
      * A minor child
      % endif
      % if protect_whom['adult']:
      * An adult who cannot file due to age, disablility or health
      % endif
  - Edit: 
      - trial_court_index
      - recompute:
        - filing_county
    button: |
      **You are filing in:**
      ${end_in_county(filing_county)}
  - Edit: cook_district
    button: |
      **Which courthouse will you file in?**
      % if cook_district == '15':
      First Municipal District, Daley Center, 50 W. Washington Street, Chicago
      % elif cook_district == '16':
      Second Municipal District, 5600 Old Orchard Road, Skokie
      % elif cook_district == '17':
      Third Municipal District, 2121 Euclid Avenue, Rolling Meadows
      % elif cook_district == '18':
      Fourth Municipal District, 1500 Maybrook Drive, Maywood
      % elif cook_district == '19':
      Fifth Municipal District, 10220 S. 76th Avenue, Bridgeview
      % elif cook_district == '20':
      Sixth Municipal District, 16501 South Kedzie Parkway, Markham
      % endif
    show if: trial_court.address.county.lower() == "cook"
  - Edit: jurisdiction_type
    button: |
      **You are filing in ${end_in_county(trial_court.address.county)} because:**
      
      % if jurisdiction_type['I live here']:
      * I live in ${end_in_county(trial_court.address.county)}.
      % endif
      % if jurisdiction_type['Respondent lives here']:
      * The person I am filing against lives in ${end_in_county(trial_court.address.county)}.
      % endif
      % if jurisdiction_type['Abuse was here']:
      * The stalking took place in ${end_in_county(trial_court.address.county)}.
      % endif
  - Edit: users[0].name.first
    button: |
      **Your name:**
      ${users[0].name.full(middle='full')}
  - Edit: hide_address
    button: |
      **Do you want to keep your home address hidden?**
      ${word(yesno(hide_address))}
  - Edit: users[0].address.address
    button: |
      % if hide_address:
      **Your mailing address:**
      % else:
      **Your address:**
      % endif
      ${users[0].address.on_one_line(bare=True)}
  - Edit: user_relationship
    button: |
      **How are you related to the person you are filing the Stalking No Contact Order against?**
      
      % if user_relationship['unrelated']:
      * We are not related.
      % endif
      % if user_relationship['dated']:
      * We dated.
      % endif
      % if user_relationship['marriage']:
      * We are related through current or past marriage.
      % endif
      % if user_relationship['children']:
      * We have children together.
      % endif
      % if user_relationship['blood']:
      * We are related through blood.
      % endif
      % if user_relationship['blood_child']:
      * We have a blood relationship through a child.
      % endif
      % if user_relationship['home']:
      We share or have shared a home.
      % endif
      % if user_relationship['adopt_child']:
      * We have a family or household relationship through a child I am the adoptive parent, legal guardian, or custodian of.
      % endif
      % if user_relationship['caregiver']:
      * They are my personal caregiver.
      % endif
  - Edit: users[0].birthdate
    button: |
      **Your birth date:**
      ${users[0].birthdate}
  - Edit: others_protected.there_are_any
    button: |
      **Do you want the Stalking No Contact Order to protect anyone else?**
      ${word(yesno(others_protected.there_are_any))}
  - Edit: others_protected.revisit
    button: |
      **Others to protect: (Edit to change names, addresses, and other information)**

      % for my_var in others_protected:
        * ${ my_var.name.full(middle="full") }
      % endfor
    show if: others_protected.there_are_any
  - Edit: other_parties[0].name.first
    button: |  
      **Stalker's name:**
      ${other_parties[0].name.full(middle='full')}
  - Edit: other_parties[0].state_gender
    button: |
      **${other_parties[0].name.full(middle='full')}'s gender:**
      % if other_parties[0].state_gender == "Other":
      ${other_parties[0].state_other_gender}
      % else:
      ${other_parties[0].state_gender}
      % endif
    show if: trial_court_index != -1
  - Edit: other_parties[0].cook_sex
    button: |
      **${other_parties[0].name.full(middle='full')}'s sex:**
      % if other_parties[0].cook_sex == "other":
      ${other_parties[0].cook_sex_other}
      % else:
      ${other_parties[0].cook_sex}
      % endif
    show if: trial_court_index == -1
  - Edit: other_parties[0].respondent_sex_at_birth
    button: |
      **${other_parties[0].name.full(middle='full')}'s sex assigned at birth:**
      *${respondent_sex_at_birth}
    show if: trial_court_index == -1
  - Edit: other_parties[0].cook_gender
    button: |
      **${other_parties[0].name.full(middle='full')}'s gender identity:**
      
      % if other_parties[0].cook_gender == "male":
      * Male
      % endif
      % if other_parties[0].cook_gender == "female":
      * Female
      % endif
      % if other_parties[0].cook_gender == "transfem":
      * Transgender woman / Transfeminine
      % endif
      % if other_parties[0].cook_gender == "transmasc":
      * Transgender man / Transmasculine
      % endif
      % if other_parties[0].cook_gender == "nonbinary":
      * Nonbinary / Gender non-conforming
      % endif
      % if other_parties[0].cook_gender == "other":
      * ${respondent_cook_gender_other}
      % endif
    show if: trial_court_index == -1
  - Edit: other_parties[0].race
    button: |
      **${other_parties[0].name.full(middle='full')}'s race:**
      % if other_parties[0].race == "Other":
      ${respondent_race_other}
      % else:
      ${other_parties[0].race}
      % endif
  - Edit: other_parties[0].skin
    button: |
      **${other_parties[0].name.full(middle='full')}'s skin tone:**
      % if other_parties[0].skin == "Other":
      ${respondent_skin_other}
      % else:
      ${other_parties[0].skin}
      % endif
  - Edit: other_parties[0].other_names.there_are_any
    button: |
      **Has ${other_parties[0].name.full(middle='full')} gone by any other names?**
      ${word(yesno(other_parties[0].other_names.there_are_any))}
  - Edit: other_parties[0].other_names.revisit
    button: |
      **${other_parties[0].name.full(middle='full')}'s other names:**
      
      % for my_var in other_parties[0].other_names:
        * ${ my_var.name.full(middle="full") }
      % endfor
  - Edit: other_parties[0].ssn
    button: |
      **The last 4 digits of ${other_parties[0].name.full(middle='full')}'s Social Security Number:**
      % if other_parties[0].ssn == "":
      I don't know
      % else:
      ${other_parties[0].ssn}
      % endif
  - Edit: knows_respondent_dob
    button: |
      **${other_parties[0].name.full(middle='full')}'s birth date:**
      % if knows_respondent_dob == "exact":
      ${other_parties[0].birthdate}
      % elif knows_respondent_dob == "some":
      ${other_parties[0].birthdate_info}
      % else:
      I don't know
      % endif
  - Edit: other_parties[0].weight
    button: |
      **${other_parties[0].name.full(middle='full')}'s height and weight:**
      % if other_parties[0].height_feet != "" and other_parties[0].height_inches != "":
      % if other_parties[0].weight != "":
      ${other_parties[0].height_feet} feet ${other_parties[0].height_inches} inches, ${other_parties.weight} pounds
      % else:
      ${other_parties[0].height_feet} feet ${other_parties[0].height_inches} inches
      % endif
      % else:
      % if other_parties[0].weight != "":
      ${other_parties.weight} pounds
      % else:
      I don't know
      % endif
      % endif
  - Edit: other_parties[0].eyes
    button: |
      **${other_parties[0].name.full(middle='full')}'s eye color:**
      ${other_parties[0].eyes}
  - Edit: other_parties[0].wears_glasses
    button: |
      **Does ${other_parties[0].name.full(middle='full')} wear glasses?**
      % if other_parties[0].wears_glasses == "sometimes":
      Sometimes
      % elif other_parties[0].wears_glasses == "dont_know":
      I don't know
      % else:
      ${word(yesno(other_parties[0].wears_glasses))}
      % endif
  - Edit: other_parties[0].hair
    button: |
      **${other_parties[0].name.full(middle='full')}'s hair color:**
      ${other_parties[0].hair}
  - Edit: other_parties[0].features
    button: |
      **${other_parties[0].name.full(middle='full')}'s notable features:**
      % if other_parties[0].features == "":
      I don't know
      % else:
      ${other_parties[0].features}
      % endif
  - Edit: other_parties[0].drivers_license
    button: |
      **${other_parties[0].name.full(middle='full')}'s driver's license number:**
      % if other_parties[0].drivers_license == "":
      I don't know
      % else:
      ${other_parties[0].drivers_license}
      % endif
  - Edit: other_parties[0].has_vehicle
    button: |  
      **Does ${other_parties[0].name.full(middle='full')} have a vehicle?**
      ${word(yesno(other_parties[0].has_vehicle))}
  - Edit: other_parties[0].license_plate
    button: |
      **${other_parties[0].name.full(middle='full')}'s vehicle information:**
      
      % if other_parties[0].vehicle_year == "":
      * Year: I don't know
      % else:
      * Year: %{other_parties[0].vehicle_year}
      % endif
      % if other_parties.vehicle_make == "":
      * Make: I don't know
      % else:
      * Make: ${other_parties[0].vehicle_make}
      % endif
      % if other_parties[0].vehicle_model == "":
      * Model: I don't know
      % else:
      * Model: ${other_parties[0].vehicle_model}
      % endif
      % if other_parties.vehicle_cololr == "":
      * Color: I don't know
      % else:
      * Color: ${other_parties[0].vehicle_color}
      % endif
      % if other_parties[0].license_plate == "":
      * License plate number: I don't know
      % else:
      * License plate number: ${other_parties[0].license_plate}
      % endif
      % if other_parties[0].vehicle_state == "":
      * State: I don't know
      % else:
      * State: ${other_parties[0].vehicle_state}
      % endif
    show if: other_parties[0].has_vehicle
  - Edit: other_parties[0].another_number_check
    button: |
      **Do you know another number that can identify ${other_parties[0].name.full(middle='full')}?**
      ${word(yesno(other_parties[0].another_number_check))}
  - Edit: other_parties[0].another_number
    button: |
      **${other_parties[0].name.full(middle='full')} other identifying number:**
      ${other_parties[0].another_number}, ${other_parties[0].another_number_description}
    show if: other_parties[0].another_number_check
  - Edit: other_parties[0].phone_number
    button: |
      **${other_parties[0].name.full(middle="full")}'s home phone number:**
      % if other_parties[0].phone_number != "":
      ${ phone_number_formatted(other_parties[0].phone_number) }      
      % else:
      ${ "do not know" }
      % endif
  - Edit: other_parties[0].mobile_number
    button: |
      **${other_parties[0].name.full(middle="full")}'s cell number:**
      % if other_parties[0].mobile_number != "":
      ${ phone_number_formatted(other_parties[0].mobile_number) }      
      % else:
      ${ "do not know" }
      % endif      
  - Edit: other_parties[0].email_address
    button: |
      **${other_parties[0].name.full(middle='full')}'s email address:**
      % if other_parties[0].email_address == "":
      I don't know
      % else:
      ${other_parties[0].email_address}
      % endif
  - Edit: other_parties[0].bonus_contact_info
    button: |
      **Do you want to include additional contact information  for ${other_parties[0].name.full(middle='full')}?**
      ${word(yesno(other_parties[0].bonus_contact_info))}
    show if: other_parties[0].email_address != "" or other_parties[0].phone_number != "" or other_parties[0].mobile_number != ""
  - Edit: other_parties[0].alt_email
    button: |
      **${other_parties[0].name.full(middle='full')}'s additional contact information:**
      
      % if other_parties[0].alt_email != "":
      * Email: ${other_parties[0].alt_email}
      % endif
      % if other_parties[0].alt_phone != "":
      * Phone: ${phone_number_formatted(other_parties[0].alt_phone)}
      % endif
    show if: (other_parties[0].email_address != "" or other_parties[0].phone_number != "" or other_parties[0].mobile_number != "") and other_parties[0].bonus_contact_info
  - Edit: respondent_on_social_media
    button: |
      **Is ${other_parties[0].name.full(middle="full")} active on social media?**
      ${ respondent_on_social_media }      
  - Edit: respondent_social_media_accounts
    button: |
      **${other_parties[0].name.full(middle="full")}'s social media accounts:**
      ${ respondent_social_media_accounts }
    show if: respondent_on_social_media == 'Yes'

  - Edit: other_parties[0].address_known
    button: | 
      **Do you know ${other_parties[0].name.full(middle='full')}'s current home address?**
      ${word(yesno(other_parties[0].address_known))}
  - Edit: other_parties[0].last_address_known
    button: |
      **Do you know ${other_parties[0].name.full(middle='full')}'s last known address?**
      ${word(yesno(other_parties[0].last_address_known))}
    show if: other_parties[0].address_known == False
  - Edit: other_parties[0].address.address
    button: |
      % if other_parties[0].address_known:
      **${other_parties[0].name.full(middle='full')}'s current home address:**   
      % elif other_parties[0].last_address_known:
      **${other_parties[0].name.full(middle='full')}'s last known address:**
      % else:
      **${other_parties[0].name.full(middle='full')}'s address:**
      % endif
      ${other_parties[0].address.on_one_line(bare=True)}
    show if: other_parties[0].address_known or other_parties[0].last_address_known
  - Edit: other_parties[0].has_job
    button: |
      **Does ${other_parties[0].name.full(middle='full')} have a job?**
      ${word(yesno(other_parties[0].has_job))}
  - Edit: other_parties[0].employer_name
    button: |
      **${other_parties[0].name.full(middle='full')}'s job information:**
      
      * Employer name: ${showifdef('other_parties[0].employer_name')}
      * Occupation: ${showifdef('respondent_work_type')}
      * Standard work hours: ${showifdef('other_parties[0].work_hours')}
      * Address: ${other_parties[0].employer_address.on_one_line(bare=True)}
    show if: other_parties[0].has_job
  - Edit: caution_reasons
    button: |
        % if caution_reasons.any_true():
        **${other_parties[0].name.full(middle='full')} should be approached with caution because...**
        
        % if caution_reasons['illness']:
        * They have a history of mental illness.
        % endif
        % if caution_reasons['suicide']:
        * They are a suicide risk.
        % endif
        % if caution_reasons['alcohol']:
        * They are likely to be under the influence of alcohol.
        % endif
        % if caution_reasons['drugs']:
        * They are likely to be under the influence of drugs.
        % endif
        % if caution_reasons['armed']:
        * They are likely to carry a weapon.
        % endif
        % if caution_reasons['home']:
        * They have weapons in their home.
        % endif
        % else:
        **${other_parties[0].name.full(middle='full')} does not need to be approached with caution.**
        % endif
  - Edit: other_parties[0].weapons_info
    button: |
      **What weapons does ${other_parties[0].name.full(middle='full')} have?**
      % if other_parties[0].weapons_info == "":
      I don't know
      % else:
      ${other_parties[0].weapons_info}
      % endif
    show if: caution_reasons['armed'] or caution_reasons['home']
  - Edit: other_parties[0].divorced_user
    button: |
      **Are you and ${other_parties[0].name.full(middle='full')} divorced?**
      ${word(yesno(other_parties[0].divorced_user))}
  - Edit: other_parties[0].divorce_date
    button: |
      **Divorce case information:**
      
      * Date filed: ${other_parties[0].divorce_date}
      * Case number: ${other_parties[0].divorce_number}
      * Judge: ${other_parties[0].divorce_judge}
    show if: other_parties[0].divorced_user
  - Edit: other_parties[0].parentage_action
    button: |
      **Have you and ${other_parties[0].name.full(middle='full')} filed a parentage action?**
      ${word(yesno(other_parties[0].parentage_action))}
  - Edit: other_parties[0].parentage_date
    button: |
      **Parentage case information:**
      
      * Date filed: ${other_parties[0].parentage_date}
      * Case number: ${other_parties[0].parentage_number}
      * Judge: ${other_parties[0].parentage_judge} 
    show if: other_parties[0].parentage_action
  - Edit: other_parties[0].order_of_protection
    button: |
      **Is there an Order of Protection against ${other_parties[0].name.full(middle='full')}?**
      ${word(yesno(other_parties[0].order_of_protection))}
  - Edit: other_parties[0].op_state
    button: |
      **Where was the Order of Protection issued?**
      % if other_parties[0].op_state == "IL":
      % if other_parties[0].op_in_state_county == "":
      ${other_parties[0].op_state}
      % else:
      ${end_in_county(other_parties[0].op_in_state_county)}, ${other_parties[0].op_state}
      % endif
      % if other_parties[0].op_out_state_county == "":
      ${other_parties[0].op_state}
      % else:
      ${end_in_county(other_parties[0].op_out_state_county)}, ${other_parties[0].op_state}
      % endif
      % endif
    show if: other_parties[0].order_of_protection
  - Edit: respondent_on_probation
    button: |
      **Is ${other_parties[0].name.full(middle="full")} on probation?**
      % if respondent_on_probation == "idk":
      I don't know
      % elif respondent_on_probation == "Yes":
      Yes, in ${end_in_county(respondent_probation_county)}
      % else:
      No
      % endif
  - Edit: stalking_events.revisit
    button: |
      **Stalking incidents:**
      
      % for my_var in stalking_events:
        * ${ my_var.name.text}
      % endfor
  - Edit: order_type
    button: |
      **What type of SNCO do you want?**
      % if order_type['plenary'] and order_type['emergency']:
      Plenary Stalking No Contact Order and Emergency Stalking No Contact Order
      % elif order_type['plenary']:
      Plenary Stalking No Contact Order
      % elif order_type['emergency']:
      Emergency Stalking No Contact Order
      % else:
      None
      % endif
  - Edit: emergency_reason
    button: |
      **Why should the court grant an Emergency SNCO?**
      ${emergency_reason}
    show if: order_type['emergency'] and trial_court.address.county.lower() == "cook"
  - Edit: protection_requested
    button: |
      **What do you want ${other_parties[0].name.full(middle='full')} to stop doing?**
      
      % if protection_requested['stalking']:
      * Stop stalking and threatening me, my family and household members, and stop enlisting other people to stalk or threaten
      % endif
      % if protection_requested['contacting']:
      * Stop contacting me, my family and household members whether in person, by phone, by e-mail, by note or by sending messages through other people
      % endif
      % if protection_requested['away']:
      * Stay away from the locations of me and my family and household members' home, work, school, or daycare
      % endif
  - Edit: distance_away
    button: |
      **How far should ${other_parties[0].name.full(middle='full')} stay away?**
      ${distance_away} feet
    show if: protection_requested['away']
  - Edit: protected_place_types
    button: |
      **What kinds of places do you want ${other_parties[0].name.full(middle='full')} to stay away from?**
      
      % if protected_place_types['Home']:
      * Home
      % endif
      % if protected_place_types['Workplace']:
      * Workplace
      % endif
      % if protected_place_types['School']:
      * School
      % endif
      % if protected_place_types['day_care']:
      * Daycare
      % endif
      % if protected_place_types['Other']:
      * Other
      % endif
    show if: protection_requested['away']
  - Edit: home.address
    button: |
      **Your home address:**
      ${home.on_one_line(bare=True)}
    show if: protection_requested['away'] and protected_place_types['Home'] and hide_address
  - Edit: users[0].address
    button: |
      **Your home address:**
      ${users[0].address.on_one_line(bare=True)}
    show if: protection_requested['away'] and protected_place_types['Home'] and not hide_address
  - Edit: protected_workplace.name.first
    button: |
      **The workplace ${other_parties[0].name.full(middle='full')} should stay away from:**
      ${protected_workplace.name.first}, ${protected_workplace.address.on_one_line()}
    show if: protection_requested['away'] and protected_place_types['Workplace']
  - Edit: protected_school.name.first
    button: |
      **The school ${other_parties[0].name.full(middle='full')} should stay away from:**
      ${protected_school.name.first}, ${protected_school.address.on_one_line()}
    show if: protection_requested['away'] and protected_place_types['School']
  - Edit: protected_day_care.name.first
    button: |
      **The daycare ${other_parties[0].name.full(middle='full')} should stay away from:**
      ${protected_day_care.name.first}, ${protected_day_care.address.on_one_line()}
    show if: protection_requested['away'] and protected_place_types['day_care']
  - Edit: other_places
    button: |
      **What other places do you want ${other_parties[0].name.full(middle='full')} to stay away from?**
      ${other_places}
    show if: protection_requested['away'] and protected_place_types['Other']
  - Edit: live_with_stalker
    button: |
      **Does ${other_parties[0].name.full(middle='full')} live with you?**
      ${word(yesno(live_with_stalker))}
    show if: trial_court.address.county.lower() == "cook"
  - Edit: school_with_stalker
    button: |
      **Does ${other_parties[0].name.full(middle='full')} go to the same school as you?**
      ${word(yesno(school_with_stalker))}
    show if: trial_court.address.county.lower() == "cook"
  #- Edit: which_stalker_school
  #  button: |
  #    **Which school do you and ${other_parties[0].name.full(middle='full')} go to?**
  #    ${which_stalker_school}
  #  show if: trial_court.address.county.lower() == "cook" and school_list.number_gathered() > 1
  - Edit: work_with_stalker
    button: |
      **Does ${other_parties[0].name.full(middle='full')} work at the same place as you?**
      ${word(yesno(work_with_stalker))}
    show if: trial_court.address.county.lower() == "cook"
  #- Edit: which_stalker_work
  #  button: |
  #    **Where do you and ${other_parties[0].name.full(middle='full')} both work?**
  #    ${which_stalker_work}
  #  show if: trial_court.address.county.lower() == "cook" and work_list.number_gathered() > 1
  - Edit: other_parties[0].prohibit_firearms
    button: |
      **Do you want to stop ${other_parties[0].name.full(middle='full')} from having firearms or a Firearms Owner Identification Card?**
      ${word(yesno(other_parties[0].prohibit_firearms))}
  - Edit: other_parties[0].anything_else
    button: |
      **Do you want the court to make ${other_parties[0].name.full(middle='full')} to do or stop doing anything else?**
      ${word(yesno(other_parties[0].anything_else))}
  - Edit: other_parties[0].what_else
    button: |
      **What do you want ${other_parties[0].name.full(middle='full')} to do or stop doing?**
      ${other_parties[0].what_else}
    show if: other_parties[0].anything_else
  - Edit: other_parties[0].pay_costs
    button: |
      **Do you want ${other_parties[0].name.full(middle='full')} to pay any costs?**
      ${word(yesno(other_parties[0].pay_costs))}
    show if: trial_court.address.county.lower() == "cook"
  - Edit: other_parties[0].describe_costs
    button: |
      **What costs do you want ${other_parties[0].name.full(middle='full')} to pay**
      ${other_parties[0].describe_costs}
    show if: trial_court.address.county.lower() == "cook" and other_parties[0].pay_costs
  - Edit: service_method
    button: |
      **How do you want ${other_parties[0].name.full(middle="full")} to be served?**
      % if service_method == "sheriff":
      By the sheriff
      % elif service_method == "sps":
      By a special process server
      % elif service_method == "detective":
      By a licensed private detective
      % else:
      I don't know. I will decide later.
      % endif
  - Edit: other_parties[0].which_address
    button: |
      **Where can ${other_parties[0].name.full(middle='full')} be found for service?**
      % if other_parties[0].which_address == "home_address":
      ${other_parties[0].address.on_one_line(bare=True)}
      % elif other_parties[0].which_address == "employer_address":
      ${other_parties[0].employer_address.on_one_line(bare=True)}
      % elif other_parties[0].which_address == "add_service_address":
      ${other_parties[0].service_address.on_one_line(bare=True)}
      % endif
  - Edit: service_county
    button: |
      **County where ${other_parties[0].name.full(middle='full')} can be found:**
      ${end_in_county(service_county)}
    show if: service_method == "sheriff" and service_state != "IL"
  - Edit: other_parties[0].bonus_service_check
    button: |
      **Do you want to list another place where ${other_parties[0].name.full(middle='full')} can be found for service?**
      ${word(yesno(other_parties[0].bonus_service_check))}
  - Edit: other_parties[0].which_bonus_address
    button: |
      **Where else can ${other_parties[0].name.full(middle='full')} be found for service?**
      % if other_parties[0].which_bonus_address == "home_address":
      ${other_parties[0].address.on_one_line(bare=True)}
      % elif other_parties[0].which_bonus_address == "employer_address":
      ${other_parties[0].employer_address.on_one_line(bare=True)}
      % elif other_parties[0].which_bonus_address == "service_address":
      ${other_parties[0].bonus_service_address.on_one_line(bare=True)}
      % endif
    show if: other_parties[0].bonus_service_check
  - Edit: service_information
    button: |
      **What other information will help serve ${other_parties[0].name.full(middle="full")}?**
      ${service_information}
  - Edit: case_number
    button: |
      **Case number:**
      ${case_number}
  - Edit: users[0].phone_number
    button: |
      **Your safe phone number:**
      ${phone_number_formatted(users[0].phone_number)}
  - Edit: users[0].has_email_address
    button: |
      **Do you have an email address?**
      ${word(yesno(users[0].has_email_address))}
  - Edit: users[0].email    
    button: |
      **Your email address:**
      ${users[0].email}
    show if: users[0].has_email_address
  - Edit: e_signature
    button: |
      **Do you want to add your electronic signature to your forms?**
      ${word(yesno(e_signature))}