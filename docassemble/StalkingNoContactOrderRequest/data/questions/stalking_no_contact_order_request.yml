metadata:
  title: Stalking No Contact Order
  short title: SNCO
  comment: This program helps you ask the court to order someone making you fearful for your safety or causing you emotional distress to stop stalking you.
  authors:
    - Vivian McNaughton
    - Matt Newsted
---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALToolbox:escape_button.yml  
  - docassemble.ILAO:ilao-interview-framework.yml
  - docassemble.ILAO:shared-basic-questions.yml
---
#This text was removed from the under. Check whether the hotline can be used for stalkers or if a comparable resource exists. "**Worried about doing this on your own?** Call the [**Illinois Domestic Violence Hotline**](https://the-network.org/get-help/) at 877-863-6338 (877-TO END DV) to talk with an advocate."
---
default screen parts:
  under: |
    % if not user_logged_in():
    
    [${fa_icon("sign-in-alt", color="#0079d0", size="sm")} **Sign in**](${url_of('login', next=interview_url())}) or [**create**](${url_of('register', next=interview_url())}) an ILAO Easy Form account to save your progress (optional).
    % endif
    
    Feedback, suggestions, or comments? [**Let us know**](${ interview_url(i="docassemble.ILAO:feedback.yml", easy_form_interview=ilao_easy_form_url , easy_form_title=ilao_easy_form_title, easy_form_page=user_info().question_id, easy_form_variable=user_info().variable, local=False,reset=1) } ){:target="_blank"}.
---
objects:
  - users: ALPeopleList.using(there_are_any=True)
  - other_parties: ALPeopleList.using(there_are_any=True)
  - other_parties[i].other_names: ALPeopleList.using(complete_attribute='complete')
  - others_protected: ALPeopleList.using(complete_attribute='complete')
  - other_parties[0].employer_address: ALAddress
  - other_parties[0].service_address: ALAddress
  - other_parties[0].bonus_service_address: ALAddress
  - employers_schools: ALPeopleList.using(complete_attribute='complete')
  - stalking_events: DAList.using(object_type=Thing, there_are_any=True, complete_attribute='complete')
  - home: ALAddress
  - report_numbers: DAList.using(object_type=Thing, there_are_any=False)
  - others_with_minor_initials: ALPeopleList.using(there_are_any=False)
  - away_address_list: DAList.using(object_type=Thing, there_are_any=False)
  - no_remain_address_list: DAList.using(object_type=Thing, there_are_any=False)
  - school_list: DAList.using(object_type=Thing, there_are_any=False)
  - work_list: DAList.using(object_type=Thing, there_are_any=False)
  - away_work_address_list: DAList.using(object_type=Thing, there_are_any=False)
  - away_school_daycare_list: DAList.using(object_type=Thing, there_are_any=False)
---
code: |
  ilao_easy_form_title = "SNCO - Stalking No Contact Order request"
  ilao_easy_form_url = "https://www.illinoislegalaid.org/legal-information/stalking-no-contact-order-request"
  form_name = "Stalking No Contact Order request"
  al_form_type = 'new_case'
  user_ask_role = 'plaintiff'
  github_user = 'IllinoisLegalAidOnline'
  github_repo_name = 'docassemble-StalkingNoContactOrderRequest'
  allowed_courts = ['Circuit']
---
# Road map
sections:
  - section_intro: Start
  - section_petitioner: People you want to protect
  - section_incidents: What happened
  - section_protections: Protections
  - section_respondent: Person you want protection from
  - section_filing_info: Filing and service details
  - section_download: Download
---
# interview order block
mandatory: True
code: |
  nav.set_section('section_intro')
  sees_nav_bar
  snapshot_start
  instructions
  whats_next
  accept_terms
  if in_illinois == False:
    not_in_illinois
  if two_times_check == False:
    two_times_kickout
  nav.set_section('section_petitioner')
  trial_court
  if jurisdiction_type.all_false():
    other_jurisdiction_location
    
  
  users[0].name.first
  other_parties[0].name.first
  hide_address
  users[0].address.address
  if user_relationship != "unrelated":
    related_note
  if users[0].age_in_years() < 18:
    too_young_kickout
  if others_protected.there_are_any:
    others_protected.gather()
  
  nav.set_section('section_incidents')
  
  stalking_event_intro
  stalking_events.gather()
  if stalking_events.number_gathered() < 2:
    two_times_kickout
    
  nav.set_section('section_protections')
  if order_type['emergency'] and trial_court.address.county == "Cook":
    emergency_reason
  if protection_requested['away']:
    distance_away
    if protected_place_types['Home']:
      run_home_address_block
    if protected_place_types['School'] or protected_place_types['Workplace']: 
      employers_schools.gather()  
    if protected_place_types['Other']:
      other_places
    if trial_court.address.county == "Cook":
      if live_with_stalker:
        home.address
      if school_with_stalker: 
        if school_list.number_gathered() > 1:
          which_stalker_school
      if work_with_stalker:    
        if work_list.number_gathered() > 1:
          which_stalker_work
  other_parties[0].prohibit_firearms
  if trial_court.address.county == "Cook":
    other_parties[0].pay_costs 
  other_parties[0].anything_else
  if protection_requested.all_false() and not other_parties[0].prohibit_firearms and not other_parties[0].anything_else:
    other_parties[0].no_protection_chosen
  
  nav.set_section('section_respondent')
  
  other_parties[0].gender
  other_parties[0].race
  if trial_court.address.county == "Cook":
    #other_parties[0].skin_tone
    if other_parties[0].other_names.there_are_any:
      other_parties[0].other_names.gather()
  other_parties[0].ssn
  knows_respondent_dob
  other_parties[0].weight
  other_parties[0].eye_color
  other_parties[0].hair_color
  other_parties[0].features
  other_parties[0].drivers_license
  if other_parties[0].has_vehicle:
    other_parties[0].license_plate
  if other_parties[0].another_number_check:
    other_parties[0].another_number_description
  other_parties[0].phone_number
  other_parties[0].email_address
  if other_parties[0].address_known == True:
    other_parties[0].address.address
  else:
    unknown_address_note
  if other_parties[0].has_job == True:
    other_parties[0].employer_name
  other_parties[0].suicide_risk
  other_parties[0].armed
  if trial_court.address.county == "Cook":
    if other_parties[0].divorced_user:
      other_parties[0].divorce_date
    elif other_parties[0].parentage_action:
      other_parties[0].parentage_date
    other_parties[0].mental_illness
    other_parties[0].alcohol
    other_parties[0].drugs
    other_parties[0].carrying_weapon
    other_parties[0].home_weapon
    if other_parties[0].carrying_weapon or other_parties[0].home_weapon:
      other_parties[0].weapons_info
    if other_parties[0].order_of_protection == True:
      other_parties[0].op_state
    respondent_on_probation
  
  nav.set_section('section_filing_info')
  other_parties[0].which_address
  if other_parties[0].bonus_service_check == True:
    other_parties[0].which_bonus_address
  if trial_court.address.county == "Cook":  
    service_information
  case_number
  users[0].has_email_address
  e_signature
  
  nav.set_section('section_download')
  check_ages
  
  if trial_court.address.county == "Cook":
    make_report_list
    #with_initials
    cook_stay_away_addresses
    cook_no_remain_addresses
  else:
    state_stay_away_addresses
    
  addendum_check
  #debug_page
  forms_assembling
  snapshot_forms
  get_docs_screen
---
code: |
  stuff_to_snapshot = {
  	'start_time': str(current_datetime().format_datetime()),
  	'started_interview': True, 
  	}
  
  try:
    stuff_to_snapshot['ip_address'] = device(ip=True)
  except:
    pass
  
  stuff_to_snapshot['user_zip'] = showifdef('users[0].address.zip')

  stuff_to_snapshot['downloaded_forms'] = showifdef('forms_assembling')
  
  stuff_to_snapshot['filing_county'] = showifdef('trial_court.address.county')  
  
  store_variables_snapshot(
  	data=stuff_to_snapshot, persistent=True
  	)
  snapshot_interview_state = True
---
code: |
  snapshot_interview_state
  snapshot_start = True  
---
code: |
  reconsider('snapshot_interview_state')
  snapshot_forms = True
---
#others protected gather code block
code: |
  others_protected[i].name.first
  others_protected[i].birthdate
  if others_protected[i].is_survivor == False and trial_court.address.county == "Cook":
    others_protected[i].relation_to_user
    others_protected[i].protection_reason
  if hide_address == False or others_protected[i].use_safe_address == False:
    others_protected[i].address.address
  others_protected[i].complete = True
---
#stalkiing events gather code block
code: |
  stalking_events[i].name.text
  stalking_events[i].place
  stalking_events[i].description
  stalking_events[i].police_check
         
  stalking_events[i].complete = True
---
#creates list of police report numbers and sets any police reports flag
reconsider: True
code: |
  report_numbers.clear()
  any_police_reports = False
  for event in stalking_events:
    if event.police_check:
      any_police_reports = True
      if event.police_number != "":
        report_numbers.append(event.police_number)
  report_numbers.there_is_another = False
  make_report_list = True
---
#creates others protected list wherein minors are referred to by their initials. Used in Cook County's petition
reconsider: True
code: |
  if others_protected.there_are_any:
    others_with_minor_initials.clear()
    for index, other in enumerate(others_protected):
      others_with_minor_initials.append(other)
  
      if others_protected[index].age_in_years() < 18:
        others_with_minor_initials[index].name.first = other.name.first[:1]
        others_with_minor_initials[index].name.last = other.name.last[:1]
    others_with_minor_initials.there_is_another = False
  with_initials = True
---
# employers schools gather code block
code: |  
  employers_schools[i].name.first
  employers_schools[i].address.address
  employers_schools[i].complete = True
---
#list of "stay away" addresses for use in the Cook petition
reconsider: True
code: |
  if protection_requested['away']:
    away_address_list.clear()
    if protected_place_types['Home']:
      away_address_list.append(home.on_one_line(bare=True))
    if protected_place_types['School'] or protected_place_types['Workplace']: 
      for place in employers_schools:
        away_address_list.append(place.address.on_one_line(bare=True))
    away_address_list.there_is_another = False
  cook_stay_away_addresses = True
---
#This code block sets a flag for each item in others_protected and stalking_events. This flag tracks whether the item needs to be included in an addendum form rather than the main petition.
reconsider: True
code: |
  if others_protected.there_are_any and others_protected.number_gathered() > 0:
    for index, other in enumerate(others_protected):
      if trial_court.address.county == "Cook":
        other.include_in_addendum = True
      else:
        if index > 1:
          other.include_in_addendum = True
        else:
          other.include_in_addendum = False
  for index, event in enumerate(stalking_events):
    if trial_court.address.county == "Cook":
      if index > 2:
        event.include_in_addendum = True
      else:
        event.include_in_addendum = False
    else:
      if index > 1:
        event.include_in_addendum = True
      else:
        event.include_in_addendum = False
  addendum_check = True
---
#list of "stay away" addresses for non-cook petition
reconsider: True
code: |
  if protection_requested['away']:
    away_work_address_list.clear()
    away_school_daycare_list.clear()
    if protected_place_types['School'] or protected_place_types['Workplace']: 
      for place in employers_schools:
        if place.type == "work":
          away_work_address_list.append(place.address.on_one_line(bare=True))
        else:
          away_school_daycare_list.append(place.address.on_one_line(bare=True))
    away_work_address_list.there_is_another = False
    away_school_daycare_list.there_is_another = False
  state_stay_away_addresses = True
---
#list of "do not remain at" addresses for use in the cook petition
reconsider: True
code: |
  if protection_requested['away']:
    no_remain_address_list.clear()
    if live_with_stalker:
      no_remain_address_list.append(home.on_one_line(bare=True))
    if school_with_stalker:
      make_lists
      if school_list.number_gathered() == 1:
        no_remain_address_list.append(school_list[0])
      else:
        no_remain_address_list.append(which_stalker_school)
    if work_with_stalker:
      make_lists
      if work_list.number_gathered() == 1:
        no_remain_address_list.append(work_list[0])
      else:
        no_remain_address_list.append(which_stalker_work)
    no_remain_address_list.there_is_another = False
  cook_no_remain_addresses = True
---
#gather block for stalker's other names
code: |
  other_parties[0].other_names[i].name.first
  other_parties[0].other_names[i].complete = True
---
#flag tracking whether there are protected minors or protected adults
reconsider: True
code: |
  any_minors = False
  any_adults = False
  if others_protected.number_gathered() > 0:
    for other in others_protected:
      if other.age_in_years() < 18:
        any_minors = True
      else:
        any_adults = True
  check_ages = True
---

---
id: welcome
question: |
  SNCO - Stalking No Contact Order Request
subquestion: |
  Welcome to Illinois Legal Aid Online's **SNCO - Stalking No Contact Order Request** Easy Form.

  This program will help you make forms to get a Stalking No Contact Order against someone who has done things that made you fearful for your safety or caused you emotional distress. The forms you make with this program can only be used in Illinois.

  If the victim of stalking is not you, but a child or an adult who is not capable of filing a petition, you may file a petition on behalf of the victim.

  To learn more, read ILAO's article about [**Getting a no contact order for stalking**](https://www.illinoislegalaid.org/legal-information/getting-no-contact-order-stalking).
  
  #### Your safety is important
  
  * If you are in immediate danger, call 911.
  * If you need to exit this program, click the red **Escape** button at the top of the screen.
  * Learn about [**safety while using the Internet**](https://www.thehotline.org/help/tech-social-media-safety/).
field: sees_nav_bar
---
id: instructions
continue button field: instructions
question: |
  Instructions
subquestion: |
  To use this program:

  * The stalker cannot be a family member, current or ex-spouse, or current or ex-boyfriend or girlfriend (use the Order of Protection program instead),
  * The stalker must have done something that made you fearful or caused emotional distress at least two separate times, and
  * You must file your forms in the county were the stalking took place or in the county where you live or where the stalker lives.
  
  To complete this program you will need to know:
  
  * An alternative address where you can receive court documents if you do not want the stalker to know the address where you are staying,
  * The stalker's name, gender, and race, and
  * Details about the stalking and when it took place.
  
  Set aside 10 to 20 minutes to finish this program. You can login and save your work to return to later. 
 
  ${ collapse_template(help_example) }  

  Click on **{green words}** to learn what they mean. Some questions have a question mark in a circle ${ fa_icon("question-circle", color_css="#0dcaf0" ) } that also gives help.
---
template: help_example
subject: |
  **You can expand sections like this to show more information.**
content: |  
  This is an example of help. Click again to hide.
---
id: whats next
continue button field: whats_next
question: |
  After you finish this program
subquestion: |
  After you download your ${ form_name } forms, you must file them with the court clerk's office. This program does not file your ${ form_name } forms for you.
  
  You can also download "How to ask for an Order of Protection" instructions at the end of this program. The instructions can guide you through filing your forms and going to court.
---
id: two times check
question: |
  Has the stalker done things which made you fearful or caused you emotional distress at least two separate times?
subquestion: |
  **Emotional distress** means feeling a lot of mental pain, worry, or fear.

  **Stalking** is when someone acts in a way they know, or should know, would make a normal person scared for their safety or feel very upset. Stalking does not include an exercise of the right to free speech or assembly. It does not include lawful picketing at the workplace. 
fields:
  - no label: two_times_check
    datatype: yesnoradio
---
template: distress_explainer
subject: |
  **What counts as emotional distress or stalking?**
content: |  
  **Emotional distress** means feeling a lot of mental pain, worry, or fear.

  **Stalking** is when someone acts in a way they know, or should know, would make a normal person scared for their safety or feel very upset. Stalking does not include an exercise of the right to free speech or assembly. It does not include lawful picketing at the workplace. 
---
id: two times kickout
event: two_times_kickout
question: |
  Sorry
subquestion: |
  To qualify for a ${form_name}, you must have suffered at least two separate incidents, and describe these incidents to the court.
  
  A different protective order may work for your situation. Read ILAO's article [**Which protective order is right for me?**](https://www.illinoislegalaid.org/legal-information/which-protective-order-right-me) to learn more.
buttons:
  - Exit: exit
  - Restart: restart
---
id: in illinois
question: |
  Do you want to file for a Stalking No Contact Order in Illinois?
subquestion: |
  You can file in Illinois if:

  * You live in Illinois,
  * The person you are filing against lives in Illinois,
  * The abuse took place in Illinois, or
  * You are in Illinois to avoid abuse elsewhere.
fields:
  - no label: in_illinois
    datatype: yesnoradio
---
id: not in illinois
event: not_in_illinois
question: |
  Sorry
subquestion: |
  This program is only for people who want a Stalking No Contact Order in Illinois.
  
  You can use the [**Legal Services Corporation website**](https://www.lsc.gov/about-lsc/what-legal-aid/get-legal-help) to find a legal aid organization near you.
buttons:
  - Exit: exit
  - Restart: restart
---
id: county
continue button field: case_county
question: |
  In which county will you file your ${ form_name }?
subquestion: |
  You can file your case in the county:
  
  * Where you live,
  * Where the person who caused the abuse lives,
  * Where the abuse occurred, or
  * Where you are staying to avoid abuse.
fields:
  - no label: trial_court_index
    datatype: integer
    code: |
      court_county_lookup()
  - note: |
      ${ collapse_template(county_lookup_help) }  
---
template: county_lookup_help
subject: |
  **What if I need help finding the county?**
content: |  
    You can use this [**City-to-County Finder**](https://www.statsamerica.org/CityCountyFinder/) to find the county.
---
depends on:
  - trial_court_index
code: |
  trial_court = court_list.as_court('trial_court', trial_court_index)
---
code: |
  def court_county_lookup(lowercase=False):
    all_court_counties = court_list._load_courts()['address_county'].items()
    filtered_courts = [(-1, "cook")] if lowercase else [(-1, "Cook")]
    for court in all_court_counties:
      if court[1] != "Cook":
        court_name = court[1].lower() if lowercase else court[1]
        filtered_courts.append((court[0],court_name))
    return sorted( filtered_courts, key=lambda y: y[1])
---
depends on:
  - trial_court_index
code: |
  if trial_court_index == -1:
    trial_court = court_list.as_court('trial_court', 15)
    trial_court.address.county = "Cook"
  else:
    trial_court = court_list.as_court('trial_court', trial_court_index)
---
depends on:
  - trial_court_index
  - cook_district
code: |
  if trial_court_index == -1:
    trial_court = court_list.as_court('trial_court', cook_district)
  else:
    trial_court = court_list.as_court('trial_court', trial_court_index)
    
  court_name = str(trial_court.name)
  court_circuit = str(trial_court.circuit)
  court_street_address = str(trial_court.address.address)
  court_city = str(trial_court.address.city)
  court_state = str(trial_court.address.state)
  court_zip = str(trial_court.address.zip)
  filing_county = str(trial_court.address.county)
  courthouse_info = court_name + ", " + court_street_address + ", " + court_city + ", " + court_state + " " + court_zip
---
id: Cook County district
question: |
  Which Cook County courthouse will you file in?
subquestion: |
  ${ collapse_template(cook_district_help) }  
field: cook_district
choices:
  - First Municipal District, Daley Center, 50 W. Washington Street, Chicago: 15
  - Second Municipal District, 5600 Old Orchard Road, Skokie: 16
  - Third Municipal District, 2121 Euclid Avenue, Rolling Meadows: 17
  - Fourth Municipal District, 1500 Maybrook Drive, Maywood: 18
  - Fifth Municipal District, 10220 S. 76th Avenue, Bridgeview: 19
  - Sixth Municipal District, 16501 South Kedzie Parkway, Markham: 20
---
template: cook_district_help
subject: |
  **What if I am not sure?**
content: |  
  Visit **[Illinois Court Help](https://www.ilcourthelp.gov/)**, or you can call or text (833) 411-1121 for assistance.
---
id: jurisdiction
#continue button field: jurisdiction
question: |
  Why do you want to file in ${ trial_court.address.county } County?
subquestion: |
  Check all that apply.
fields:
  - no label: jurisdiction_type
    datatype: checkboxes
    choices:
      - I live in ${ trial_court.address.county } County.: I live here
      - The person I am filing against lives in ${ trial_court.address.county } County.: Respondent lives here
      - The abuse took place in ${ trial_court.address.county } County.: Abuse was here
---
id: not proper location
event: other_jurisdiction_location
question: |
  Sorry
subquestion: |
  You can file your case in the Illinois county:
  
  * Where you live,
  * Where the person who caused the abuse lives, or
  * Where the abuse occurred.

  If Illinois is not the right place to ask for a Stalking No Contact Order, you can use the [**Legal Services Corporation website**](https://www.lsc.gov/about-lsc/what-legal-aid/get-legal-help) to find a legal aid organization near you.
buttons:
  - Exit: exit
  - Restart: restart
---
id: protect whom
question: |
  Who do you want this Stalking No Contact Order to protect?
subquestion: |
  Check all that apply.
fields:
  - no label: protect_whom
    datatype: checkboxes
    choices:
      - Myself: me
      - A minor child: minor
      - An adult who cannot file due to age, disablility or health : adult
---
id: petitioner name
sets:
    - users[0].name.first
    - users[0].name.last
    - users[0].name.middle
    - users[0].name.suffix
question:  |
  What is your name?
subquestion: |
  Enter your name, even if you are filing the Stalking No Contact Order on behalf of your family or household members. In court and on the forms, you will be listed as the **Petitioner**.
fields:
  - code: |
      users[0].name_fields()
---
id: hide address
question: |
  Do you want to keep your home address hidden?
subquestion: |
  You do not need to list where you are staying on your court papers. You can use an address where you can receive court notices instead.
field: hide_address
choices:
  - Yes: True
  - No: False
---
id: get address
question: |
  % if hide_address:
  What is your mailing address?
  % else:
  What is your home address?
  % endif
subquestion: |
  % if hide_address:
  **This address will appear on your court papers.** You may receive court notices and documents about your case at this address.
  % else:
  **This address will appear on your court papers.** If you do not want this, click **Back** to keep your address hidden.
  % endif
fields:
  - Street address: users[0].address.address
    address autocomplete: True
  - Address line 2: users[0].address.unit
    required: False
  - City: users[0].address.city
  - State: users[0].address.state
    code: |
      states_list()
    default: IL      
  - ZIP code: users[0].address.zip
---
depends on:
  - hide_address
  - users[0].address.address
  - users[0].address.unit
  - users[0].address.city
  - users[0].address.state
  - users[0].address.zip
code: |
  if hide_address:
    home.address
  else:
    home = users[0].address
  run_home_address_block = True
---
id: stay away home address
question: |
  What is your home address?
subquestion: |
  % if hide_address:
  You said earlier you wanted to hide your address. **The address you enter here will be on your court papers.** If you want to keep your address secret, click **Back** and change your previous answer
  % endif
fields:
  - Street address: home.address
    address autocomplete: True
  - Address line 2: home.unit
    required: False
  - City: home.city
  - State: home.state
    code: |
      states_list()
    default: IL      
  - ZIP code: home.zip
---
#SME question: can an SNCO be issued against someone regardless of relationship, or only against someone the filer is not related to?
id: relationship
question: |
  How are you related to the person you are filing the Stalking No Contact Order against?
field: user_relationship
choices:
  - We are not related.: unrelated
  - I am their spouse.: se
  - I am their ex-spouse.: xs
  - I am their boyfriend, girlfriend, or romantic partner (including ex-).: bg
  - We have a child in common (never married).: cc
  - We share or shared a living space.: cs
    help: |
      Example: We share a common area like a kitchen. This would not apply if you just had apartments in the same building.
  - I am their child.: ch
  - I am their parent.: pa
  - I am their brother, sister, or sibling.: sb
  - They are another family member.: of
    help: |
      Examples: Uncle, aunt, or cousin.
  - I am their step child.: sc
  - I am their step brother, step sister, or step sibling.: ss
  - I am their step parent.: sp
  - I am their grandchild.: gc
  - I am their grandparent.: gp
  - I am their in-law.: il
  - I have a disability and receive care from the abuser.: pd
  - I am a high-risk adult with disabilities and the abuser is my personal caregiver.: pc
    help: |
      A **high risk adult with disabilities** is a person aged 18 or over whose physical or mental disability keeps them from protecting themself from abuse, neglect, or exploitation.
  - I have a disability and the abuser is my personal assistant or caregiver.: pr
  - The abuser is a family or household member of my foster child.: f
  - The abuser is a family or household member of my adopted child, or of my prospective adopted child.: a
  - The abuser is a family or household member of a child that I am the legally-appointed custodian of.: l
---
id: related note
continue button field: related_note
question: |
  Other protective orders
subquestion: |
  If the person stalking you is family member, household member, boyfriend, girlfriend, or ex, you may want to file for an Order of Protection or a Civil No Contact Order instead. 
  
  ILAO's article on [**Which protective order is right for me?**](https://www.illinoislegalaid.org/legal-information/which-protective-order-right-me) can help you find the protective order for your situation.
---
id: user birthdate
question: |
  When were you born?
fields:
  - Your date of birth: users[0].birthdate
    datatype: BirthDate
    alMax: today()
---
id: too young kickout
event: too_young_kickout
question: |
  Sorry
subquestion: |
  You must be 18 years old or older to use this program.
  
  Your parent or guardian can file for a Stalking No Contact Order for you. If you need protection from your parent or guardian, you may want to ask a court for emancipation. To learn more about emancipation, read ILAO's article on [**becoming emancipated**](https://www.illinoislegalaid.org/legal-information/becoming-emancipated).
  
   Click **Back** if you made a mistake. Or you can talk with a lawyer to discuss your options. Use **[Get Legal Help](https://www.illinoislegalaid.org/get-legal-help)** to find free or low-cost legal services in your area.
buttons:
  - Exit: exit
  - Restart: restart
---
id: case number
question: |
  What is the case number?
subquestion: |
  If this is a new case, leave this blank. The clerk will give you a case number when you file.
fields:
  - Case number: case_number
    required: False
---
id: your contact information
question: |
  What is your contact information?
subquestion: |
  ${ collapse_template(contact_info_help) }  
fields:  
  - Phone number: users[0].phone_number
    datatype: al_international_phone
    required: False
  - label: |
      I have an email address
    field: users[0].has_email_address      
    datatype: yesnoradio
  - note: |
      This email address will appear on your court forms. Be sure to check 
      this email daily, otherwise you may miss important information about 
      your case.
    show if: x.has_email_address      
  - Email address: users[0].email    
    datatype: email
    show if: 
      variable: users[0].has_email_address
      is: True
---
template: contact_info_help
subject: |
  **Why do I need to include this?**
content: |  
  The court must be able to reach you, so you need to include some contact information.
---
id: any others protected
question: |
  Do you want the Stalking No Contact Order to protect anyone else?
subquestion: |
  This is who you can protect with this order:
  
  * Children who were victims of the stalking, and
  * Adults who were victims of the stalking and who cannot file for themselves due to age, disability, or poor health.
fields:
  - no label: others_protected.there_are_any
    datatype: yesnoradio
---
sets:
    - others_protected[i].name.first
    - others_protected[i].name.last
    - others_protected[i].name.middle
    - others_protected[i].name.suffix
id: others protected name
question: |
  What is the name of the ${ordinal(i)} other person you want to protect?
fields:
  - code: |
      others_protected[i].name_fields()
---
id: others protected birthday
question: |
  What was ${others_protected[i].name.full(middle='full')} born? 
fields:
  - Their date of birth: others_protected[i].birthdate
    datatype: BirthDate
    alMax: today()
---
id: others protected sexual assualt cook county
question: |
  Is ${others_protected[i].name.full(middle='full')} a survivor of rape, sexual assault, or sexual abuse?
fields:
  - no label: others_protected[i].is_survivor
    datatype: yesnoradio
---
id: others protected relation to user cook county
question: |
  What is ${others_protected[i].name.full(middle='full')}'s relationship to you?
fields:
  - They are my: others_protected[i].relation_to_user
    input type: combobox
    choices:
    - Child
    - Stepchild
    - Grandchild
    - Parent
    - Grandparent
    - Aunt or uncle
    - Niece or nephew
    - Sibling
    - Cousin 
---
#review amount of space available and figure out max length
id: protection reason cook county
question: |
  Why are you including ${others_protected[i].name.full(middle='full')} in the Stalking No Contact Order?
subquestion: |
  ${collapse_template(cook_reason_example)}
fields:
  - no label: others_protected[i].protection_reason
    input type: area
    rows: 2
    maxlength: 200
---
template: cook_reason_example
subject: |
  **What should my answer look like?**
content: |
  Here are some examples:
  
  * They were included in a threat of violence
  * They witnessed harassment.
---
id:  others protected safe address check
question: |
  Do you want to use the safe mailing address for ${others_protected[i].name.full(middle='full')}?
subquestion: |
  The safe mailing address you entered is:
  
  ${users[0].address.line_one(bare=True)}
  ${users[0].address.line_two()}
fields:
  - no label: others_protected[i].use_safe_address
    datatype: yesnoradio
---
id: others protected address
question: |
  What is ${others_protected[i].name.full(middle='full')}'s address?
fields:
  - Street address: others_protected[0].address.address
    address autocomplete: True
  - Address line 2: others_protected[0].address.unit
    required: False
  - City: others_protected[0].address.city
  - State: others_protected[0].address.state
    code: |
      states_list()
    default: IL      
  - ZIP code: others_protected[0].address.zip
---
id: any others protected
question: |
  Do you want the Stalking No Contact Order to protect anyone else?
subquestion: |
  So far you have told us about ${comma_and_list(others_protected)}.

  This is who you can protect with this order:
  
  * Children who were victims of the stalking, and
  * Adults who were victims of the stalking and who cannot file for themselves due to age, disability, or poor health.
fields:
  - no label: others_protected.there_is_another
    datatype: yesnoradio
---
id: other parties name stalker name
question: |
  What is the stalker's name?
subquestion: |
  This is the person you will file the Stalking No Contact Order against.
fields:
  - First: other_parties[0].name.first
  - Middle: other_parties[0].name.middle
    required: False
  - Last: other_parties[0].name.last
    required: False
  - Suffix: other_parties[0].name.suffix
    required: False
    code: |
      name_suffix()
---
id: stalker gender
question: |
  What gender is ${other_parties[0].name.full(middle='full')}?
subquestion: |
  This information is used to help enforce the Stalking No Contact Order.
  
  If you do not know, you can leave this blank.
fields:
  - Gender: other_parties[0].gender
    input type: radio
    choices:
      - Male
      - Female
      - Other
    required: False
  - Other: other_parties[0].other_gender
    maxlength: 20
    required: False
    show if: 
      variable: other_parties[0].gender
      is: "Other"  
---
id: stalker race stalker skin tone
question: |
  What race is ${other_parties[0].name.full(middle='full')}?
subquestion: |
  This information is used to help enforce the Stalking No Contact Order.
  
  If you do not know, you can leave this blank.
fields:
  - Race: other_parties[0].race
    input type: radio
    choices:
      - Asian: Asian
      - Black: Black
      - Hispanic: Hispanic
      - Latino: Latino
      - Middle Eastern: Middle Eastern 
      - Native American: Native American
      - Native Hawaiian: Native Hawaiian
      - North African: North African
      - Pacific Islander: Pacific Islander
      - White: White
      - 2 or more races: Multiracial
      - Other: Other
  - Other: other_parties[0].other_race
    maxlength: 20
    show if: 
      variable: other_parties[0].race
      is: "Other"  
  #- Skin tone: other_parties[0].skin_tone
  #  input type: radio
  #  required: False
  #  show if:
  #    variable: trial_court.address.county
  #    is: "Cook"
  #  choices:
  #    - Very light: Very light
  #    - Light: Light
  #    - Light brown: Light brown
  #    - Olive: Olive
  #    - Brown: Brown
  #    - Dark brown: Dark brown
  #    - Other: Other
  #- Other: other_parties[0].other_skin_tone
  #  maxlength: 20
  #  show if: 
  #    variable: other_parties[0].skin_tone
  #    is: "Other"  
---
id: stalker any other names
question: |
  Has ${other_parties[0].name.full(middle='full')} gone by any other names?
subquestion: |
  If you know of any old legal name, nickname, or alias that ${other_parties[0].name.full(middle='full')} has used, click **Yes**.
fields:
  - no label: other_parties[0].other_names.there_are_any
    datatype: yesnomaybe
---
id: stalker other names
question: |
  % if i == 0:
  What other name has ${other_parties[0].name.full(middle='full')} gone by?
  % else:
  What is the ${ordinal(i)} other name has ${other_parties[0].name.full(middle='full')} gone by?
  % endif
subquestion: |
  This can be an old legal name, nickname, or alias.
  
  % if i != 0:
  So far you have told us about ${comma_and_list(other_parties[0].other_names.complete_elements().full_names())}.
  % endif
fields:
  - First: other_parties[0].other_names[i].name.first
  - Middle: other_parties[0].other_names[i].name.middle
    required: False
  - Last: other_parties[0].other_names[i].name.last
    required: False
  - Suffix: other_parties[0].other_names[i].name.suffix
    required: False
    code: |
      name_suffix()
---
id: stalker other names there is another
question: |
  Has ${other_parties[0].name.full(middle='full')} gone by any other names?
subquestion: |
  This can be an old legal name, nickname, or alias.
  
  So far you have told us about ${comma_and_list(other_parties[0].other_names.complete_elements().full_names())}.
fields:
  - no label: other_parties[0].other_names.there_is_another
    datatype: yesnoradio
---
id: stalker ssn
question: |
  What are the last four digits of ${other_parties[0].name.full(middle='full')}'s Social Security Number?
subquestion: |
  If you do not know, you can leave this blank.
fields:
  - SSN: other_parties[0].ssn
    maxlength: 4
    required: False
---
id: know respondent birthdate
question: |
  Do you know ${other_parties[0].name.full(middle="full")}'s birthdate?
fields:   
  - no label: knows_respondent_dob
    datatype: radio
    choices:
      - Yes, I will enter the date.: exact
      - I know some of it.: some
        help: |
          For example, "June 3rd" or "Summer of 1990."
      - I don't know it.: idk
        help: |
          % if trial_court_index == -1:
          You can update the Cook County Sheriff's office when you have this information. Email them anytime at ccso.protectiveorders@ccsheriff.org or call them at 312-603-2134 or 312-603-3340 (Monday through Friday, 8AM to 5PM).
          % else:
          You may want to update the sheriff's office when you have this information.
          % endif
  - ${other_parties[0].name.full(middle="full")}'s date of birth: other_parties[0].birthdate
    datatype: date
    max: ${ today().format("yyyy-MM-dd") }
    show if: 
      variable: knows_respondent_dob
      is: exact
  - What you know about ${other_parties[0].name.full(middle="full")}'s date of birth: other_parties[0].birthdate_info
    maxlength: 25
    show if:
      variable: knows_respondent_dob
      is: some
---
id: cook county physical characteristics
question: |
  Tell us about ${other_parties[0].name.full(middle="full")}'s appearance
subquestion: |
  This information is used to help enforce the Stalking No Contact Order.
  
  Enter what information you know.
fields:
  - Height (feet): other_parties[0].height_feet
    datatype: integer
    required: False
    min: 2
    max: 8
    grid: 6
    help: |
      Example: 5
  - Height (inches): other_parties[0].height_inches
    datatype: integer
    required: False
    min: 0
    max: 11
    grid: 6
    help: |
      Example: 8
  - Weight (pounds): other_parties[0].weight
    datatype: integer
    required: False
    min: 1
    max: 1500
    help: |
      Example: 170
  - Skin color: other_parties[0].skin_tone
    required: False
    datatype: radio
    choices: 
      - Very light: Very light
      - Light: Light
      - Light brown: Light brown
      - Olive: Olive
      - Brown: Brown
      - Dark brown: Dark brown
      - Other: other
  - ${other_parties[0].name.full(middle="full")}'s skin color: respondent_skin_other
    maxlength: 30
    show if:
      variable: other_parties[0].skin_tone
      is: 'other'
  - Hair color: other_parties[0].hair_color
    maxlength: 30
    required: False
    help: |
      Examples: brown, black, blond, gray, bald or shaved
  - Eye color: other_parties[0].eye_color
    maxlength: 30
    required: False
    help: |
      Examples: brown, blue, hazel, green
  - Does ${other_parties[0].name.full(middle="full")} wear glasses?: other_parties[0].wear_glasses
    datatype: radio
    choices: 
      - Yes: Yes
      - Sometimes: Sometimes
      - No: No
---
#id: stalker height stalker weight
#question: |
#  What is ${other_parties[0].name.full(middle='full')}'s height and weight?
#subquestion: |
#  If you do not know, you can leave this blank. 
#fields:
#  - Feet: other_parties[0].height_feet
#    datatype: integer
#    required: False
#    grid: 6
#    min: 1
#    max: 9
#    help: |
#      Example: 5
#  - Inches: other_parties[0].height_inches
#    datatype: integer
#    required: False
#    min: 0
#    max: 11
#    grid: 6
#    help: |
#      Example: 8
#  - Weight (in pounds): other_parties[0].weight
#    datatype: integer
#    required: False
#    min: 1
#    max: 1500
#    help: |
#      Example: 170
#---
#id: stalker eyes
#question: |
#  What color are ${other_parties[0].name.full(middle='full')}'s hair and eyes?
#subquestion: |
#  If you do not know, you can leave this blank. 
#fields:
#  - Hair color: other_parties[0].hair_color
#    maxlength: 30
#    required: False
#    help: |
#      Examples: brown, black, blond, gray, bald or shaved
#  - Eye color: other_parties[0].eye_color
#    maxlength: 30
#    required: False
#    help: |
#      Examples: brown, blue, hazel, green
#  - Does ${other_parties[0].name.full(middle='full')} wear glasses?: other_parties[0].wear_glasses
#    datatype: radio
#    required: False
#    choices:
#      - Yes: True
#      - No: False
#      - Sometimes: sometimes
#      - I do not know: dont_know
---
#check how much space is available
id: stalker distinguishing features
question: |
  What are ${other_parties[0].name.full(middle='full')}'s distinguishing features?
subquestion: |
  Scars, tattoos, or birthmarks are all distinguishing features.
  
  If you do not know any, you can leave this blank.
fields:
  - Features: other_parties[0].features
    input type: area
    required: False
---
id: stalker probation
question: |
  Is ${other_parties[0].name.full(middle="full")} on court-ordered probation?
fields:
  - no label: respondent_on_probation
    datatype: radio
    choices:
      - Yes: Yes
      - No: No
      - I don't know.: idk
  - Probation in which county?: respondent_probation_county
    required: False
    maxlength: 25
    show if: 
      variable: respondent_on_probation
      is: "Yes"
---
id: stalker drivers license
question: |
  What is ${other_parties[0].name.full(middle='full')}'s driver's license number?
subquestion: |
  If you do not know or they do not have a driver's license, you can leave this blank.
fields:
  - License number: other_parties[0].drivers_license
    required: False
---
id: stalker access to vehicle
question: |
  Does ${other_parties[0].name.full(middle='full')}'s have access to a vehicle?
fields:
  - no label: other_parties[0].has_vehicle
    datatype: yesnomaybe
---
id: stalker vehicle details
question: |
  Enter as much information as you can about ${other_parties[0].name.full(middle='full')}'s vehicle.
subquestion: |
  If ${other_parties[0].name.full(middle='full')} has more than one car, describe the car they use most often.

  If you do not know the answer to something, you can leave it blank.
fields:
  - Year: other_parties[0].vehicle_year
    required: False
    maxlength: 4
  - Make: other_parties[0].vehicle_make
    required: False
    maxlength: 30
    help: |
      This is the brand that made the vehicle. For example, Ford, Chevy, and Toyota are all makes.
  - Model: other_parties[0].vehicle_model
    required: False
    maxlength: 30
    help: |
      This is the vehicle's type. For example, Explorer, Suburban, and Camry are all models.
  - Color: other_parties[0].vehicle_color
    maxlength: 30
    required: False
  - License plate number: other_parties[0].license_plate
    maxlength: 10
    required: False
  - State: other_parties[0].vehicle_state
    required: False
    code: |
      states_list()
---
id: stalker another number check
question: |
  Do you know another number that can identify ${other_parties[0].name.full(middle='full')}?
subquestion: |
  This could be a passport number, a military ID number, or something similar.
fields:
  - no label: other_parties[0].another_number_check
    datatype: yesnoradio
---
id: stalker another number
question: |
  What is ${other_parties[0].name.full(middle='full')} other identifying number?
fields:
  - Number: other_parties[0].another_number
  - Describe the ID number: other_parties[0].another_number_description
    help: |
      For example, this could be "military ID number" or "passport number."
---
id: stalker phone number stalker email address
question: |
  What is ${other_parties[0].name.full(middle='full')}'s contact information?
subquestion: |
  If you do not know, you can leave this blank.
fields:
  - Phone number: other_parties[0].phone_number
    datatype: al_international_phone
    required: False
  - Email address: other_parties[0].email_address
    datatype: email
    required: False
---
id: stalker address known
question: |
  Do you know ${other_parties[0].name.full(middle='full')}'s address?
fields:
  - no label: other_parties[0].address_known
    datatype: yesnoradio
---
id: unknown address note
continue button field: unknown_address_note
question: |
  Note about the unknown address
subquestion: |
  If you do not know ${other_parties[0].name.full(middle='full')}'s address, you may still file. However, you may need to show the court that you made a good effort to find their address. You can do this by filing written statement called an “affidavit” telling how you tried to find Nerd Nerd's address. If you need to file one of these, the judge or court clerk will provide it.
---
id: stalker address
question: |
  What is ${other_parties[0].name.full(middle='full')}'s address?
fields:
  - Street address: other_parties[0].address.address
    address autocomplete: True
  - Address line 2: other_parties[0].address.unit
    required: False
  - City: other_parties[0].address.city
  - State: other_parties[0].address.state
    code: |
      states_list()
    default: IL      
  - ZIP code: other_parties[0].address.zip
---
id: stalker currently employed
question: |
  Do you know if ${other_parties[0].name.full(middle='full')} is employed?
fields:
  - no label: other_parties[0].has_job
    datatype: yesnoradio
---
#what if they have more than one employer?
id: stalker employer
question: |
  Enter as much information as you can about ${other_parties[0].name.full(middle='full')}'s employer.
subquestion: |
  If you do not know who ${other_parties[0].name.full(middle='full')}'s employer is, you can leave this blank.
fields:
  - Employer name: other_parties[0].employer_name
    required: False
    maxlength: 30
  - Occupation or type of work: respondent_work_type
    required: false
    help: |
      Describe their position, job title, or role where they work. Examples: Manager, cook, cashier
    maxlength: 30
  - Standard work hours: other_parties[0].work_hours
    required: False
    maxlength: 30
    help: |
      For example, 9:00 a.m. to 5:00 p.m.
  - Street address: other_parties[0].employer_address.address
    address autocomplete: True
    required: False
  - Address line 2: other_parties[0].employer_address.unit
    required: False
  - City: other_parties[0].employer_address.city
    required: False
  - State: other_parties[0].employer_address.state
    required: False
    code: |
      states_list()  
  - ZIP code: other_parties[0].employer_address.zip
    required: False
--- 
id: stalker suicide risk
question: |
  Do you think ${other_parties[0].name.full(middle='full')} is a suicide risk?
fields:
  - no label: other_parties[0].suicide_risk
    datatype: yesnomaybe
---
id: stalker armed
question: |
  Do you think ${other_parties[0].name.full(middle='full')} is armed or dangerous to you or others?
fields:
  - no label: other_parties[0].armed
    datatype: yesnomaybe
---
id: stalker mental illness
question: |
  Does ${other_parties[0].name.full(middle='full')} have a history of mental illness?
fields:
  - no label: other_parties[0].mental_illness
    datatype: yesnomaybe
---
id: stalker alcohol
question: |
  Is ${other_parties[0].name.full(middle='full')} likely to be drunk or under the influence of alcohol?
fields:
  - no label: other_parties[0].alcohol
    datatype: yesnomaybe
---
id: stalker drugs
question: |
  Is ${other_parties[0].name.full(middle='full')} likely to be high or under the influence of drugs?
fields:
  - no label: other_parties[0].drugs
    datatype: yesnomaybe
---
id: stalker carrying weapon
question: |
  Is ${other_parties[0].name.full(middle='full')} likely to be carrying a weapon?
fields:
  - no label: other_parties[0].carrying_weapon
    datatype: yesnomaybe
---
id: stalker home weapon
question: |
  Does ${other_parties[0].name.full(middle='full')} have weapons at home?
fields:
  - no label: other_parties[0].home_weapon
    datatype: yesnomaybe
---
id: stalker weapon info
question: |
  What kind of weapons does ${other_parties[0].name.full(middle='full')} have and where do they keep them?
subquestion: |
  If you do not know, you can leave this blank
fields:
  - Weapons: other_parties[0].weapons_info
    input type: area
    required: False
---
id: stalker user divorce
question: |
  Have you and ${other_parties[0].name.full(middle='full')} previously filed a divorce?
fields:
  - no label: other_parties[0].divorced_user
    datatype: yesnoradio
---
id: divorce case info
question: |
  Enter information about the divorce case.
fields:
  - Date filed: other_parties[0].divorce_date
    datatype: date
    max: ${today()}
  - Case number: other_parties[0].divorce_number
  - Name of judge: other_parties[0].divorce_judge
    help: |
      Do not include the word "judge."
---
id: stalker parentage action
question: |
  Have you and ${other_parties[0].name.full(middle='full')} previously filed a parentage action?
fields:
  - no label: other_parties[0].parentage_action
    datatype: yesnoradio
---
id: parentage action info
question: |
  Enter information about the parentage action.
fields:
  - Date filed: other_parties[0].parentage_date
    datatype: date
    max: ${today()}
  - Case number: other_parties[0].parentage_number
  - Name of judge: other_parties[0].parentage_judge
    help: |
      Do not include the word "judge."
---
id: stalker any order of protection
question: |
  Is there an Order of Protection against ${other_parties[0].name.full(middle='full')}?
fields:
  - no label: other_parties[0].order_of_protection
    datatype: yesnomaybe
---
#test that the field show ifs are working properly
id: stalker about order of protection
question: |
  Where was the Order of Protection issued against ${other_parties[0].name.full(middle='full')}?
subquestion: |
  If you do not know, you can leave this blank.
fields:
  - State: other_parties[0].op_state
    code: |
      states_list()
  - County: other_parties[0].op_in_state_county
    datatype: integer
    required: False
    show if: 
      variable: other_parties[0].op_state 
      is: "IL"
    code: |
      court_county_lookup()
  - County: other_parties[0].op_out_state_county
    hide if: 
      variable: other_parties[0].op_state 
      is: "IL"
    required: False
---
#This code block generates options for the dropdown menu in the question asking which address the sheriff should serve the stalker at.
reconsider: True
code: |
  if other_parties[0].address_known:
    list_home_address = True
    home_address_text = other_parties[0].address.on_one_line(bare=True)
  else:
    list_home_address = False
    home_address_text = ""
  if other_parties[0].has_job and other_parties[0].employer_address.on_one_line(bare=True) != "":
    list_employer_address = True
    employer_address_text = other_parties[0].employer_address.on_one_line(bare=True)
  else:
    list_employer_address = False
    employer_address_text = ""
---
id: stalker which address
question: |
  Where should the sheriff go to deliver court papers to ${other_parties[0].name.full(middle='full')}?
fields: 
  - no label: other_parties[0].which_address
    choices:
      - ${home_address_text}: home_address
        show if: list_home_address
      - ${employer_address_text}: employer_address
        show if: list_employer_address
      - An address I will enter: add_service_address
  - Street address: other_parties[0].service_address.address
    address autocomplete: True
    required: False
    show if:
      variable: other_parties[0].which_address
      is: "add_service_address" 
  - Address line 2: other_parties[0].service_address.unit
    required: False
    show if:
      variable: other_parties[0].which_address
      is: "add_service_address" 
  - City: other_parties[0].service_address.city
    required: False
    show if:
      variable: other_parties[0].which_address
      is: "add_service_address" 
  - State: other_parties[0].service_address.state
    required: False
    show if:
      variable: other_parties[0].which_address
      is: "add_service_address" 
    code: |
      states_list()  
  - ZIP code: other_parties[0].service_address.zip
    required: False
    show if:
      variable: other_parties[0].which_address
      is: "add_service_address" 
  #- Phone number: other_parties[0].service_phone
  #  required: False
  #- Email address: other_parties[0].service_email
  #  required: False
validation code: |
  if other_parties[0].which_address == "home_address":
    other_parties[0].service_address = other_parties[0].address
  elif other_parties[0].which_address == "employer_address":
    other_parties[0].service_address = other_parties[0].employer_address
---
id: list bonus service check
question: |
  Do you want to list another place where the sheriff could give court papers to ${other_parties[0].name.full(middle='full')}?
fields:
  - no label: other_parties[0].bonus_service_check
    datatype: yesnoradio
---
id: bonus service address
question: |
  Where else can the sheriff go to deliver court papers to ${other_parties[0].name.full(middle='full')}?
fields: 
  - no label: other_parties[0].which_bonus_address
    choices:
    - ${other_parties[0].address.on_one_line(bare=True)}: home_address
      show if: other_parties[0].address_known and other_parties[0].which_address != "home_address"
    - ${other_parties[0].employer_address.on_one_line(bare=True)}: employer_address
      show if: other_parties[0].has_job and other_parties[0].employer_address.on_one_line(bare=True) != ""
    - An address I will enter: service_address
  - Street address: other_parties[0].bonus_service_address.address
    address autocomplete: True
    show if:
      variable: other_parties[0].which_bonus_address
      is: "service_address" 
  - Address line 2: other_parties[0].bonus_service_address.unit
    required: False
    show if:
      variable: other_parties[0].which_bonus_address
      is: "service_address" 
  - City: other_parties[0].bonus_service_address.city
    show if:
      variable: other_parties[0].which_bonus_address
      is: "service_address" 
  - State: other_parties[0].bonus_service_address.state
    show if:
      variable: other_parties[0].which_bonus_address
      is: "service_address" 
    code: |
      states_list()  
  - ZIP code: other_parties[0].bonus_service_address.zip
    show if:
      variable: other_parties[0].which_bonus_address
      is: "service_address" 
  #- Phone number: other_parties[0].bonus_service_phone
  #  required: False
  #- Email address: other_parties[0].bonus_service_email
  #  required: False
validation code: |
  if other_parties[0].which_bonus_address == "home_address":
    other_parties[0].bonus_service_address = other_parties[0].address
  elif other_parties[0].which_bonus_address == "employer_address":
    other_parties[0].bonus_service_address = other_parties[0].employer_address
---
id: stalking event intro
continue button field: stalking_event_intro
question: |
  Reasons for the Stalking No Contact Order
subquestion: |
  The following questions will ask about what ${other_parties[0].name.full(middle='full')} did to make you afraid or distressed.
  
  You should be specific. Tell when and where each event happened, and how it affected you.
  
  You should enter the most recent event first.
  
  The judge will expect more details about recent events than past events. Enter exact dates if you can. For repeated events, you may tell how often the behavior took place.
---
id: stalking event info
question: |
  % if i == 0:
  Tell us about the most recent incident of stalking
  % else:
  Tell us about the ${ordinal(i)} most recent incident of stalking
  % endif
subquestion: |
  Try to be specific about:

  * What ${other_parties[0].name.full(middle='full')} did,
  * What ${other_parties[0].name.full(middle='full')} said,
  * Where the stalking happened,
  * How the stalking happened, such as in person, by phone or text, etc.,
  * Who was there when the stalking happened, and
  * The effects the stalking had on you, other survivors, and anyone else who was there. It is important to mention any children that were present or were affected by the stalking.
  
  Include any threats or use of a weapon.
  
  For repeated stalking, you can say things like “weekly” for the date or “anytime I work late” for the time.
fields:
  - Date: stalking_events[i].name.text
    maxlength: 25
    help: |
      If you don't remember the exact date, enter the month and year. Use abbreviations if needed.
  - Time: stalking_events[i].time
    required: False
    maxlength: 15
    help: |
      If you don't remember the exact time, enter "morning" or "afternoon" or "night." Use abbreviations if needed.
  - Place: stalking_events[i].place
  - Description: stalking_events[i].description
    input type: area
    rows: 12
    maxlength: 800
    help: |
      The petition has space for about 800 characters for each incident.
---
#id: stalking event date time
#question: |
#  When did the ${ordinal(i)} stalking event take place?
#subquestion: |
#  If you not remember the exact date, enter the month and year.
#fields:
#  - Date: stalking_events[i].name.text
#  - Time: stalking_events[i].time
#    datatype: time
#    required: False
#    help: |
#      If you do not remember this and do not have a good estimate, you can leave this blank.
#---
#id: stalking event place
#question: |
#  Where did the ${ordinal(i)} stalking event take place?
#fields:
#  - Place: stalking_events[i].place
#---
#id: stalking event description
#question: |
#  Describe the ${ordinal(i)} stalking event.
#subquestion: |
#  Be as specific as possible
#fields:
#  - Description: stalking_events[i].description
#    input type: area
---
id: stalking event police report
question: |
  Was a police report filed for the ${ordinal(i)} stalking event?
fields:
  - no label: stalking_events[i].police_check
    datatype: yesnoradio
  - Police report number: stalking_events[i].police_number
    required: False
    show if: stalking_events[i].police_check
    help: |
      If you do not know, you can leave this blank.
---
id: stalking event is there another
question: |
  Do you want to add another stalking event?
subquestion: |
  % if len(stalking_events.elements) == 1:  
  So far you told us about 1 incident. 
  % else:
  So far you told us about ${ str(len(stalking_events.elements)) } incidents. 
  % endif
fields:
  - no label: stalking_events.there_is_another
    datatype: yesnoradio
---
#Is it a concern that the ILAO article talks about 3 types of protective order when only 2 are available here?
id: order type
question: |
  What kind of Stalking No Contact Order do you want?
subquestion: |
  There are two kinds of SNCO: a Plenary Order and an Emergency Order. You can ask the court for both if you want.
  
  For a Plenary Order, the court will issue an order after a hearing at which the abuser can also present a case. This order can last a long time, usually two years. It can even be made permanent in some cases.

  For an Emergency Order, the court will issue an order which takes effect immediately. The order can be issued even before your abuser knows that you have filed a petition. However, the order only lasts 21 days, or until a formal court hearing where the abuser can present a case to the court also. 
  
  To learn more, read ILAO's article about the [**3 types of Orders of Protection**](https://www.illinoislegalaid.org/legal-information/3-types-orders-protection).
  
fields:
  - no label: order_type
    datatype: checkboxes
    none of the above: False
    choices:
      - Plenary Stalking No Contact Order: plenary
      - Emergency Stalking No Contact Order: emergency
---
#Can we dig up any examples or more information about what this should look like?
#Check space limits on template
id: emergency reason
question: |
  Why should the court grant an *Emergency Order* without needing to tell ${other_parties[0].name.full(middle='full')}?
subquestion: |
  Use complete sentences and proper punctuation. Your response will appear in your forms exactly as you type it. 
fields:
  - no label: emergency_reason
    input type: area
---
id: protection requested
question: |
  What do you want the court to make ${other_parties[0].name.full(middle='full')} stop doing?
subquestion: |
  ${collapse_template(stay_away_contact)}
fields:
  - I want the court to make ${other_parties[0].name.full(middle='full')} stop...: protection_requested
    datatype: checkboxes
    none of the above: True
    choices:
      - "Stop stalking and threatening the victim, victim's family and household members, and stop enlisting other people to stalk or threaten": stalking
      - "Stop contacting the victim, victim's family and household members whether in person, by phone, by e-mail, by note or by sending messages through other people": contacting
      - "Stay away from the locations of the victim, victim's family and household member's home, work, school, or daycare": away
---
template: stay_away_contact
subject: |
  **What do "stay away" and "contact" mean here?**
content: |
  **Stay Away**: to refrain from both physical presence and nonphysical contact with the Petitioner directly, indirectly, or through third parties who may or may not know of the order. "Nonphysical contact" includes, but is not limited to, telephone calls, mail, e-mail, fax, and written notes.

  **Contact**: includes any contact with the victim, that is initiated or continued without the victim’s consent, or that is in disregard of the victim’s expressed desire that the contact be avoided or discontinued, including but not limited to being in the physical presence of the victim; appearing within the sight of the victim; approaching or confronting the victim in a public place or on private property; appearing at the workplace or residence of the victim; entering onto or remaining on property owned, leased, or occupied by the victim; or placing an object on, or delivering an object to, property owned, leased, or occupied by the victim.
---
id: distance away
question: |
  How far should ${other_parties[0].name.full(middle='full')} stay away?
subquestion: |
  You should enter a distance in feet.

  For reference, a football field is 300 feet long. A car is about 15 feet long. A semi truck trailer is about 50 feet long. 
fields:
  - Distance (in feet): distance_away
    datatype: integer
---
id: protected place types
question: |
  What kinds of places do you want ${other_parties[0].name.full(middle='full')} to stay away from?
subquestion: |
  **Caution:** You must tell ${other_parties[0].name.full(middle='full')} the address of any place you want them to stay away from. If you do not want ${other_parties[0].name.full(middle='full')} to know an address, you should not list that location below.
fields:
  - no label: protected_place_types
    datatype: checkboxes
    none of the above: False
    choices:
      - Home
      - Workplace
      - School
      - Day Care: day_care
      - Other
---
depends on:
  - protected_place_types
code: |
  if protected_place_types['Workplace'] or protected_place_types['School'] or protected_place_types['day_care']:
    employers_schools.there_are_any = True
  else:
    employers_schools.there_are_any = False
---
id: safe home address
question: |
  What is your home address?
subquestion: |
  You answered earlier that you want to hide your real address.
  
  If you do not want ${other_parties[0].name.full(middle='full')} to know your home address, do not list it here. You may want to click **Back** and not include your home as a protected place.
  
  The address entered here will be printed on a form telling ${other_parties[0].name.full(middle='full')} where they cannot go.
fields:
  - Street address: home_address.address
    address autocomplete: True
  - Address line 2: home_address.unit
    required: False
  - City: home_address.city
  - State: home_address.state
    code: |
      states_list()
    default: IL      
  - ZIP code: home_address.zip
---
id: other places
question: |
  What other places do you want the court to order ${other_parties[0].name.full(middle='full')} to stay away from?
fields:
  - no label: other_places
    input type: area
---
id: employers schools name
question: |
  What is the name and type of the ${ordinal(i)} workplace, school, or day care you want ${other_parties[0].name.full(middle='full')} to stay away from?
fields:
  - Type: employers_schools[i].type
    choices:
      - Work or job site: work
        show if: protected_place_types['Workplace']
      - School: school
        show if: protected_place_types['School']
      - Day care: day_care
        show if: protected_place_types['day_care']
  - Name: employers_schools[i].name.first
---
id: employers schools address
question: |
  What is ${employers_schools[i].name.first}'s address?
fields:
  - Street address: employers_schools[i].address.address
    address autocomplete: True
  - Address line 2: employers_schools[i].address.unit
    required: False
  - City: employers_schools[i].address.city
  - State: employers_schools[i].address.state
    code: |
      states_list()
    default: IL      
  - ZIP code: employers_schools[i].address.zip
---
id: employers schools there is another
question: |
  Do you want to add another workplace, school, or day care ${other_parties[0].name.full(middle='full')} should stay away from?
subquestion: |
  So far you have told us about ${comma_and_list(employers_schools.complete_elements().full_names())}.
fields:
  - no label: employers_schools.there_is_another
    datatype: yesnoradio
---
id: live with stalker
question: |
  Does ${other_parties[0].name.full(middle='full')} live at the same address as you?
subquestion: |
  If you click **Yes**, your forms will ask to give you exclusive access to your home. This means the court **might** order ${other_parties[0].name.full(middle='full')} to stay away, even temporarily.
fields:
  - no label: live_with_stalker
    datatype: yesnoradio
---
id: school with stalker
question: |
  Do you and ${other_parties[0].name.full(middle='full')} go to the same school?
fields:
  - no label: school_with_stalker
    datatype: yesnoradio
---
id: which stalker school
question: |
  Which school do you and ${other_parties[0].name.full(middle='full')} go to?
field: which_stalker_school
datatype: checkboxes
choices:
  - code: |
      school_list
---
reconsider: True
code: |
  school_list.clear()
  work_list.clear()
  for place in employers_schools:
    if place.type == "school":
      school_list.append(place)
    elif place.type == "work":
      work_list.append(place)
  school_list.there_is_another = False
  work_list.there_is_another = False
  make_lists = True
---
id: work with stalker
question: |
  Do you and ${other_parties[0].name.full(middle='full')} have the same workplace?
fields:
  - no label: work_with_stalker
    datatype: yesnoradio
---
id: which stalker work
question: |
  Which work place do you and ${other_parties[0].name.full(middle='full')} work at?
field: which_stalker_work
datatype: checkboxes
choices:
  - code: |
      work_list
---
id: stalker prohibit firearms
question: |
  Do you want the court to stop ${other_parties[0].name.full(middle='full')} from having firearms or a Firearms Owner Identification Card?
fields:
  - no label: other_parties[0].prohibit_firearms
    datatype: yesnoradio
---
id: stalker pay costs describe costs
question: |
  Do you want the court to make ${other_parties[0].name.full(middle='full')} pay any costs that were a result of their stalking?
subquestion: |
  This could include things like court costs, missing work, property damage, or having to pay to stay somewhere else to avoid stalking.
  
  You will need to prove that the costs were a direct result of stalking.
fields: 
  - no label: other_parties[0].pay_costs
    datatype: yesnoradio
  - What costs do you want ${other_parties[0].name.full(middle='full')} to pay?: other_parties[0].describe_costs
    input type: area
    show if: other_parties[0].pay_costs
---
id: stalker anything else
question: |
  Do you want the court to make ${other_parties[0].name.full(middle='full')} to do or stop doing anything else?
fields: 
  - no label: other_parties[0].anything_else
    datatype: yesnoradio
  - What do you want ${other_parties[0].name.full(middle='full')} to do or stop doing?: other_parties[0].what_else
    input type: area
    show if: other_parties[0].anything_else
---
id: no protection chosen
event: other_parties[0].no_protection_chosen
question: |
  Sorry
subquestion: |
  You have not chosen to ask for any of the protections a Stalking No Contact Order can give you.
  
  If you have made a mistake, click **Back.**
buttons:
  - Exit: exit
  - Restart: restart
---
id: additional service information cook
question: |
  What other information will help the sheriff deliver court papers to ${other_parties[0].name.full(middle="full")}?
subquestion: |
  You can add things like:
  
  * Best days and times to serve court papers,
  * Details about the places where ${other_parties[0].name.full(middle="full")} can be found, and
  * Information about other people at those locations that can help find ${other_parties[0].name.full(middle="full")}.

  This will not appear on the forms that will be filed with the court. It goes on the Confidential Protective Order Information Sheet for the Sheriff.
fields:
  - no label: service_information
    input type: area
    rows: 2
    maxlength: 150
    required: False
---
id: signature
question: |
  Do you want to add your e-signature to your forms?
subquestion: |
  This program can put "**/s/ ${users[0].name.full(middle='full')}**" where you would sign your name. The court will accept this as your signature.
  
  If you do not add your **{e-signature}** now, you must sign your forms before you file them.
  
  <div class="alert alert-info ilao-info" role="alert">
    <h6 class="alert-heading">What it means to sign your forms</h6>
    <p>By signing your <i>Petition for Stalking No Contact Order</i>, you are certifying that:
  <p>
  <p><ul>
  <li>You read the document,</li>
  <li>You believe it to be true and correct, and</li>
  <li>You are not filing it for an improper purpose.</li>
  </ul><p>
  <p>See the <a href="https://ilcourtsaudio.blob.core.windows.net/antilles-resources/resources/9ce1fce9-895f-463e-b87d-f9b7631f8fde/Rule%20137.pdf"><b>Illinois Supreme Court Rule 137</b></a> for more information.</p>
  </div>
field: e_signature
choices:
  - Yes: True
  - No, I will sign my forms later.: False
terms:
  - "e-signature": |
      An e-signature is an electronic signature. It is a digital version of a signature that has the same effect as a hand-written signature.
---
id: debug
continue button field: debug_page
question: |
  Debug
subquestion: |
  Others protected number gathered: ${others_protected.number_gathered()}
---
id: forms assembling
continue button field: forms_assembling
question: |
  Almost done
subquestion: |
  After you click **Next**, it may take a few moments to finish making your forms.
  
  ###### You do not need to refresh your screen. Hang in there!
  
  [NEWLINE]
---
id: get docs screen
question: |
  Download
subquestion: |
  Your forms are ready. View and download your forms below. Click **Make changes** to fix any mistakes.

  This program does not file your ${ form_name } forms with the court. You will need to do this yourself.

  ${ action_button_html(url_action('review_answers'), label=':edit: Make changes', color='success', size="md") }
  
  ${ al_user_bundle.download_list_html() }

  &nbsp;

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

  **Note:** This program does not file your ${ form_name } forms with the court.
  
  Thank you for using ILAO Easy Forms!
event: get_docs_screen
under: |
  **Worried about doing this on your own?** Call the [**Illinois Domestic Violence Hotline**](https://the-network.org/get-help/) at 877-863-6338 (877-TO END DV) to talk with an advocate.
  % if not user_logged_in():
  
  [${fa_icon("sign-in-alt", color="#0079d0", size="sm")} Sign-in](${url_of('login', next=interview_url())}) or [create](${url_of('register', next=interview_url())}) an ILAO Easy Form account to save your progress (optional).
  % endif 

  &nbsp;
  ${ action_button_html(interview_url(i="docassemble.ILAO:feedback.yml", easy_form_interview=ilao_easy_form_url, easy_form_title=ilao_easy_form_title, easy_form_page=user_info().question_id, easy_form_variable=user_info().variable, local=False,reset=1), label=':comment: Was this program helpful?', color="#181c36", size="md", new_window=True) }
---
generic object: ALDocumentBundle
template: x.send_email_template
subject: |
  Your forms
content: |
  Your forms are attached.
  
  Thanks for using ILAO Easy Forms!
  
  [Illinois Legal Aid Online](https://www.illinoislegalaid.org)
---
objects:
  - snco_instructions: ALDocument.using(title="Instructions", filename="instructions.pdf", has_addendum=False)
  - snco_petition: ALDocument.using(title="Petition", filename="petition.pdf", has_addendum=False)
  #- op_schools: ALDocument.using(title="Confidential School or Daycare", filename="confidential_schools.pdf", has_addendum=False)
  #- additional_incidents: ALDocument.using(title="Additional Incidents of Abuse", filename="additional_incidents.pdf", has_addendum=False)
  #- additional_cases: ALDocument.using(title="Additional Case Information", filename="additional_cases.pdf", has_addendum=False)
  #- emergency_op: ALDocument.using(title="Emergency Order of Protection (draft)", filename="emergency_op.pdf", has_addendum=False)
  - snco_order: ALDocument.using(title="Order", filename="snco_order.pdf", has_addendum=False)
  - snco_summons: ALDocument.using(title="Summons", filename="summons.pdf", has_addendum=False)
  #- affidavit_pt_supervisor: ALDocument.using(title="Affidavit of Parenting Time Supervisor", filename="affidavit_pt_supervisor.pdf", has_addendum=False)
  - efiling_exemption: ALDocument.using(title="E-filing exemption (optional)", filename="e-filing_exemption.pdf", has_addendum=False)
  - cook_dv_cover_sheet: ALDocument.using(title="Domestic Violence Cover Sheet", filename="cook_dv_cover_sheet.pdf", has_addendum=False)
  - cook_sheriff_info_sheet: ALDocument.using(title="Confidential Sheriff Information Sheet", filename="cook_sheriff_info_sheet.pdf", has_addendum=False)
  - cook_petition: ALDocument.using(title="Petition", filename="cook_petition.pdf", has_addendum=False)
  - cook_findings: ALDocument.using(title="Findings", filename="cook_findings.pdf", has_addendum=False)
  - cook_disposition_order: ALDocument.using(title="Disposition order", filename="cook_disposition.pdf", has_addendum=False)
  - others_protected_addendum: ALDocument.using(title="Others protected addendum", filename="others_protected_addendum.pdf", has_addendum=False)
  - snco_events_addendum: ALDocument.using(title="Stalking incidents addendum", filename="snco_events_addendum.pdf", has_addendum=False)
---
objects:
  - petition_bundle: ALDocumentBundle.using(elements=[snco_petition, cook_petition, others_protected_addendum, snco_events_addendum], filename="petition.pdf", title="Petition")
---
objects: 
  - al_user_bundle: ALDocumentBundle.using(elements=[snco_instructions, petition_bundle, cook_dv_cover_sheet, snco_order, cook_findings, cook_disposition_order, snco_summons, cook_sheriff_info_sheet, efiling_exemption], filename="stalking_no_contact_order.pdf", title="All forms")
  - al_court_bundle: ALDocumentBundle.using(elements=[snco_instructions, petition_bundle, cook_dv_cover_sheet, snco_order, cook_findings, cook_disposition_order, snco_summons, cook_sheriff_info_sheet, efiling_exemption], filename="stalking_no_contact_order.pdf", title="Order of protection")
---
code: |
  snco_instructions.enabled = True
  #op_schools.enabled = False
  snco_summons.enabled = True
  efiling_exemption.enabled = False
  others_protected_addendum.enabled = False
  petition_bundle.enabled = True
  snco_events_addendum.enabled = False
  others_protected_addendum.enabled = False
  
  if trial_court_index == -1:
    cook_dv_cover_sheet.enabled = True
    cook_sheriff_info_sheet.enabled = True
    cook_petition.enabled = True
    cook_findings.enabled = True
    cook_disposition_order.enabled = True
    snco_petition.enabled = False
    snco_order.enabled = False
    if others_protected.number_gathered() > 0:
      others_protected_addendum.enabled = True
    if stalking_events.number_gathered() > 3:
      snco_events_addendum.enabled = True
  else:
    cook_dv_cover_sheet.enabled = False
    cook_sheriff_info_sheet.enabled = False
    cook_petition.enabled = False
    cook_findings.enabled = False
    cook_disposition_order.enabled = False
    snco_petition.enabled = True
    snco_order.enabled = True
    if others_protected.number_gathered() > 2:
      others_protected_addendum.enabled = True
    if stalking_events.number_gathered() > 2:
      snco_events_addendum.enabled = True
      
---
attachment:
  variable name: snco_instructions[i]
  name: instructions
  filename: snco_instructions
  docx template file: snco_instructions.docx
---
attachment:
  variable name: snco_events_addendum[i]
  name: snco_events_addendum
  filename: snco_events_addendum
  docx template file: snco_events_addendum.docx
---
attachment:
  variable name: others_protected_addendum[i]
  name: others_protected_addendum
  filename: others_protected_addendum
  docx template file: others_protected_addendum.docx
---
attachment:
  variable name: cook_dv_cover_sheet[i]
  name: cook_dv_cover_sheet
  filename: cook_dv_cover_sheet
  skip undefined: True
  editable: False
  pdf template file: cook_dv_cover_sheet.pdf
  fields:
    - "petitioner__1": ${ users[0].name.full(middle="full") }
    - "respondent": ${other_parties[0].name.full(middle="full")}
    - "case_number__1": ${ case_number }
    - "stalking_petition": ${ True }

    - "involves_minors_yes": ${ True if any_minors else '' }
    - "involves_minors_no": ${ True if not any_minors else '' }
    - "previous_divorce_yes": ${ True if other_parties[0].divorced_user else '' }
    - "previous_divorce_no": ${ True if not other_parties[0].divorced_user else '' }
    - "previous_parentage_yes": ${ True if other_parties[0].parentage_action and not other_parties[0].divorced_user else '' }
    - "previous_parentage_no": ${ True if other_parties[0].divorced_user or not other_parties[0].parentage_action else '' }
    - "previous_cook_case_date": |  
        % if other_parties[0].divorced_user:
        ${ format_date(other_parties[0].divorce_date, format='MMM d, yyyy')}
        % elif other_parties[0].parentage_action:
        ${ format_date(other_parties[0].parentage_date, format='MMM d, yyyy')} 
        % else: 
        ${''} 
        % endif
    - "previous_cook_case_number": |
        % if other_parties[0].divorced_user:
        ${ other_parties[0].divorce_number}
        % elif other_parties[0].parentage_action:
        ${ other_parties[0].parentage_number} 
        % else: 
        ${''} 
        % endif
    - "previous_cook_case_judge": |
        % if other_parties[0].divorced_user:
        ${ other_parties[0].divorce_judge}
        % elif other_parties[0].parentage_action:
        ${ other_parties[0].parentage_judge} 
        % else: 
        ${''} 
        % endif
    - "pro_se_cb": ${ True }
    - "petitioner__2": ${ users[0].name.full(middle="full") }
    - "preparer_address_line_1": ${ users[0].address.line_one(bare=True) }
    - "petitioner_city": ${ users[0].address.city }
    - "petitioner_state": ${ users[0].address.state }
    - "petitioner_zip": ${ users[0].address.zip }
    - "preparer_phone": ${ phone_number_formatted(users[0].phone_number) }
    - "preparer_email": ${ users[0].email if users[0].has_email_address else ""}
---
attachment:
  variable name: cook_sheriff_info_sheet[i]
  name: cook_sheriff_info_sheet
  filename: cook_sheriff_info_sheet
  skip undefined: True
  editable: False
  pdf template file: cook_sheriff_info_sheet.pdf
  fields:
    - "respondent": ${other_parties[0].name.full(middle="full")}
    - "case_number__1": ${ case_number }
    - "alias_names": ${ comma_and_list.other_parties[0].other_names}
    - "respondent_gender": ${ other_parties[0].other_gender if other_parties[0].gender == 'other' else other_parties[0].gender }
    - "respondent_race": ${ other_parties[0].other_race if other_parties[0].race == 'other' else other_parties[0].race }
    - "respondent_dob": |
        % if knows_respondent_dob == 'exact' and other_parties[0].birthdate != "":
        ${ other_parties[0].birthdate }
        % elif knows_respondent_dob == 'some':
        ${ other_parties[0].birthdate_info }
        % else:
        ${ "do not know" }
        % endif
    - "respondent_age": |
        % if knows_respondent_dob == 'exact' and other_parties[0].birthdate != "":
        ${ other_parties[0].age_in_years() }
        % endif
    - "respondent_height": |
        % if other_parties[0].height_feet > 1:
        ${ str(other_parties[0].height_feet) + "\'" }
        % if other_parties[0].height_inches > 0:
        ${ str(other_parties[0].height_inches) + "\""}
        % endif
        % else:
        ${""}
        % endif
    - "respondent_weight": ${ str(other_parties[0].weight) + " lbs." if other_parties[0].weight > 0 else '' }
    - "respondent_skin": |
        % if other_parties[0].skin != "":
        ${ other_parties[0].other_skin_tone if other_parties[0].skin_tone == 'other' else other_parties[0].skin_tone }
        % endif
    - "respondent_hair": ${ other_parties[0].hair_color}
    - "respondent_eyes": ${ other_parties[0].eye_color if other_parties[0].eye_color != "" else '' }
    - "respondent_glasses": ${other_parties[0].wear_glasses if other_parties[0].wear_glasses != "" else ''}
    - "respondent_tattoos": ${ other_parties[0].features if other_parties[0].features != "" else '' }
    - "respondent_history_illness": ${ other_parties[0].mental_illness }
    - "respondent_alcohol": ${ other_parties[0].alcohol}
    - "respondent_drugs": ${ other_parties[0].drugs }
    - "respondent_firearms_on_person": ${ other_parties[0].carrying_weapon }
    - "respondent_weapons_in_home": ${ other_parties[0].home_weapon }
    - "respondent_weapons_description": ${ other_parties[0].weapons_info if other_parties[0].carrying_weapon or other_parties[0].home_weapon == True else "" }        
    - "respondent_suicidal": ${ other_parties[0].suicide_risk }    
    - "respondent_on_probation":  ${ True if respondent_on_probation == "Yes" else ''  } 
    - "respondent_probation_county":  ${ respondent_probation_county if respondent_on_probation == "Yes" else ''  } 
    
    - "respondent_employer": ${ other_parties[0].employer_name}
    - "respondent_work_type": ${respondent_work_type}       
    - "service_address_line_1": ${other_parties[0].servie_address.line_one(bare=True)}
    - "service_city": ${other_parties[0].service_address.city}
        
    - "last_known_address": |
        % if other_parties[0].address_known:
        ${other_parties[0].address.line_one(bare=True)}
        % endif       
    - "last_known_city": |
        % if other_parties[0].address_known:
        ${other_parties[0].address.city}
        % endif  
    - "respondent_work_address": |
        % if other_parties[0].has_job:
        ${ other_parties[0].employer_address.line_one(bare=True) }
        % else:
        ${ "do not know" }
        % endif
    - "respondent_work_city": |
        % if other_parties[0].has_job:
        ${ other_parties[0].employer_address.city }
        % else:
        ${ "do not know" }
        % endif
    - "respondent_employer": ${other_parties[0].employer_name if other_parties[0].has_job else ""}
    - "respondent_work_type": ${respondent_work_type if other_parties[0].has_job else ""}
    - "service_alt_address_line_1": ${other_parties[0].bonus_service_address.line_one(bare=True) if other_parties[0].bonus_service_check else ""}
    - "service_alt_city": ${other_parties[0].bonus_service_address.city if other_parties[0].bonus_service_check else ""}
    - "respondent_phone": ${ phone_number_formatted(other_parties[0].phone_number) if other_parties[0].phone_number != "" else ""}
    - "service_information": ${ service_information }
    - "cook_vehicle_make": ${ other_parties[0].vehicle_make }
    - "cook_vehicle_model": ${ other_parties[0].vehicle_model }
    - "cook_vehicle_year": ${ other_parties[0].vehicle_year }
    - "cook_vehicle_color": ${ other_parties[0].vehicle_color }
    - "cook_vehicle_plate": ${ other_parties[0].license_plate }
    - "cook_vehicle_state": ${ state_name(other_parties[0].vehicle_state) }

    - "preparer_name": ${ users[0].name.full(middle="full") }
    - "preparer_phone": ${ phone_number_formatted(users[0].phone_number)}
---
attachment:
  variable name: cook_disposition_order[i]
  name: cook_disposition_order
  filename: cook_disposition_order
  skip undefined: True
  editable: False
  pdf template file: cook_disposition_order.pdf
  fields:
    #What are these "on behalf of" fields in the template for?
    - "on_behalf_1": ${""}
    - "on_behalf_2": ${""}
    - "petitioner_name": ${users[0].name.full(middle='full')}
    - "respondent_name": ${other_parties[0].name.full(middle='full')}
    #Can the case number be known?
    - "case_number": ${""}
    #What is the leads number?
    - "leads_number": ${""}
    - "respondent_birth": ${other_parties[0].birthdate}
    #What does it mean for an SNCO to be an independent proceeding, cirminal proceeding, or deliquency petition? 
    - "independent": ${False}
    - "criminal": ${False}
    - "delinquency": ${False}
    #Should these checkboxes be left blank for the court to mark?
    - "emergency_check": ${order_type['emergency']}
    - "plenary_check": ${order_type['plenary']}
---
attachment:
  variable name: cook_findings[i]
  name: cook_findings
  filename: cook_findings
  skip undefined: True
  editable: False
  pdf template file: cook_findings.pdf
  fields:
    #What are these "on behalf of" fields in the template for?
    - "people_ex_rel": ${""}
    - "on_behalf_of": ${""}
    - "petitioner_name": ${users[0].name.full(middle='full')}
    - "respondent_name": ${other_parties[0].name.full(middle='full')}
    #Can the case number be known?
    - "case_number": ${""}
    #What is the proceeding type?
    - "independent": ${False}
    - "other_proceeding_check": ${False}
    - "other_proceeding_text": ${""}
    - "criminal_proceeding": ${False}
    - "juvenile": ${False}
    #Should these checkboxes be left blank for the court to mark?
    - "emergency_check": ${order_type['emergency']}
    - "plenary_check": ${order_type['plenary']}
---
attachment:
  variable name: cook_petition[i]
  name: cook_petition
  filename: cook_petition
  skip undefined: True
  editable: False
  pdf template file: cook_petition.pdf
  fields:
    #What are these "on behalf of" fields in the template for?
    - "people_ex_rel": ${""}
    - "on_behalf_of": ${""}
    - "self_name": ${""}
    - "behalf_petitioner": ${users[0].name.full(middle='full')}
    - "respondent": ${other_parties[0].name.full(middle='full')}
    #Can the case number be known?
    - "case_number": ${""}
    - "respondent_birth": ${other_parties[0].birthdate}
    #What does it mean for an SNCO to be an independent proceeding, cirminal proceeding, or deliquency petition? 
    - "independent": ${False}
    - "criminal": ${False}
    - "juvenile": ${False}
    - "emergency_check": ${order_type['emergency']}
    - "plenary_check": ${order_type['plenary']}
    - "petitioner_name": ${users[0].name.full(middle='full')}
    #These child name and adult name variables seem to be distinct from the others protected list. How should they be populated?
    - "child_name": ${""}
    - "adult_name": ${""}
    - "safe_address": ${hide_address}
    - "petitioner_address_line_one": ${users[0].address.line_one(bare=True)}
    - "petitioner_city": ${users[0].address.city}
    - "petitioner_state": ${ users[0].address.state}
    - "petitioner_zip": ${users[0].address.zip}
    - "respondent_name": ${other_parties[0].name.full(middle='full')}
    - "respondent_address_line_one": ${other_parties[0].address.line_one(bare=True)}
    - "respondent_city": ${other_parties[0].address.city}
    - "respondent_state": ${ other_parties[0].address.state}
    - "respondent_zip": ${other_parties[0].address.zip}
    - "respondent_birth_date": ${other_parties[0].birthdate}
    - "respondent_is_male": ${True if other_parties[0].gender == "Male" else False}
    - "respondent_is_female": ${True if other_parties[0].gender == "Female" else False}
    - "respondent_race": ${other_parties[0].other_race if other_parties[0].race == "Other" else other_parties[0].race}
    - "respondent_height": ${(other_parties[0].height_feet + "'" + other_parties[0].height_inches  + "''") if other_parties[0].height_feet != "" else ""}
    - "respondent_weight": ${other_parties[0].weight}
    - "respondent_characteristics": ${other_parties[0].features}
    - "employer_name": ${ other_parties[0].employer_name if other_parties[0].has_job else ""}
    - "employer_address_line_one": ${ other_parties[0].employer_address.line_one(bare=True) if other_parties[0].has_job else ""}
    - "employer_city": ${ other_parties[0].employer_address.city if other_parties[0].has_job else ""}
    - "employer_state": ${ other_parties[0].employer_address.state if other_parties[0].has_job else ""}
    - "employer_zip": ${ other_parties[0].employer_address.zip if other_parties[0].has_job else ""}
    - "protect_others_check": ${ True if others_protected.there_are_any else False}
    - "others_protected_list": ${comma_and_list(others_with_minor_initials) if others_protected.there_are_any else ""}
    - "incidents_check": ${True}
    - "date_incident_1": ${stalking_events[0].name.text}
    - "time_incident_1": ${stalking_events[0].time}
    #- "am_incident_1": ${ True if format_time(stalking_events[0].time, format='a')=='AM' else False }
    #- "pm_incident_1": ${ True if format_time(stalking_events[0].time, format='a')=='PM' else False }
    - "location_incident_1": ${stalking_events[0].place}
    - "description_incident_1": ${stalking_events[0].description}
    - "date_incident_2": ${stalking_events[1].name.text}
    - "time_incident_2": ${stalking_events[1].time}
    #- "am_incident_2": ${ True if format_time(stalking_events[1].time, format='a')=='AM' else False }
    #- "pm_incident_2": ${ True if format_time(stalking_events[1].time, format='a')=='PM' else False }
    - "location_incident_2": ${stalking_events[1].place}
    - "description_incident_2": ${stalking_events[1].description}
    - "description_incident_2_continued": ${""}
    - "date_incident_3": ${stalking_events[2].name.text}
    - "time_incident_3": ${stalking_events[2].time}
    #- "am_incident_3": ${ True if format_time(stalking_events[2].time, format='a')=='AM' else False }
    #- "pm_incident_3": ${ True if format_time(stalking_events[2].time, format='a')=='PM' else False }
    - "location_incident_3": ${stalking_events[2].place}
    - "description_incident_3": ${stalking_events[2].description}
    - "no_police_report": ${ False if any_police_reports else True}
    - "yes_police_report": ${any_police_reports}
    - "report_number": ${comma_and_list(report_numbers) if any_police_reports else ""}
    - "others_protected": ${comma_and_list(others_protected) if others_protected.there_are_any else ""}
    - "no_stalking": ${protection_requested['stalking']}
    - "no_contact": ${protection_requested['contacting']}
    - "no_contact_list": ${comma_and_list(others_with_minor_initials)}
    - "no_coming": ${protection_requested['away']}
    - "feet_away": ${distance_away}
    - "no_home": ${protected_place_types['Home']}
    - "no_school": ${protected_place_types['School']}
    - "no_day_care": ${protected_place_types['day_care']}
    - "no_workplace": ${protected_place_types['Workplace']}
    - "no_other_place": ${protected_place_types['Other']}
    - "other_place_line_1": ${""}
    - "other_place_line_2": ${other_places}
    - "away_address_list": ${comma_and_list(away_address_list)}
    - "no_remaining": ${True if live_with_stalker or school_with_stalker or work_with_stalker else False}
    - "no_remain_residence": ${live_with_stalker}
    - "no_remain_school": ${school_with_stalker}
    - "no_remain_work": ${work_with_stalker}
    - "no_remain_address_list": ${comma_and_list(no_remain_address_list)}
    - "no_firearms": ${other_parties[0].prohibit_firearms}
    - "other_relief_check": ${other_parties[0].anything_else}
    - "other_relief_text": ${other_parties[0].what_else if other_parties[0].anything_else else ""}
    - "pay_costs_check": ${other_parties[0].pay_costs}
    - "e_signature": ${ "/s/ " + users[0].name.full(middle='full') if e_signature else ""}
    - "user_name": ${users[0].name.full(middle='full')}
    - "user_address_line_one": ${ users[0].address.line_one(bare=True)}
    - "user_city": ${ users[0].address.city}
    - "user_state": ${ users[0].address.state}
    - "user_zip": ${ users[0].address.zip}
    - "signature_date": ${today() if e_signature else ""}
    - "user_phone": ${ phone_number_formatted(users[0].phone_number)}
    - "user_email": ${ users[0].email if users[0].has_email_address else ""}
---
attachment:
  variable name: snco_petition[i]
  name: snco_petition
  filename: snco_petition
  skip undefined: True
  editable: False
  pdf template file: Stalking_NCO_Petition.pdf
  fields:
    - "circuit_court": ${court_circuit}
    - "filing_county": ${trial_court.address.county}
    - "user_name": ${users[0].name.full(middle='full')}
    - "others_protected": ${comma_and_list(others_protected)}
    - "protect_a_minor": ${any_minors}
    - "protect_an_adult": ${any_adults}
    - "behalf_of_names": ${ comma_and_list(others_protected)}
    - "stalker_name": ${ other_parties[0].name.full(middle='full')}
    - "case_number": ${""}
    - "user_address": ${users[0].address.on_one_line(bare=True)}
    - "use_safe_address": ${hide_address}
    - "other_protected_name_1": ${others_protected[0].name.full(middle='full')}
    - "other_protected_address_1": ${others_protected[0].address.on_one_line(bare=True)}
    - "other_protected_name_2": ${others_protected[1].name.full(middle='full')}
    - "other_protected_address_2": ${others_protected[1].address.on_one_line(bare=True)}
    - "respondent_name": ${other_parties[0].name.full(middle='full')}
    - "respondent_home_check": ${other_parties[0].address_known}
    - "respondent_home_address": ${other_parties[0].address.on_one_line(bare=True)}
    - "stalker_birth": ${other_parties[0].birthdate}
    - "respondent_is_male": ${True if other_parties[0].gender == "Male" else False}
    - "respondent_is_female": ${True if other_parties[0].gender == "Female" else False}
    - "respondent_other_gender": ${other_parties[0].other_gender if other_parties[0].gender == "Other" else ""}
    - "respondent_race": ${other_parties[0].other_race if other_parties[0].race == "Other" else other_parties[0].race}
    - "respondent_height": ${(str(other_parties[0].height_feet) + "'" + str(other_parties[0].height_inches)  + "''") if str(other_parties[0].height_feet) != "" else ""}
    - "respondent_weight": ${other_parties[0].weight}
    - "respondent_features": ${other_parties[0].features}
    - "respondent_employer_name": ${ other_parties[0].employer_name if other_parties[0].has_job else ""}
    - "respondent_work_check": ${True if other_parties[0].has_job and other_parties[0].employer_address.on_one_line(bare=True) != "" else False}
    - "respondent_work_address": ${ other_parties[0].employer_address.on_one_line(bare=True) if other_parties[0].has_job else ""}
    - "respondent_work_hours": ${other_parties[0].work_hours if other_parties[0].has_job else ""}
    - "respondent_hair": ${ other_parties[0].hair_color}
    - "respondent_eyes": ${ other_parties[0].eye_color if other_parties[0].eye_color != "" else '' }
    - "respondent_ssn": ${other_parties[0].ssn}
    - "respondent_dl": ${other_parties[0].drivers_license}
    - "respondent_plate": ${other_parties[0].license_plate if other_parties[0].has_vehicle else ""}
    - "respondent_other_id_number": ${other_parties[0].another_number if other_parties[0].another_number_check else ""}
    - "respondent_other_id_description": ${other_parties[0].another_number_description if other_parties[0].another_number_check else ""}
    - "just_armed": ${True if other_parties[0].armed and not other_parties[0].suicide_risk else False}
    - "just_suicidal": ${True if other_parties[0].suicide_risk and not other_parties[0].armed else False}
    - "armed_and_suicidal": ${True if other_parties[0].suicide_risk and other_parties[0].armed else False}  
    - "date_incident_1": ${stalking_events[0].name.text}
    - "time_incident_1": ${stalking_events[0].time}
    - "location_incident_1": ${stalking_events[0].place}
    - "description_incident_1": ${stalking_events[0].description}
    - "description_incident_2": |
        % if stalking_events[1].time != "":
        On or about ${stalking_events[1].name.text}, ${stalking_events[1].time}, at ${stalking_events[1].place} the following occurred(:) ${stalking_events[1].description}
        % else:
        On or about ${stalking_events[1].name.text} at ${stalking_events[1].place} the following occurred(:) ${stalking_events[1].description}
        % endif
    - "petitioner_in_county": ${ jurisdiction_type['I live here']}
    - "respondent_in_county": ${ jurisdiction_type['Respondent lives here']}
    - "acts_in_county":  ${ jurisdiction_type['Abuse was here']}
    - "no_stalking": ${protection_requested['stalking']}
    - "no_contact": ${protection_requested['contacting']}
    - "no_coming": ${protection_requested['away']}
    - "feet_away": ${distance_away}
    - "no_home": ${protected_place_types['Home'] if protection_requested['away'] else False}
    - "no_school_or_daycare": ${True if protection_requested['away'] and (protected_place_types['School'] or protected_place_types['day_care']) else False}
    - "no_workplace": ${protected_place_types['Workplace'] if protection_requested['away'] else False}
    - "no_other_place": ${protected_place_types['Other'] if protection_requested['away'] else False}
    - "other_places_list": ${other_places}
    - "no_firearms": ${other_parties[0].prohibit_firearms}
    - "other_relief_check": ${other_parties[0].anything_else}
    - "other_relief_text": ${other_parties[0].what_else if other_parties[0].anything_else else ""}
    - "e_signature": ${ "/s/ " + users[0].name.full(middle='full') if e_signature else ""}
    - "petitioner_name": ${users[0].name.full(middle='full')}
    - "petitioner_address_line_1": ${ users[0].address.line_one(bare=True)}
    - "petitioner_address_line_2": ${ users[0].address.line_two()}
    - "petitioner_phone": ${ phone_number_formatted(users[0].phone_number)}
    - "petitioner_email": ${ "Email:" + " " + users[0].email if users[0].has_email_address else ""}
    - "protected_home_address": ${home.on_one_line(bare=True) if protection_requested['away'] and protected_place_types['Home'] else ""}
    - "protected_work_addresses": ${comma_and_list(away_work_address_list)}
    - "school_daycare_addresses": ${comma_and_list(away_school_daycare_list)}
---
attachment:
  variable name: snco_order[i]
  name: snco_order
  filename: snco_order
  skip undefined: True
  editable: False
  pdf template file: Stalking_NCO_Order.pdf
  fields:
    - "circuit_court": ${court_circuit}
    - "filing_county": ${trial_court.address.county}
    - "user_name": ${users[0].name.full(middle='full')}
    - "others_protected": ${comma_and_list(others_protected)}
    - "protect_a_minor": ${any_minors}
    - "protect_an_adult": ${any_adults}
    - "behalf_of_names": ${ comma_and_list(others_protected)}
    - "stalker_name": ${ other_parties[0].name.full(middle='full')}
    - "case_number": ${""}
    - "user_address": ${users[0].address.on_one_line(bare=True)}
    - "use_safe_address": ${hide_address}
    - "other_protected_name_1": ${others_protected[0].name.full(middle='full')}
    - "other_protected_address_1": ${others_protected[0].address.on_one_line(bare=True)}
    - "other_protected_name_2": ${others_protected[1].name.full(middle='full')}
    - "other_protected_address_2": ${others_protected[1].address.on_one_line(bare=True)}
    - "respondent_name": ${other_parties[0].name.full(middle='full')}
    - "respondent_home_check": ${other_parties[0].address_known}
    - "respondent_home_address": ${other_parties[0].address.on_one_line(bare=True)}
    - "stalker_birth": ${other_parties[0].birthdate}
    - "respondent_is_male": ${True if other_parties[0].gender == "Male" else False}
    - "respondent_is_female": ${True if other_parties[0].gender == "Female" else False}
    - "respondent_race": ${other_parties[0].other_race if other_parties[0].race == "Other" else other_parties[0].race}
    - "respondent_height": ${(str(other_parties[0].height_feet) + "'" + str(other_parties[0].height_inches)  + "''") if str(other_parties[0].height_feet) != "" else ""}
    - "respondent_weight": ${other_parties[0].weight}
    - "respondent_features": ${other_parties[0].features}
    - "respondent_employer_name": ${ other_parties[0].employer_name if other_parties[0].has_job else ""}
    - "respondent_work_check": ${True if other_parties[0].has_job and other_parties[0].employer_address.on_one_line(bare=True) != "" else False}
    - "respondent_work_address": ${ other_parties[0].employer_address.on_one_line(bare=True) if other_parties[0].has_job else ""}
    - "respondent_work_hours": ${other_parties[0].work_hours if other_parties[0].has_job else ""}
    - "respondent_hair": ${ other_parties[0].hair_color}
    - "respondent_eyes": ${ other_parties[0].eye_color if other_parties[0].eye_color != "" else '' }
    - "respondent_ssn": ${other_parties[0].ssn}
    - "respondent_dl": ${other_parties[0].drivers_license}
    - "respondent_plate": ${other_parties[0].license_plate if other_parties[0].has_vehicle else ""}
    - "respondent_other_id_number": ${other_parties[0].another_number if other_parties[0].another_number_check else ""}
    - "respondent_other_id_description": ${other_parties[0].another_number_description if other_parties[0].another_number_check else ""}
    #Add questions about an incarcerated respondent?
    - "respondent_jail_check": ${False}
    - "respondent_jail_name": ${""}
    - "respondent_address_unknown": ${False if other_parties[0].address_known else True}
    - "armed": ${other_parties[0].armed}
    - "suicidal": ${other_parties[0].suicide_risk}
    #What does the Y checkbox on the form mean?
    - "y_check": ${False}
---
 attachment:
  variable name: snco_summons[i]
  name: snco_summons
  filename: snco_summons
  skip undefined: True
  editable: False
  pdf template file: Stalking_NCO_Summons.pdf
  fields:
    - "circuit_court": ${court_circuit}
    - "filing_county": ${trial_court.address.county}
    - "user_name": ${users[0].name.full(middle='full')}
    - "protect_a_minor": ${any_minors}
    - "protect_an_adult": ${any_adults}
    - "others_protected": ${ comma_and_list(others_protected)}
    - "behalf_of_names": ${ comma_and_list(others_protected)}
    - "stalker_name": ${ other_parties[0].name.full(middle='full')}
    - "main_service_address": ${other_parties[0].service_address.on_one_line(bare=True)}
    - "independent": ${False}
    - "criminal": ${False}
    - "juvenile": ${False}
    - "petitioner_name": ${users[0].name.full(middle='full')}
    - "petitioner_phone": ${ phone_number_formatted(users[0].phone_number) }
    - "petitioner_address_line_1": ${ users[0].address.line_one(bare=True) }
    - "petitioner_address_line_2": ${ users[0].address.line_two() }
---
section: People you want to protect
id: petitioner review screen
event: section_petitioner
question: |
  People you want to protect
subquestion: |
  Edit your answers below.
review:
  - Edit: trial_court_index
    button: |
      **You are filing in:**
      ${end_in_county(trial_court.address.county)}
  - Edit: cook_district
    button: |
      **Which courthouse will you file in?**
      % if cook_district == '15':
      First Municipal District, Daley Center, 50 W. Washington Street, Chicago
      % elif cook_district == '16':
      Second Municipal District, 5600 Old Orchard Road, Skokie
      % elif cook_district == '17':
      Third Municipal District, 2121 Euclid Avenue, Rolling Meadows
      % elif cook_district == '18':
      Fourth Municipal District, 1500 Maybrook Drive, Maywood
      % elif cook_district == '19':
      Fifth Municipal District, 10220 S. 76th Avenue, Bridgeview
      % elif cook_district == '20':
      Sixth Municipal District, 16501 South Kedzie Parkway, Markham
      % endif
    show if: trial_court.address.county.lower() == "cook"
  - Edit: jurisdiction_type
    button: |
      **You are filing in ${end_in_county(trial_court.address.county)} because:**
      
      % if jurisdiction_type['I live here']:
      * I live in ${end_in_county(trial_court.address.county)}.
      % endif
      % if jurisdiction_type['Respondent lives here']:
      * The person I am filing against lives in ${end_in_county(trial_court.address.county)}.
      % endif
      % if jurisdiction_type['Abuse was here']:
      * The abuse took place in ${end_in_county(trial_court.address.county)}.
      % endif
  - Edit: users[0].name.first
    button: |
      **Your name:**
      ${users[0].name.full(middle='full')}
  - Edit: other_parties[0].name.first
    button: |  
      **Stalker's name:**
      ${other_parties[0].name.full(middle='full')}
  - Edit: hide_address
    button: |
      **Do you want to keep your home address hidden?**
      ${word(yesno(hide_address))}
  - Edit: users[0].address.address
    button: |
      % if hide_address:
      **Your mailing address:**
      % else:
      **Your address:**
      % endif
      ${users[0].address.on_one_line(bare=True)}
  - Edit: user_relationship
    button: |
      **How are you related to the person you are filing the Stalking No Contact Order against?**      
      % if user_relationship['unrelated']:
      We are not related.
      % elif user_relationship['se']:
      I am their spouse.
      % elif user_relationship['xs']:
      I am their ex-spouse.
      % elif user_relationship['bg']:
      I am their boyfriend, girlfriend, or romantic partner (including ex-).
      % elif user_relationship['cc']:
      We have a child in common (never married).
      % elif user_relationship['cs']:
      We share or shared a living space.
      % elif user_relationship['ch']:
      I am their child.
      % elif user_relationship['pa']:
      I am their parent.
      % elif user_relationship['sb']:
      I am their brother, sister, or sibling.
      % elif user_relationship['of']:
      They are another family member.
      % elif user_relationship['sc']:
      I am their step child.
      % elif user_relationship['ss']:
      I am their step brother, step sister, or step sibling.
      % elif user_relationship['sp']:
      I am their step parent.
      % elif user_relationship['gc']:
      I am their grandchild.
      % elif user_relationship['gp']:
      I am their grandparent.
      % elif user_relationship['il']:      
      I am their in-law.
      % elif user_relationship['pd']:
      I have a disability and receive care from the abuser.
      % elif user_relationship['pc']:
      I am a high-risk adult with disabilities and the abuser is my personal caregiver.
      % elif user_relationship['pr']:
      I have a disability and the abuser is my personal assistant or caregiver.
      % elif user_relationship['f']:
      The abuser is a family or household member of my foster child.
      % elif user_relationship['a']:
      The abuser is a family or household member of my adopted child, or of my prospective adopted child.
      % elif user_relationship['l']:
      The abuser is a family or household member of a child that I am the legally-appointed custodian of.
      % endif
  - Edit: users[0].birthdate
    button: |
      **Your birth date:**
      ${users[0].birthdate}
  - Edit: others_protected.there_are_any
    button: |
      **Do you want the Stalking No Contact Order to protect anyone else?**
      ${word(yesno(others_protected.there_are_any))}
  - Edit: others_protected.revisit
    button: |
      **Others to protect: (Edit to change names, addresses, and other information)**

      % for my_var in others_protected:
        * ${ my_var.name.full(middle="full") }
      % endfor
    show if: others_protected.there_are_any
---
id: others protected review screen
continue button field: others_protected.revisit
question: |
    Edit the others you want the SNCO to protect
subquestion: |
  ${ others_protected.table }

  ${ others_protected.add_action() }
---
table: others_protected.table
rows: others_protected
columns:
  - Name: |
      row_item.name.full(middle="full") if defined("row_item.name.first") else ""
  - Address, birth date, additional information: |
      action_button_html(url_action(row_item.attr_name("others_protected_info")), label="Edit", icon="pencil-alt")
delete buttons: True
confirm: True
---
id: other protected info review screen
continue button field: x.others_protected_info
generic object: ALIndividual
question: |
  Edit ${ x.name.full(middle="full") }'s information
review: 
  - Edit: x.name.first
    button: |
      **Name of person to protect:**
      ${x.name.full(middle='full')}
  - Edit: x.birth
    button: |
      **${x.name.full(middle='full')}'s birth date:**
      ${x.birth}
  - Edit: x.is_survivor
    button: |
      **Is ${x.name.full(middle='full')} a survivor of rape, sexual assault, or sexual abuse?**
      ${word(yesno(x.is_survivor))}
  - Edit: x.relation_to_user
    button: |
      **${x.name.full(middle='full')}'s relation to you:**
      They are my ${x.relation_to_user}
    show if: trial_court.address.county.lower() == "cook" and not x.is_survivor
  - Edit: x.protection_reason
    button: |
      **Why are you including ${x.name.full(middle='full')} in the Stalking No Contact Order?**
      ${x.protection_reason}
    show if: trial_court.address.county.lower() == "cook" and not x.is_survivor
  - Edit: x.use_safe_address
    button: |
      **Do you want to use the safe mailing address for ${x.name.full(middle='full')}?**
      ${word(yesno(x.use_safe_address))}
    show if: hide_address
  - Edit: x.address.address
    button: |
      **${x.name.full(middle='full')}'s address:**
      ${x.address.on_one_line(bare=True)}
    show if: not hide_address or not x.use_safe_address
---
section: Person you want protection from
id: respondent review screen
event: section_respondent
question: |
  About the person who caused the abuse
subquestion: |
  Edit your answers below.
review:
  - Edit: other_parties[0].name.first
    button: |  
      **Stalker's name:**
      ${other_parties[0].name.full(middle='full')}
  - Edit: other_parties[0].gender
    button: |
      **${other_parties[0].name.full(middle='full')}'s gender:**
      % if other_parties[0].gender == "Other":
      ${other_parties[0].other_gender}
      % else:
      ${other_parties[0].gender}
      % endif
  - Edit: other_parties[0].race
    button: |
      **${other_parties[0].name.full(middle='full')}'s race:**
      % if other_parties[0].race == "Other":
      ${other_parties[0].other_race}
      % else:
      ${other_parties[0].race}
      % endif
  - Edit: other_parties[0].skin_tone
    button: |
      **${other_parties[0].name.full(middle='full')}'s skin tone:**
      % if other_parties[0].skin_tone == "Other":
      ${other_parties[0].other_skin_tone}
      % else:
      ${other_parties[0].skin_tone}
      % endif
  - Edit: other_parties[0].other_names.there_are_any
    button: |
      **Has ${other_parties[0].name.full(middle='full')} gone by any other names?**
      ${word(yesno(other_parties[0].other_names.there_are_any))}
  - Edit: other_parties[0].other_names.revisit
    button: |
      **${other_parties[0].name.full(middle='full')}'s other names:**
      
      % for my_var in other_parties[0].other_names:
        * ${ my_var.name.full(middle="full") }
      % endfor
  - Edit: other_parties[0].ssn
    button: |
      **The last 4 digits of ${other_parties[0].name.full(middle='full')}'s Social Security Number:**
      % if other_parties[0].ssn == "":
      I don't know
      % else:
      ${other_parties[0].ssn}
      % endif
  - Edit: knows_respondent_dob
    button: |
      **${other_parties[0].name.full(middle='full')}'s birth date:**
      % if knows_respondent_dob == "exact":
      ${other_parties[0].birthdate}
      % elif knows_respondent_dob == "some":
      ${other_parties[0].birthdate_info}
      % else:
      I don't know
      % endif
  - Edit: other_parties[0].weight
    button: |
      **${other_parties[0].name.full(middle='full')}'s height and weight:**
      % if other_parties[0].height_feet != "" and other_parties[0].height_inches != "":
      % if other_parties[0].weight != "":
      ${other_parties[0].height_feet} feet ${other_parties[0].height_inches} inches, ${other_parties.weight} pounds
      % else:
      ${other_parties[0].height_feet} feet ${other_parties[0].height_inches} inches
      % endif
      % else:
      % if other_parties[0].weight != "":
      ${other_parties.weight} pounds
      % else:
      I don't know
      % endif
      % endif
  - Edit: other_parties[0].eye_color
    button: |
      **${other_parties[0].name.full(middle='full')}'s eye color:**
      ${other_parties[0].eye_color}
  - Edit: other_parties[0].wears_glasses
    button: |
      **Does ${other_parties[0].name.full(middle='full')} wear glasses?**
      % if other_parties[0].wears_glasses == "sometimes":
      Sometimes
      % elif other_parties[0].wears_glasses == "dont_know":
      I don't know
      % else:
      ${word(yesno(other_parties[0].wears_glasses))}
      % endif
  - Edit: other_parties[0].hair_color
    button: |
      **${other_parties[0].name.full(middle='full')}'s hair color:**
      ${other_parties[0].hair_color}
  - Edit: other_parties[0].features
    button: |
      **${other_parties[0].name.full(middle='full')}'s distinguishing features:**
      % if other_parties[0].features == "":
      I don't know
      % else:
      ${other_parties[0].features}
      % endif
  - Edit: other_parties[0].drivers_license
    button: |
      **${other_parties[0].name.full(middle='full')}'s driver's license number:**
      % if other_parties[0].drivers_license == "":
      I don't know
      % else:
      ${other_parties[0].drivers_license}
      % endif
  - Edit: other_parties[0].has_vehicle
    button: |  
      **Does ${other_parties[0].name.full(middle='full')}'s have a vehicle?**
      ${word(yesno(other_parties[0].has_vehicle))}
  - Edit: other_parties[0].license_plate
    button: |
      **${other_parties[0].name.full(middle='full')}'s vehicle information:**
      
      % if other_parties[0].vehicle_year == "":
      * Year: I don't know
      % else:
      * Year: %{other_parties[0].vehicle_year}
      % endif
      % if other_parties.vehicle_make == "":
      * Make: I don't know
      % else:
      * Make: ${other_parties[0].vehicle_make}
      % endif
      % if other_parties[0].vehicle_model == "":
      * Model: I don't know
      % else:
      * Model: ${other_parties[0].vehicle_model}
      % endif
      % if other_parties.vehicle_cololr == "":
      * Color: I don't know
      % else:
      * Color: ${other_parties[0].vehicle_color}
      % endif
      % if other_parties[0].license_plate == "":
      * License plate number: I don't know
      % else:
      * License plate number: ${other_parties[0].license_plate}
      % endif
      % if other_parties[0].vehicle_state == "":
      * State: I don't know
      % else:
      * State: ${other_parties[0].vehicle_state}
      % endif
    show if: other_parties[0].has_vehicle
  - Edit: other_parties[0].another_number_check
    button: |
      **Do you know another number that can identify ${other_parties[0].name.full(middle='full')}?**
      ${word(yesno(other_parties[0].another_number_check))}
  - Edit: other_parties[0].another_number
    button: |
      **${other_parties[0].name.full(middle='full')} other identifying number:**
      ${other_parties[0].another_number}, ${other_parties[0].another_number_description}
    show if: other_parties[0].another_number_check
  - Edit: other_parties[0].phone_number
    button: |
      **${other_parties[0].name.full(middle='full')}'s phone number:**
      % if other_parties[0].phone_number == "":
      I don't know
      % else:
      ${other_parties[0].phone_number}
      % endif
  - Edit: other_parties[0].email_address
    button: |
      **${other_parties[0].name.full(middle='full')}'s email address:**
      % if other_parties[0].email_address == "":
      I don't know
      % else:
      ${other_parties[0].email_address}
      % endif
  - Edit: other_parties[0].address_known
    button: | 
      **Do you know ${other_parties[0].name.full(middle='full')}'s address?**
      ${word(yesno(other_parties[0].address_known))}
  - Edit: other_parties[0].address.address
    button: |
      **${other_parties[0].name.full(middle='full')}'s address:**
      ${other_parties[0].address.on_one_line(bare=True)}
    show if: other_parties[0].address_known
  - Edit: other_parties[0].has_job
    button: |
      **Does ${other_parties[0].name.full(middle='full')} have a job?**
      ${word(yesno(other_parties[0].has_job))}
  - Edit: other_parties[0].employer_name
    button: |
      **${other_parties[0].name.full(middle='full')}'s job information:**
      % if other_parties[0].employer_name == "":
      * Employer name: I don't know
      % else:
      * Employer name: ${other_parties[0].employer_name}
      % endif
      % if respondent_work_type == "":
      * Occupation: I don't know
      % else:
      * Occupation: ${respondent_work_type}
      % endif
      % if other_parties[0].work_hours == "":
      * Work hours: I don't know
      % else:
      * Standard work hours: ${other_parties[0].work_hours}
      % endif
      % if other_parties[0].employer_address.on_one_line(bare=True) == "":
      * Address: I don't know
      % else:
      * Address: ${other_parties.employer_address.on_one_line(bare=True)}
      % endif
    show if: other_parties[0].has_job
  - Edit: other_parties[0].suicide_risk
    button: |
      **Do you think ${other_parties[0].name.full(middle='full')} is a suicide risk?**
      ${word(yesno(other_parties[0].suicide_risk))}
  - Edit: other_parties[0].armed
    button: |
      **Do you think ${other_parties[0].name.full(middle='full')} is armed or dangerous?**
      ${word(yesno(other_parties[0].armed))}
  - Edit: other_parties[0].divorced_user
    button: |
      **Are you and ${other_parties[0].name.full(middle='full')} divorced?**
      ${word(yesno(other_parties[0].divorced_user))}
  - Edit: other_parties[0].divorce_date
    button: |
      **Divorce case information:**
      
      * Date filed: ${other_parties[0].divorce_date}
      * Case number: ${other_parties[0].divorce_number}
      * Judge: ${other_parties[0].divorce_judge}
    show if: other_parties[0].divorced_user
  - Edit: other_parties[0].parentage_action
    button: |
      **Have you and ${other_parties[0].name.full(middle='full')} filed a parentage action?**
      ${word(yesno(other_parties[0].parentage_action))}
  - Edit: other_parties[0].parentage_date
    button: |
      **Parentage case information:**
      
      * Date filed: ${other_parties[0].parentage_date}
      * Case number: ${other_parties[0].parentage_number}
      * Judge: ${other_parties[0].parentage_judge} 
    show if: other_parties[0].parentage_action
  - Edit: other_parties[0].mental_illness
    button: |
      **Does ${other_parties[0].name.full(middle='full')} have a history of mental illness?**
      ${word(yesno(other_parties[0].mental_illness))}
  - Edit: other_parties[0].alcohol
    button: |
      **Is ${other_parties[0].name.full(middle='full')} likely to be under the influence of alcohol?**
      ${word(yesno(other_parties[0].alcohol))}
  - Edit: other_parties[0].drugs
    button: |
      **Is ${other_parties[0].name.full(middle='full')} likely to be under the influence of drugs?**
      ${word(yesno(other_parties[0].drugs))}
  - Edit: other_parties[0].carrying_weapon
    button: |
      **Is ${other_parties[0].name.full(middle='full')} likely to be carrying a weapon?**
      ${word(yesno(other_parties[0].carrying_weapon))}
  - Edit: other_parties[0].home_weapon
    button: |
      **Does ${other_parties[0].name.full(middle='full')} have weapons at home?**
      ${word(yesno(other_parties[0].home_weapon))}
  - Edit: other_parties[0].weapons_info
    button: |
      **What weapons does ${other_parties[0].name.full(middle='full')} have?**
      % if other_parties[0].weapons_info == "":
      I don't know
      % else:
      ${other_parties[0].weapons_info}
      % endif
    show if: other_parties[0].carrying_weapon or other_parties.home_weapon
  - Edit: other_parties[0].order_of_protection
    button: |
      **Is there an Order of Protection against ${other_parties[0].name.full(middle='full')}?**
      ${word(yesno(other_parties[0].order_of_protection))}
  - Edit: other_parties[0].op_state
    button: |
      **Where was the Order of Protection issued?**
      % if other_parties[0].op_state == "IL":
      % if other_parties[0].op_in_state_county == "":
      ${other_parties[0].op_state}
      % else:
      ${end_in_county(other_parties[0].op_in_state_county)}, ${other_parties[0].op_state}
      % endif
      % if other_parties[0].op_out_state_county == "":
      ${other_parties[0].op_state}
      % else:
      ${end_in_county(other_parties[0].op_out_state_county)}, ${other_parties[0].op_state}
      % endif
      % endif
    show if: other_parties[0].order_of_protection
  - Edit: respondent_on_probation
    button: |
      **Is ${other_parties[0].name.full(middle="full")} on probation?**
      % if respondent_on_probation == "idk":
      I don't know
      % elif respondent_on_probation == "Yes":
      Yes, in ${end_in_county(respondent_probation_county)}
      % else:
      No
      % endif  
---
id: stalker other names review screen
continue button field: other_parties[0].other_names.revisit
question: |
    Edit ${other_parties[0].name.full(middle='full')}'s other names
subquestion: |
  ${ other_parties[0].other_names.table }

  ${ other_parties[0].other_names.add_action() }
---
table: other_parties[0].other_names.table
rows: other_parties[0].other_names
columns:
  - Name: |
      row_item.name.full(middle="full") if defined("row_item.name.first") else ""
  - Edit: |
      action_button_html(url_action(row_item.attr_name("review_other_names")), label="Edit", icon="pencil-alt")
delete buttons: True
confirm: True
---
id: stalker other name info review screen
continue button field: x.review_other_names
generic object: ALIndividual
question: |
  Edit the name ${ x.name.full(middle="full") }
review: 
  - Edit: x.name.first
    button: |
      **${other_parties[0].name.full(middle='full')}'s other name:**
      ${x.name.full(middle='full')}
---
section: What happened
id: incidents review screen
event: section_incidents
question: |
  About what happened
subquestion: |
  Edit your answers below.
  
  ${ stalking_events.table }

  ${ stalking_events.add_action() }
review:
  - Edit: users[0].name.first
    button: |
      This should not appear
    show if: users[0].name.middle == "This should not appear. This is just so this section page can function as a section page even though all the editing occurs in a table in the subquestion."
---
continue button field: stalking_events.revisit
question: |
    Edit the stalking events
subquestion: |
  ${ stalking_events.table }

  ${ stalking_events.add_action() }
---
table: stalking_events.table
rows: stalking_events
columns:
  - Date: |
      row_item.name.text if defined("row_item.name.text") else ""
  - Place, time, and additional information: |
      action_button_html(url_action(row_item.attr_name("review_events")), label="Edit", icon="pencil-alt")
delete buttons: True
confirm: True
---
id: incident review screen
continue button field: x.review_events
generic object: Thing
question: |
  Edit the stalking incident
review: 
  - Edit: x.name.text
    button: |
      **When did the stalking event take place?**
      % if x.time != "":
      ${x.name.text} at ${format_time(x.time, format='h:mm')}
      % else:
      ${x.name.text}
      % endif
  - Edit: x.place
    button: |
      **Where did the stalking event take place?**
      ${x.place}
  - Edit: x.description
    button: |
      **What happened?**
      ${x.description}
  - Edit: x.police_check
    button: |
      **Was a police report filed?**
      ${word(yesno(x.police_check))}
  - Edit: x.police_number
    button: |
      **Police report number:**
      ${x.police_number}
    show if: x.police_check
---
section: Protections
id: protections review screen
event: section_protections
question: |
  Protections
subquestion: |
  Edit your answers below.
review:
  - Edit: order_type
    button: |
      **What type of SNCO do you want?**
      % if order_type['plenary'] and order_type['emergency']:
      Plenary Stalking No Contact Order and Emergency Stalking No Contact Order
      % elif order_type['plenary']:
      Plenary Stalking No Contact Order
      % elif order_type['emergency']:
      Emergency Stalking No Contact Order
      % else:
      None
      % endif
  - Edit: emergency_reason
    button: |
      **Why should the court grant an Emergency SNCO?**
      ${emergency_reason}
    show if: order_type['emergency'] and trial_court.address.county.lower() == "cook"
  - Edit: protection_requested
    button: |
      **What do you want ${other_parties[0].name.full(middle='full')} to stop doing?**
      
      % if protection_requested['stalking']:
      * Stop stalking and threatening me, my family and household members, and stop enlisting other people to stalk or threaten
      % endif
      % if protection_requested['contacting']:
      * Stop contacting me, my family and household members whether in person, by phone, by e-mail, by note or by sending messages through other people
      % endif
      % if protection_requested['away']:
      * Stay away from the locations of me and my family and household members' home, work, school, or daycare
      % endif
  - Edit: distance_away
    button: |
      **How far should ${other_parties[0].name.full(middle='full')} stay away?**
      ${distance_away} feet
    show if: protection_requested['away']
  - Edit: protected_place_types
    button: |
      **What kinds of places do you want ${other_parties[0].name.full(middle='full')} to stay away from?**
      
      % if protected_place_types['Home']:
      * Home
      % endif
      % if protected_place_types['Workplace']:
      * Workplace
      % endif
      % if protected_place_types['School']:
      * School
      % endif
      % if protected_place_types['day_care']:
      * Day care
      % endif
      % if protected_place_types['Other']:
      * Other
      % endif
    show if: protection_requested['away']
  - Edit: home.address
    button: |
      **Your home address:**
      ${home.on_one_line(bare=True)}
    show if: protection_requested['away'] and protected_place_types['Home'] and hide_address
  - Edit: users[0].address
    button: |
      **Your home address:**
      ${users[0].address.on_one_line(bare=True)}
    show if: protection_requested['away'] and protected_place_types['Home'] and not hide_address
  - Edit: employers_schools.revisit
    button: |
      **Workplaces, schools, and day cares:**
      
      % for my_var in employers_schools:
        * ${ my_var.name.first }
      % endfor
    show if: protection_requested['away'] and (protected_place_types['Workplace'] or protected_place_types['School'] or protected_place_types['day_care'])
  - Edit: other_places
    button: |
      **What other places do you want ${other_parties[0].name.full(middle='full')} to stay away from?**
      ${other_places}
    show if: protection_requested['away'] and protected_place_types['Other']
  - Edit: live_with_stalker
    button: |
      **Does ${other_parties[0].name.full(middle='full')} live with you?**
      ${word(yesno(live_with_stalker))}
    show if: trial_court.address.county.lower() == "cook"
  - Edit: school_with_stalker
    button: |
      **Does ${other_parties[0].name.full(middle='full')} go to the same school as you?**
      ${word(yesno(school_with_stalker))}
    show if: trial_court.address.county.lower() == "cook"
  - Edit: which_stalker_school
    button: |
      **Which school do you and ${other_parties[0].name.full(middle='full')} go to?**
      ${which_stalker_school}
    show if: trial_court.address.county.lower() == "cook" and school_list.number_gathered() > 1
  - Edit: work_with_stalker
    button: |
      **Does ${other_parties[0].name.full(middle='full')} work at the same place as you?**
      ${word(yesno(work_with_stalker))}
    show if: trial_court.address.county.lower() == "cook"
  - Edit: which_stalker_work
    button: |
      **Where do you and ${other_parties[0].name.full(middle='full')} both work?**
      ${which_stalker_work}
    show if: trial_court.address.county.lower() == "cook" and work_list.number_gathered() > 1
  - Edit: other_parties[0].prohibit_firearms
    button: |
      **Do you want to stop ${other_parties[0].name.full(middle='full')} from having firearms or a Firearms Owner Identification Card?**
      ${word(yesno(other_parties[0].prohibit_firearms))}
  - Edit: other_parties[0].anything_else
    button: |
      **Do you want the court to make ${other_parties[0].name.full(middle='full')} to do or stop doing anything else?**
      ${word(yesno(other_parties[0].anything_else))}
  - Edit: other_parties[0].what_else
    button: |
      **What do you want ${other_parties[0].name.full(middle='full')} to do or stop doing?**
      ${other_parties[0].what_else}
    show if: other_parties[0].anything_else
  - Edit: other_parties[0].pay_costs
    button: |
      **Do you want ${other_parties[0].name.full(middle='full')} to pay any costs?**
      ${word(yesno(other_parties[0].pay_costs))}
    show if: trial_court.address.county.lower() == "cook"
  - Edit: other_parties[0].describe_costs
    button: |
      **What costs do you want ${other_parties[0].name.full(middle='full')} to pay**
      ${other_parties[0].describe_costs}
    show if: trial_court.address.county.lower() == "cook" and other_parties[0].pay_costs
---
id: employers schools review screen
continue button field: employers_schools.revisit
question: |
    Edit the workplace, school, and day care addresses
subquestion: |
  ${ employers_schools.table }

  ${ employers_schools.add_action() }
---
table: employers_schools.table
rows: employers_schools
columns:
  - Name: |
      row_item.name.first if defined("row_item.name.first") else ""
  - Address and location type: |
      action_button_html(url_action(row_item.attr_name("employers_schools_info")), label="Edit", icon="pencil-alt")
delete buttons: True
confirm: True
---
id: employer or school review screen
continue button field: x.employers_schools_info
generic object: ALIndividual
question: |
  Edit the employer, school, or day care's info
review: 
  - Edit: x.name.first
    button: |
      **Name:**
      ${x.name.first}
  - Edit: x.type
    button: |
      **Type of place:**
      % if x.type == "work":
      Work or job site
      % elif x.type == "school":
      School
      % elif x.type == "day_care":
      Day care
      % else:
      Error
      % endif
  - Edit: x.address.address
    button: |
      **${x.name.first}'s address:**
      ${x.address.on_one_line(bare=True)}
---
section: Filing and service details
id: filing service review screen
event: section_filing_info
question: |
  Filing and service details
subquestion: |
  Edit your answers below.
review:
  - Edit: trial_court_index
    button: |
      **You are filing in:**
      ${end_in_county(trial_court.address.county)}
  - Edit: cook_district
    button: |
      **Which courthouse will you file in?**
      % if cook_district == '15':
      First Municipal District, Daley Center, 50 W. Washington Street, Chicago
      % elif cook_district == '16':
      Second Municipal District, 5600 Old Orchard Road, Skokie
      % elif cook_district == '17':
      Third Municipal District, 2121 Euclid Avenue, Rolling Meadows
      % elif cook_district == '18':
      Fourth Municipal District, 1500 Maybrook Drive, Maywood
      % elif cook_district == '19':
      Fifth Municipal District, 10220 S. 76th Avenue, Bridgeview
      % elif cook_district == '20':
      Sixth Municipal District, 16501 South Kedzie Parkway, Markham
      % endif
    show if: trial_court.address.county.lower() == "cook"
  - Edit: other_parties[0].which_address
    button: |
      **Where should the sheriff deliver court papers to ${other_parties[0].name.full(middle='full')}?**
      % if other_parties[0].which_address == "home_address":
      ${other_parties[0].address.on_one_line(bare=True)}
      % elif other_parties[0].which_address == "employer_address":
      ${other_parties[0].employer_address.on_one_line(bare=True)}
      % elif other_parties[0].which_address == "add_service_address":
      ${other_parties[0].service_address.on_one_line(bare=True)}
      % endif
  - Edit: other_parties[0].bonus_service_check
    button: |
      **Do you want to list another place where the sheriff could serve ${other_parties[0].name.full(middle='full')}?**
      ${word(yesno(other_parties[0].bonus_service_check))}
  - Edit: other_parties[0].which_bonus_address
    button: |
      **Where else can the sheriff go to serve ${other_parties[0].name.full(middle='full')}?**
      % if other_parties[0].which_bonus_address == "home_address":
      ${other_parties[0].address.on_one_line(bare=True)}
      % elif other_parties[0].which_bonus_address == "employer_address":
      ${other_parties[0].employer_address.on_one_line(bare=True)}
      % elif other_parties[0].which_bonus_address == "service_address":
      ${other_parties[0].bonus_service_address.on_one_line(bare=True)}
      % endif
    show if: other_parties[0].bonus_service_check
  - Edit: service_information
    button: |
      **What other information will help the sheriff serve ${other_parties[0].name.full(middle="full")}?**
      ${service_information}
  - Edit: case_number
    button: |
      **Case number:**
      ${case_number}
  - Edit: users[0].has_email_address
    button: |
      **Your contact information:**
      Phone: ${phone_number_formatted(users[0].phone_number)}
      Email: ${users[0].email}
  - Edit: e_signature
    button: |
      **Do you want to add your electronic signature to your forms?**
      ${word(yesno(e_signature))}
---
id: review screen
event: review_answers
question: |
  Review screen
subquestion: |
  Edit your answers below.
review: 
  - Edit: trial_court_index
    button: |
      **You are filing in:**
      ${end_in_county(trial_court.address.county)}
  - Edit: cook_district
    button: |
      **Which courthouse will you file in?**
      % if cook_district == '15':
      First Municipal District, Daley Center, 50 W. Washington Street, Chicago
      % elif cook_district == '16':
      Second Municipal District, 5600 Old Orchard Road, Skokie
      % elif cook_district == '17':
      Third Municipal District, 2121 Euclid Avenue, Rolling Meadows
      % elif cook_district == '18':
      Fourth Municipal District, 1500 Maybrook Drive, Maywood
      % elif cook_district == '19':
      Fifth Municipal District, 10220 S. 76th Avenue, Bridgeview
      % elif cook_district == '20':
      Sixth Municipal District, 16501 South Kedzie Parkway, Markham
      % endif
    show if: trial_court.address.county.lower() == "cook"
  - Edit: jurisdiction_type
    button: |
      **You are filing in ${end_in_county(trial_court.address.county)} because:**
      
      % if jurisdiction_type['I live here']:
      * I live in ${end_in_county(trial_court.address.county)}.
      % endif
      % if jurisdiction_type['Respondent lives here']:
      * The person I am filing against lives in ${end_in_county(trial_court.address.county)}.
      % endif
      % if jurisdiction_type['Abuse was here']:
      * The abuse took place in ${end_in_county(trial_court.address.county)}.
      % endif
  - Edit: users[0].name.first
    button: |
      **Your name:**
      ${users[0].name.full(middle='full')}
  - Edit: hide_address
    button: |
      **Do you want to keep your home address hidden?**
      ${word(yesno(hide_address))}
  - Edit: users[0].address.address
    button: |
      % if hide_address:
      **Your mailing address:**
      % else:
      **Your address:**
      % endif
      ${users[0].address.on_one_line(bare=True)}
  - Edit: user_relationship
    button: |
      **How are you related to the person you are filing the Stalking No Contact Order against?**      
      % if user_relationship['unrelated']:
      We are not related.
      % elif user_relationship['se']:
      I am their spouse.
      % elif user_relationship['xs']:
      I am their ex-spouse.
      % elif user_relationship['bg']:
      I am their boyfriend, girlfriend, or romantic partner (including ex-).
      % elif user_relationship['cc']:
      We have a child in common (never married).
      % elif user_relationship['cs']:
      We share or shared a living space.
      % elif user_relationship['ch']:
      I am their child.
      % elif user_relationship['pa']:
      I am their parent.
      % elif user_relationship['sb']:
      I am their brother, sister, or sibling.
      % elif user_relationship['of']:
      They are another family member.
      % elif user_relationship['sc']:
      I am their step child.
      % elif user_relationship['ss']:
      I am their step brother, step sister, or step sibling.
      % elif user_relationship['sp']:
      I am their step parent.
      % elif user_relationship['gc']:
      I am their grandchild.
      % elif user_relationship['gp']:
      I am their grandparent.
      % elif user_relationship['il']:      
      I am their in-law.
      % elif user_relationship['pd']:
      I have a disability and receive care from the abuser.
      % elif user_relationship['pc']:
      I am a high-risk adult with disabilities and the abuser is my personal caregiver.
      % elif user_relationship['pr']:
      I have a disability and the abuser is my personal assistant or caregiver.
      % elif user_relationship['f']:
      The abuser is a family or household member of my foster child.
      % elif user_relationship['a']:
      The abuser is a family or household member of my adopted child, or of my prospective adopted child.
      % elif user_relationship['l']:
      The abuser is a family or household member of a child that I am the legally-appointed custodian of.
      % endif
  - Edit: users[0].birthdate
    button: |
      **Your birth date:**
      ${users[0].birthdate}
  - Edit: others_protected.there_are_any
    button: |
      **Do you want the Stalking No Contact Order to protect anyone else?**
      ${word(yesno(others_protected.there_are_any))}
  - Edit: others_protected.revisit
    button: |
      **Others to protect: (Edit to change names, addresses, and other information)**

      % for my_var in others_protected:
        * ${ my_var.name.full(middle="full") }
      % endfor
    show if: others_protected.there_are_any
  - Edit: other_parties[0].name.first
    button: |  
      **Stalker's name:**
      ${other_parties[0].name.full(middle='full')}
  - Edit: other_parties[0].gender
    button: |
      **${other_parties[0].name.full(middle='full')}'s gender:**
      % if other_parties[0].gender == "Other":
      ${other_parties[0].other_gender}
      % else:
      ${other_parties[0].gender}
      % endif
  - Edit: other_parties[0].race
    button: |
      **${other_parties[0].name.full(middle='full')}'s race:**
      % if other_parties[0].race == "Other":
      ${other_parties[0].other_race}
      % else:
      ${other_parties[0].race}
      % endif
  - Edit: other_parties[0].skin_tone
    button: |
      **${other_parties[0].name.full(middle='full')}'s skin tone:**
      % if other_parties[0].skin_tone == "Other":
      ${other_parties[0].other_skin_tone}
      % else:
      ${other_parties[0].skin_tone}
      % endif
  - Edit: other_parties[0].other_names.there_are_any
    button: |
      **Has ${other_parties[0].name.full(middle='full')} gone by any other names?**
      ${word(yesno(other_parties[0].other_names.there_are_any))}
  - Edit: other_parties[0].other_names.revisit
    button: |
      **${other_parties[0].name.full(middle='full')}'s other names:**
      
      % for my_var in other_parties[0].other_names:
        * ${ my_var.name.full(middle="full") }
      % endfor
  - Edit: other_parties[0].ssn
    button: |
      **The last 4 digits of ${other_parties[0].name.full(middle='full')}'s Social Security Number:**
      % if other_parties[0].ssn == "":
      I don't know
      % else:
      ${other_parties[0].ssn}
      % endif
  - Edit: knows_respondent_dob
    button: |
      **${other_parties[0].name.full(middle='full')}'s birth date:**
      % if knows_respondent_dob == "exact":
      ${other_parties[0].birthdate}
      % elif knows_respondent_dob == "some":
      ${other_parties[0].birthdate_info}
      % else:
      I don't know
      % endif
  - Edit: other_parties[0].weight
    button: |
      **${other_parties[0].name.full(middle='full')}'s height and weight:**
      % if other_parties[0].height_feet != "" and other_parties[0].height_inches != "":
      % if other_parties[0].weight != "":
      ${other_parties[0].height_feet} feet ${other_parties[0].height_inches} inches, ${other_parties.weight} pounds
      % else:
      ${other_parties[0].height_feet} feet ${other_parties[0].height_inches} inches
      % endif
      % else:
      % if other_parties[0].weight != "":
      ${other_parties.weight} pounds
      % else:
      I don't know
      % endif
      % endif
  - Edit: other_parties[0].eye_color
    button: |
      **${other_parties[0].name.full(middle='full')}'s eye color:**
      ${other_parties[0].eye_color}
  - Edit: other_parties[0].wears_glasses
    button: |
      **Does ${other_parties[0].name.full(middle='full')} wear glasses?**
      % if other_parties[0].wears_glasses == "sometimes":
      Sometimes
      % elif other_parties[0].wears_glasses == "dont_know":
      I don't know
      % else:
      ${word(yesno(other_parties[0].wears_glasses))}
      % endif
  - Edit: other_parties[0].hair_color
    button: |
      **${other_parties[0].name.full(middle='full')}'s hair color:**
      ${other_parties[0].hair_color}
  - Edit: other_parties[0].features
    button: |
      **${other_parties[0].name.full(middle='full')}'s distinguishing features:**
      % if other_parties[0].features == "":
      I don't know
      % else:
      ${other_parties[0].features}
      % endif
  - Edit: other_parties[0].drivers_license
    button: |
      **${other_parties[0].name.full(middle='full')}'s driver's license number:**
      % if other_parties[0].drivers_license == "":
      I don't know
      % else:
      ${other_parties[0].drivers_license}
      % endif
  - Edit: other_parties[0].has_vehicle
    button: |  
      **Does ${other_parties[0].name.full(middle='full')}'s have a vehicle?**
      ${word(yesno(other_parties[0].has_vehicle))}
  - Edit: other_parties[0].license_plate
    button: |
      **${other_parties[0].name.full(middle='full')}'s vehicle information:**
      
      % if other_parties[0].vehicle_year == "":
      * Year: I don't know
      % else:
      * Year: %{other_parties[0].vehicle_year}
      % endif
      % if other_parties.vehicle_make == "":
      * Make: I don't know
      % else:
      * Make: ${other_parties[0].vehicle_make}
      % endif
      % if other_parties[0].vehicle_model == "":
      * Model: I don't know
      % else:
      * Model: ${other_parties[0].vehicle_model}
      % endif
      % if other_parties.vehicle_cololr == "":
      * Color: I don't know
      % else:
      * Color: ${other_parties[0].vehicle_color}
      % endif
      % if other_parties[0].license_plate == "":
      * License plate number: I don't know
      % else:
      * License plate number: ${other_parties[0].license_plate}
      % endif
      % if other_parties[0].vehicle_state == "":
      * State: I don't know
      % else:
      * State: ${other_parties[0].vehicle_state}
      % endif
    show if: other_parties[0].has_vehicle
  - Edit: other_parties[0].another_number_check
    button: |
      **Do you know another number that can identify ${other_parties[0].name.full(middle='full')}?**
      ${word(yesno(other_parties[0].another_number_check))}
  - Edit: other_parties[0].another_number
    button: |
      **${other_parties[0].name.full(middle='full')} other identifying number:**
      ${other_parties[0].another_number}, ${other_parties[0].another_number_description}
    show if: other_parties[0].another_number_check
  - Edit: other_parties[0].phone_number
    button: |
      **${other_parties[0].name.full(middle='full')}'s phone number:**
      % if other_parties[0].phone_number == "":
      I don't know
      % else:
      ${other_parties[0].phone_number}
      % endif
  - Edit: other_parties[0].email_address
    button: |
      **${other_parties[0].name.full(middle='full')}'s email address:**
      % if other_parties[0].email_address == "":
      I don't know
      % else:
      ${other_parties[0].email_address}
      % endif
  - Edit: other_parties[0].address_known
    button: | 
      **Do you know ${other_parties[0].name.full(middle='full')}'s address?**
      ${word(yesno(other_parties[0].address_known))}
  - Edit: other_parties[0].address.address
    button: |
      **${other_parties[0].name.full(middle='full')}'s address:**
      ${other_parties[0].address.on_one_line(bare=True)}
    show if: other_parties[0].address_known
  - Edit: other_parties[0].has_job
    button: |
      **Does ${other_parties[0].name.full(middle='full')} have a job?**
      ${word(yesno(other_parties[0].has_job))}
  - Edit: other_parties[0].employer_name
    button: |
      **${other_parties[0].name.full(middle='full')}'s job information:**
      % if other_parties[0].employer_name == "":
      * Employer name: I don't know
      % else:
      * Employer name: ${other_parties[0].employer_name}
      % endif
      % if respondent_work_type == "":
      * Occupation: I don't know
      % else:
      * Occupation: ${respondent_work_type}
      % endif
      % if other_parties[0].work_hours == "":
      * Work hours: I don't know
      % else:
      * Standard work hours: ${other_parties[0].work_hours}
      % endif
      % if other_parties[0].employer_address.on_one_line(bare=True) == "":
      * Address: I don't know
      % else:
      * Address: ${other_parties.employer_address.on_one_line(bare=True)}
      % endif
    show if: other_parties[0].has_job
  - Edit: other_parties[0].suicide_risk
    button: |
      **Do you think ${other_parties[0].name.full(middle='full')} is a suicide risk?**
      ${word(yesno(other_parties[0].suicide_risk))}
  - Edit: other_parties[0].armed
    button: |
      **Do you think ${other_parties[0].name.full(middle='full')} is armed or dangerous?**
      ${word(yesno(other_parties[0].armed))}
  - Edit: other_parties[0].divorced_user
    button: |
      **Are you and ${other_parties[0].name.full(middle='full')} divorced?**
      ${word(yesno(other_parties[0].divorced_user))}
  - Edit: other_parties[0].divorce_date
    button: |
      **Divorce case information:**
      
      * Date filed: ${other_parties[0].divorce_date}
      * Case number: ${other_parties[0].divorce_number}
      * Judge: ${other_parties[0].divorce_judge}
    show if: other_parties[0].divorced_user
  - Edit: other_parties[0].parentage_action
    button: |
      **Have you and ${other_parties[0].name.full(middle='full')} filed a parentage action?**
      ${word(yesno(other_parties[0].parentage_action))}
  - Edit: other_parties[0].parentage_date
    button: |
      **Parentage case information:**
      
      * Date filed: ${other_parties[0].parentage_date}
      * Case number: ${other_parties[0].parentage_number}
      * Judge: ${other_parties[0].parentage_judge} 
    show if: other_parties[0].parentage_action
  - Edit: other_parties[0].mental_illness
    button: |
      **Does ${other_parties[0].name.full(middle='full')} have a history of mental illness?**
      ${word(yesno(other_parties[0].mental_illness))}
  - Edit: other_parties[0].alcohol
    button: |
      **Is ${other_parties[0].name.full(middle='full')} likely to be under the influence of alcohol?**
      ${word(yesno(other_parties[0].alcohol))}
  - Edit: other_parties[0].drugs
    button: |
      **Is ${other_parties[0].name.full(middle='full')} likely to be under the influence of drugs?**
      ${word(yesno(other_parties[0].drugs))}
  - Edit: other_parties[0].carrying_weapon
    button: |
      **Is ${other_parties[0].name.full(middle='full')} likely to be carrying a weapon?**
      ${word(yesno(other_parties[0].carrying_weapon))}
  - Edit: other_parties[0].home_weapon
    button: |
      **Does ${other_parties[0].name.full(middle='full')} have weapons at home?**
      ${word(yesno(other_parties[0].home_weapon))}
  - Edit: other_parties[0].weapons_info
    button: |
      **What weapons does ${other_parties[0].name.full(middle='full')} have?**
      % if other_parties[0].weapons_info == "":
      I don't know
      % else:
      ${other_parties[0].weapons_info}
      % endif
    show if: other_parties[0].carrying_weapon or other_parties.home_weapon
  - Edit: other_parties[0].order_of_protection
    button: |
      **Is there an Order of Protection against ${other_parties[0].name.full(middle='full')}?**
      ${word(yesno(other_parties[0].order_of_protection))}
  - Edit: other_parties[0].op_state
    button: |
      **Where was the Order of Protection issued?**
      % if other_parties[0].op_state == "IL":
      % if other_parties[0].op_in_state_county == "":
      ${other_parties[0].op_state}
      % else:
      ${end_in_county(other_parties[0].op_in_state_county)}, ${other_parties[0].op_state}
      % endif
      % if other_parties[0].op_out_state_county == "":
      ${other_parties[0].op_state}
      % else:
      ${end_in_county(other_parties[0].op_out_state_county)}, ${other_parties[0].op_state}
      % endif
      % endif
    show if: other_parties[0].order_of_protection
  - Edit: respondent_on_probation
    button: |
      **Is ${other_parties[0].name.full(middle="full")} on probation?**
      % if respondent_on_probation == "idk":
      I don't know
      % elif respondent_on_probation == "Yes":
      Yes, in ${end_in_county(respondent_probation_county)}
      % else:
      No
      % endif
  - Edit: stalking_events.revisit
    button: |
      **Stalking incidents:**
      
      % for my_var in stalking_events:
        * ${ my_var.name.text}
      % endfor
  - Edit: order_type
    button: |
      **What type of SNCO do you want?**
      % if order_type['plenary'] and order_type['emergency']:
      Plenary Stalking No Contact Order and Emergency Stalking No Contact Order
      % elif order_type['plenary']:
      Plenary Stalking No Contact Order
      % elif order_type['emergency']:
      Emergency Stalking No Contact Order
      % else:
      None
      % endif
  - Edit: emergency_reason
    button: |
      **Why should the court grant an Emergency SNCO?**
      ${emergency_reason}
    show if: order_type['emergency'] and trial_court.address.county.lower() == "cook"
  - Edit: protection_requested
    button: |
      **What do you want ${other_parties[0].name.full(middle='full')} to stop doing?**
      
      % if protection_requested['stalking']:
      * Stop stalking and threatening me, my family and household members, and stop enlisting other people to stalk or threaten
      % endif
      % if protection_requested['contacting']:
      * Stop contacting me, my family and household members whether in person, by phone, by e-mail, by note or by sending messages through other people
      % endif
      % if protection_requested['away']:
      * Stay away from the locations of me and my family and household members' home, work, school, or daycare
      % endif
  - Edit: distance_away
    button: |
      **How far should ${other_parties[0].name.full(middle='full')} stay away?**
      ${distance_away} feet
    show if: protection_requested['away']
  - Edit: protected_place_types
    button: |
      **What kinds of places do you want ${other_parties[0].name.full(middle='full')} to stay away from?**
      
      % if protected_place_types['Home']:
      * Home
      % endif
      % if protected_place_types['Workplace']:
      * Workplace
      % endif
      % if protected_place_types['School']:
      * School
      % endif
      % if protected_place_types['day_care']:
      * Day care
      % endif
      % if protected_place_types['Other']:
      * Other
      % endif
    show if: protection_requested['away']
  - Edit: home.address
    button: |
      **Your home address:**
      ${home.on_one_line(bare=True)}
    show if: protection_requested['away'] and protected_place_types['Home'] and hide_address
  - Edit: users[0].address
    button: |
      **Your home address:**
      ${users[0].address.on_one_line(bare=True)}
    show if: protection_requested['away'] and protected_place_types['Home'] and not hide_address
  - Edit: employers_schools.revisit
    button: |
      **Workplaces, schools, and day cares:**
      
      % for my_var in employers_schools:
        * ${ my_var.name.first }
      % endfor
    show if: protection_requested['away'] and (protected_place_types['Workplace'] or protected_place_types['School'] or protected_place_types['day_care'])
  - Edit: other_places
    button: |
      **What other places do you want ${other_parties[0].name.full(middle='full')} to stay away from?**
      ${other_places}
    show if: protection_requested['away'] and protected_place_types['Other']
  - Edit: live_with_stalker
    button: |
      **Does ${other_parties[0].name.full(middle='full')} live with you?**
      ${word(yesno(live_with_stalker))}
    show if: trial_court.address.county.lower() == "cook"
  - Edit: school_with_stalker
    button: |
      **Does ${other_parties[0].name.full(middle='full')} go to the same school as you?**
      ${word(yesno(school_with_stalker))}
    show if: trial_court.address.county.lower() == "cook"
  - Edit: which_stalker_school
    button: |
      **Which school do you and ${other_parties[0].name.full(middle='full')} go to?**
      ${which_stalker_school}
    show if: trial_court.address.county.lower() == "cook" and school_list.number_gathered() > 1
  - Edit: work_with_stalker
    button: |
      **Does ${other_parties[0].name.full(middle='full')} work at the same place as you?**
      ${word(yesno(work_with_stalker))}
    show if: trial_court.address.county.lower() == "cook"
  - Edit: which_stalker_work
    button: |
      **Where do you and ${other_parties[0].name.full(middle='full')} both work?**
      ${which_stalker_work}
    show if: trial_court.address.county.lower() == "cook" and work_list.number_gathered() > 1
  - Edit: other_parties[0].prohibit_firearms
    button: |
      **Do you want to stop ${other_parties[0].name.full(middle='full')} from having firearms or a Firearms Owner Identification Card?**
      ${word(yesno(other_parties[0].prohibit_firearms))}
  - Edit: other_parties[0].anything_else
    button: |
      **Do you want the court to make ${other_parties[0].name.full(middle='full')} to do or stop doing anything else?**
      ${word(yesno(other_parties[0].anything_else))}
  - Edit: other_parties[0].what_else
    button: |
      **What do you want ${other_parties[0].name.full(middle='full')} to do or stop doing?**
      ${other_parties[0].what_else}
    show if: other_parties[0].anything_else
  - Edit: other_parties[0].pay_costs
    button: |
      **Do you want ${other_parties[0].name.full(middle='full')} to pay any costs?**
      ${word(yesno(other_parties[0].pay_costs))}
    show if: trial_court.address.county.lower() == "cook"
  - Edit: other_parties[0].describe_costs
    button: |
      **What costs do you want ${other_parties[0].name.full(middle='full')} to pay**
      ${other_parties[0].describe_costs}
    show if: trial_court.address.county.lower() == "cook" and other_parties[0].pay_costs
  - Edit: other_parties[0].which_address
    button: |
      **Where should the sheriff deliver court papers to ${other_parties[0].name.full(middle='full')}?**
      % if other_parties[0].which_address == "home_address":
      ${other_parties[0].address.on_one_line(bare=True)}
      % elif other_parties[0].which_address == "employer_address":
      ${other_parties[0].employer_address.on_one_line(bare=True)}
      % elif other_parties[0].which_address == "add_service_address":
      ${other_parties[0].service_address.on_one_line(bare=True)}
      % endif
  - Edit: other_parties[0].bonus_service_check
    button: |
      **Do you want to list another place where the sheriff could serve ${other_parties[0].name.full(middle='full')}?**
      ${word(yesno(other_parties[0].bonus_service_check))}
  - Edit: other_parties[0].which_bonus_address
    button: |
      **Where else can the sheriff go to serve ${other_parties[0].name.full(middle='full')}?**
      % if other_parties[0].which_bonus_address == "home_address":
      ${other_parties[0].address.on_one_line(bare=True)}
      % elif other_parties[0].which_bonus_address == "employer_address":
      ${other_parties[0].employer_address.on_one_line(bare=True)}
      % elif other_parties[0].which_bonus_address == "service_address":
      ${other_parties[0].bonus_service_address.on_one_line(bare=True)}
      % endif
    show if: other_parties[0].bonus_service_check
  - Edit: service_information
    button: |
      **What other information will help the sheriff serve ${other_parties[0].name.full(middle="full")}?**
      ${service_information}
  - Edit: case_number
    button: |
      **Case number:**
      ${case_number}
  - Edit: users[0].has_email_address
    button: |
      **Your contact information:**
      Phone: ${phone_number_formatted(users[0].phone_number)}
      Email: ${users[0].email}
  - Edit: e_signature
    button: |
      **Do you want to add your electronic signature to your forms?**
      ${word(yesno(e_signature))}